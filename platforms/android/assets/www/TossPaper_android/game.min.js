var prexx = 0;
var preyy = 0;
var prezz = 0;
var xiaomishoot = false;
var first = true;
var xiaomiisready = false;
var notifytimeout = false;

function changeTog(data) {
    //var raw = new Int8Array(data);
    //return raw[0] / 64;
	
	var dv = new DataView(data);
	var raw = dv.getUint16(0,true);
	raw = raw << 2;
	dv.setUint16(0,raw,true);
	var value = dv.getInt16(0,true);
	return value/400;
}

document.addEventListener('bcready', function () {
        	BC.bluetooth.addEventListener("bluetoothstatechange", function () {
        		if (BC.bluetooth.isopen) {
        			alert("your bluetooth has been opened successfully.");
        		} else {
        			alert("bluetooth is closed!");
        			BC.Bluetooth.OpenBluetooth(function () { alert("opened!"); });
        		}
        	});
			
			BC.Bluetooth.GetConnectedDevices(function(devices){
				var isxiaomiband = false;
				for(var i = 0;i < devices.length;i++){
					if(devices[i].deviceName == "MI"){
						isxiaomiband = true;
						var miband = new BC.Device({deviceAddress:devices[i].deviceAddress,deviceName:devices[i].deviceName,type:'BLE',isConnected:true});
						miband.addEventListener("devicedisconnected",function(){
							alert("手环意外断开，请重启小米运动app再试试哦~");
							cordova.exec(null,null,"BCBluetooth","kill",[]);
						});
						miband.discoverServices(function(){
							miband.services[2].discoverCharacteristics(function(){
								setTimeout(function(){
									var time = 0;
									miband.services[2].characteristics[13].subscribe(function(data){
										xiaomiisready = true;
										var datastr = data.value.getHexString();
										console.log(datastr);
										var datalen = datastr.length;
										if(datalen == 16 || datalen == 28){
											var xx = changeTog(data.value.value.slice(2,4))/10;
											var yy = changeTog(data.value.value.slice(4,6))/10;
											var zz = changeTog(data.value.value.slice(6,8))/10;
											
											if(first){
												first = false;
											}else{
												if(Math.abs(xx - prexx) > 0.5 || Math.abs(yy - preyy) > 0.5 || Math.abs(zz - prezz) > 0.5){
													xiaomishoot = true;
												}
											}
											prexx = xx;
											preyy = yy;
											prezz = zz;									
										}else{
											console.log("data length is not right : "+datalen);
											alert("手环连接出错啦，后台彻底退出并重启小米运动App后再试试哦~");
											cordova.exec(null,null,"BCBluetooth","kill",[]);
										}
									}
								)},100);
								
								setTimeout(function(){
									miband.services[2].characteristics[4].write("Hex","1200",function(){
										setTimeout(function(){
											miband.services[2].characteristics[4].write("Hex","1201",function(){
											
											},function(){
												alert("write error!!!");
											})
										},100);
									},function(){
										alert("write error!!!");
									})
								},200);
								
								setInterval(function(){
									miband.services[2].characteristics[4].write("Hex","1200",function(){
										setTimeout(function(){
											miband.services[2].characteristics[4].write("Hex","1201",function(){
											
											},function(){
												alert("write error!!!");
											})
										},100);								
									},function(){
										alert("write error!!!");
									})
								},60000);								
							},function(){});
						},function(){});
					}
				}
				
				if(!isxiaomiband){
					alert("请先开启小米运动App，再打开游戏哦~");
					cordova.exec(null,null,"BCBluetooth","kill",[]);
				}
			},function(mes){alert(JSON.stringify(mes));});
			
        }, false);
		
var MLE = MLE || {};
MLE.init = function(b) {
    MLE.forceFPS = b.forceFPS || false;
    MLE.showDebug = b.showDebug || false;
    MLE.noCache = true;
    MLE.mouseScale = 1;
    MLE.mouse = new MouseInput;
    MLE.keyboard = new KeyboardInput;
    MLE.wrapper = document.getElementById(b.wrapper || "wrapper");
    MLE.canvas = document.getElementById(b.canvas || "gameCanvas");
    if (!MLE.canvas) {
        MLE.canvas = document.createElement("canvas"), MLE.canvas.id = "gameCanvas", MLE.wrapper.appendChild(MLE.canvas)
    }
    MLE.width = b.width || 320;
    MLE.height = b.height || 480;
    MLE.canvas.width = MLE.width;
    MLE.canvas.height = MLE.height;
    MLE.wrapper.style.width = MLE.width + "px";
    MLE.wrapper.style.height = MLE.height + "px";
    MLE.context = MLE.canvas.getContext("2d");
    MLE.scaling = b.scaling || true;
    MLE.scaling && MLE.initScaling();
    MLE.manifest = b.manifest || [];
    MLE.assets = new MLE.Assets;
    MLE.preManifest = b.preManifest || [];
    MLE.preLoader = new MLE.Loader(MLE.preManifest, MLE.startLoader.bindd(MLE));
    MLE.preLoaderScene = b.preLoaderScene;
    MLE.tick = 0;
    MLE.lastFrameTime = Date.now();
    MLE.gameType = b.game;
    MLE.game = null;
    MLE.cameraX = 0;
    MLE.cameraY = 0;
    MLE.lastCamX = 0;
    MLE.lastCamY = 0;
    MLE.context.imageSmoothingEnabled = true
};
MLE.startLoader = function() {
    MLE.tick = 0;
    MLE.lastFrameTime = Date.now();
    MLE.game = new MLE.preLoaderScene;
    MLE.rotateScene = new RotateScene;
    MLE.mouse.init();
    MLE.keyboard.init();
    MLE.loader = new MLE.Loader(MLE.manifest, function() {});
    MLE.gameLoop()
};
MLE.start = function() {
    setTimeout(function() {
        createjs.Tween._tweens = [];
        MLE.context.imageSmoothingEnabled = false;
        MLE.nextGame = new MLE.gameType
    }, 200)
};
MLE.initScaling = function() {
    MLE.sizeHandler();
    window.addEventListener("resize", function() {
        MLE.sizeHandler(15)
    }, false);
    window.addEventListener("orientationchange", function() {
        MLE.sizeHandler(15)
    }, false)
};
var cumulTick = 0,
    cumulCounter = 0,
    fps = 0;
MLE.gameLoop = function() {
    MLE.sizeHandler();
    if (window.innerHeight < window.innerWidth && isMobile.any()) {
        MLE.sizeHandler(), MLE.rotateScene.update(), MLE.rotateScene.draw()
    } else {
        document.body.style["background-color"] = "#000000";
        if (MLE.nextGame) {
            MLE.game = MLE.nextGame, MLE.nextGame = null
        }
        MLE.context.globalAlpha = 1;
        MLE.tick = Date.now() - MLE.lastFrameTime;
        MLE.context.clearRect(0, 0, MLE.width, MLE.height);
        MLE.lastFrameTime += MLE.tick;
        if (MLE.tick > 50) {
            MLE.tick = 50
        }
        Date.now();
        createjs.Tween.tick(MLE.tick, false);
        MLE.keyboard.update();
        MLE.mouse.update();
        MLE.game.update();
        Date.now();
        Date.now();
        MLE.game.draw();
        Date.now();
        cumulTick += MLE.tick;
        cumulCounter += 1;
        cumulTick > 1000 && (cumulTick -= 1000, fps = cumulCounter, cumulCounter = 0);
        if (MLE.showDebug) {
            MLE.context.font = "18px sans-serif", MLE.context.textAlign = "left", MLE.context.fillStyle = "#ff00ff", MLE.context.fillText(fps, 0, 20)
        }
        MLE.lastCamX = MLE.cameraX;
        MLE.lastCamY = MLE.cameraY
    }
    MLE.idAnimationFrame = requestAnimationFrame(MLE.gameLoop)
};
MLE.downCallbacks = function() {
    MLE.game && MLE.game.downCallbacks && MLE.game.downCallbacks()
};
MLE.upCallbacks = function() {
    MLE.game && MLE.game.upCallbacks && MLE.game.upCallbacks()
};
MLE.sizeHandler = function(g) {
    window.scrollTo(0, 1);
    var f = MLE.width,
        j = MLE.height,
        h = window.innerWidth,
        i = window.innerHeight,
        h = limitNumber(h, 160, 1200),
        i = limitNumber(i, 160, 1200);
    multiplier = Math.min(i / j, h / f);
    f *= multiplier;
    j *= multiplier;
    h = MLE.wrapper;
    h.style.display = "block";
    h.style.width = f + "px";
    h.style.height = j + 0 + "px";
    h.style.left = window.innerWidth / 2 - f / 2 + "px";
    h.style.top = window.innerHeight / 2 - j / 2 + "px";
    g && setTimeout(function() {
        MLE.sizeHandler(g - 1)
    }, 500)
};
(function() {
    for (var e = 0, d = ["ms", "moz", "webkit", "o"], f = 0; f < d.length && !window.requestAnimationFrame; ++f) {
        window.requestAnimationFrame = window[d[f] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[d[f] + "CancelAnimationFrame"] || window[d[f] + "CancelRequestAnimationFrame"]
    }
    if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function(a) {
            var j = (new Date).getTime(),
                i = Math.max(0, 16 - (j - e)),
                h = window.setTimeout(function() {
                    a(j + i)
                }, i);
            e = j + i;
            return h
        }
    }
    if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = function(b) {
            clearTimeout(b)
        }
    }
})();
MLE = MLE || {};
MLE.Assets = function() {
    this.textures = {};
    this.bitmaps = {}
};
MLE.Assets.prototype.addResource = function(b) {
    b.isSpriteSheet ? this.addSpriteSheet(b) : (this.addTexture(b.id, b.img), this.addBitmap(b.id, b.img))
};
MLE.Assets.prototype.addBitmap = function(e, d, f) {
    this.bitmaps[e] = new MLE.Bitmap(d, f)
};
MLE.Assets.prototype.addTexture = function(d, c) {
    this.textures[d] = c
};
MLE.Assets.prototype.addSpriteSheet = function(d) {
    this.addTexture(d.id, d.img);
    for (var c in d.descObj) {
        this.addBitmap(c, d.img, d.descObj[c].frame)
    }
};
MLE.Assets.prototype.getBitmap = function(d) {
    try {
        return this.bitmaps[d] === null ? null : this.bitmaps[d].clone()
    } catch (c) {
        console.log("can not find the image: ", d)
    }
};
MLE = MLE || {};
MLE.Util = {};
MLE.Util.toDeg = function(b) {
    return b * 180 / Math.PI
};
MLE.Util.toRad = function(b) {
    return b / 180 * Math.PI
};
MLE.Util.mapValue = function(g, f, j, h, i) {
    return h + (i - h) * ((g - f) / (j - f))
};
MLE.Util.testMapValue = function() {
    console.log("1, 2, 3, 4, 5");
    console.log(MLE.Util.mapValue(1, 2, 3, 4, 5));
    console.log("Powinno: 3");
    console.log("2, 2, 3, 4, 5");
    console.log(MLE.Util.mapValue(2, 2, 3, 4, 5));
    console.log("Powinno: 4");
    console.log("0.25, 0, 1, 100, 1100");
    console.log(MLE.Util.mapValue(0.25, 0, 1, 100, 1100));
    console.log("Powinno: 350");
    console.log("0.25, 0, 1, 1000, 0");
    console.log(MLE.Util.mapValue(0.25, 0, 1, 1000, 0));
    console.log("Powinno: 750");
    console.log("0.25, 0, 1, 1000, 0");
    console.log(MLE.Util.mapValue(0.25, 1, 0, 0, 1000));
    console.log("Powinno: 750");
    console.log("1250, 2000, 1000, 1.5, 0");
    console.log(MLE.Util.mapValue(1250, 2000, 1000, 1.5, 0));
    console.log("Powinno: 0.375");
    console.log("1250, 2000, 1000, 1.5, 3");
    console.log(MLE.Util.mapValue(1250, 2000, 1000, 1.4, 3));
    console.log("Powinno: 2.6")
};
MLE.Util.sortArray = function(d, c) {
    d.sort(function(b, f) {
        return f[c] - b[c]
    });
    return d
};
MLE.Util.ajaxRequest = function() {
    var e = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
    if (window.ActiveXObject) {
        for (var d = 0; d < e.length; d++) {
            try {
                return new ActiveXObject(e[d])
            } catch (f) {}
        }
    } else {
        return window.XMLHttpRequest ? new XMLHttpRequest : false
    }
};
MLE.Util.isCanvasEmpty = function(e) {
    for (var e = e.getContext("2d").getImageData(0, 0, e.width, e.height).data, d = 0, f = e.length; d < f; d += 4) {
        if (e[d + 3]) {
            return false
        }
    }
    return true
};
trace = function() {};
Function.prototype.bindd = function(d) {
    var c = this;
    return temp = function() {
        return c.apply(d, arguments)
    }
};
limitNumber = function(e, d, f) {
    return Math.min(f, Math.max(d, e))
};

function shuffleArray(f) {
    for (var d = f.length - 1; d > 0; d--) {
        var h = Math.floor(Math.random() * (d + 1)),
            g = f[d];
        f[d] = f[h];
        f[h] = g
    }
    return f
}
var isMobile = {
    Android: function() {
        return navigator.userAgent.match(/Android/i)
    },
    BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i)
    },
    iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i)
    },
    Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i)
    },
    Windows: function() {
        return navigator.userAgent.match(/IEMobile/i)
    },
    any: function() {
        return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()
    }
};

function getDistance(f, d, h, g) {
    f = Math.abs(f - h);
    d = Math.abs(d - g);
    return Math.sqrt(f * f + d * d)
}
MLE.Util.createArrayFromTo = function(h, g) {
    for (var l = Math.abs(h - g) / (h - g), j = [], k = true, i = h; k; i -= l) {
        j.push(i), i === g && (k = false)
    }
    return j
};
Number.prototype.map = function(f, d, h, g) {
    return h + (g - h) * ((this - f) / (d - f))
};
Number.prototype.isBetween = function(e, d) {
    var f;
    return this <= e && this >= d || this >= e && this <= d
};
MLE.Util.colorBetweenColors = function(g, f, j) {
    for (var h = [0, 0, 0, 0], i = 0; i < 4; i++) {
        h[i] = g[i] > f[i] ? g[i] - (g[i] - f[i]) * j : (f[i] - g[i]) * j + g[i]
    }
    for (i = 0; i < 4; i++) {
        h[i] = Math.floor(h[i])
    }
    return h
};
Number.prototype.map = function(f, d, h, g) {
    return h + (g - h) * ((this - f) / (d - f))
};
MLE = MLE || {};
MLE.Loader = function(g, f) {
    this.allResources = g.length;
    this.loadedResources = 0;
    this.onCompleteCallback = f;
    this.ready = false;
    this.manifest = g;
    if (MLE.noCache) {
        for (var j = 0; j < this.manifest.length; j++) {
            this.manifest[j].isFaceFont || (this.manifest[j].src += "?" + Date.now() + Math.random() * 999999)
        }
    }
    var h = new PxLoader;
    this.loader = h;
    for (j = 0; j < g.length; j++) {
        if (g[j].isJSON) {
            this.loadJSON(g[j])
        } else {
            if (g[j].isFaceFont) {
                var i = new MLE.FaceFont;
                i.onLoad = this.faceFontLoaded.bindd(this);
                i.loadFont(g[j].src)
            } else {
                i = new PxLoaderImage(g[j].src), i.id = g[j].id || null, i.isSpriteSheet = g[j].isSpriteSheet || false, i.descObj = g[j].descObj || null, h.add(i)
            }
        }
    }
    h.addProgressListener(this.onProgress.bindd(this));
    h.addCompletionListener(this.onComplete.bindd(this));
    h.start()
};
MLE.Loader.prototype.onProgress = function(b) {
    this.loadedResources += 1;
    MLE.assets.addResource(b.resource);
    this.drawProgress(b)
};
MLE.Loader.prototype.onComplete = function() {
    this.onLoadAsset()
};
MLE.Loader.prototype.drawProgress = function() {};
MLE.Loader.prototype.loadJSON = function(d) {
    var c = new MLE.Util.ajaxRequest;
    c.onreadystatechange = this.onLoadJSON.bindd(this);
    c.open("GET", d.src, true);
    c.send(null)
};
MLE.Loader.prototype.onLoadJSON = function(b) {
    b.target.readyState === 4 && (b.target.status === 200 ? (this.loadedResources += 1, this.drawProgress(), JSON.parse(b.target.responseText), this.onLoadAsset()) : alert("Error with loading json, try to reload!"))
};
MLE.Loader.prototype.faceFontLoaded = function() {
    this.loadedResources += 1;
    this.drawProgress();
    this.onLoadAsset()
};
MLE.Loader.prototype.onLoadAsset = function() {
    if (this.loadedResources === this.allResources && (this.ready = true, this.onCompleteCallback)) {
        this.onCompleteCallback()
    }
};
MLE = MLE || {};
MLE.Bitmap = function(d, c) {
    this.texture = d;
    this.rect = c ? c : {
        x: 0,
        y: 0,
        w: d.naturalWidth,
        h: d.naturalHeight
    }
};
MLE.Bitmap.prototype.draw = function(d, c) {
    MLE.context.drawImage(this.texture, this.rect.x, this.rect.y, this.rect.w, this.rect.h, d, c, this.rect.w, this.rect.h)
};
MLE.Bitmap.prototype.clone = function() {
    return new MLE.Bitmap(this.texture, this.rect)
};
MLE = MLE || {};
MLE.FrameAnim = function(e, d, f) {
    this.sprite = e;
    this.frameW = this.sprite.rect.w / d;
    this.frameH = this.sprite.rect.h / f;
    this.sprite.pivotX *= this.frameW / this.sprite.rect.w;
    this.sprite.pivotY *= this.frameH / this.sprite.rect.h;
    this.anims = {};
    this.currentAnim = null;
    this.stopped = false;
    this.cumulTime = 0
};
MLE.FrameAnim.prototype.addAnim = function(e, d, f) {
    this.anims[e] = {
        fps: f,
        frames: d,
        currentFrame: 0
    };
    this.currentFrame = this.anims[e]
};
MLE.FrameAnim.prototype.gotoAndPlay = function(e, d) {
    var f;
    if (d) {
        this.currentAnim = this.anims[d]
    }
    this.stopped = false;
    this.currentAnim.currentFrame = e || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.FrameAnim.prototype.gotoAndStop = function(e, d) {
    var f;
    if (d) {
        this.currentAnim = this.anims[d]
    }
    this.stopped = true;
    this.currentAnim.currentFrame = e || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.FrameAnim.prototype.update = function() {
    if (!(this.stopped || this.currentAnim === null)) {
        if (this.cumulTime += MLE.tick, this.cumulTime > 1000 / this.currentAnim.fps) {
            this.cumulTime -= 1000 / this.currentAnim.fps;
            if (this.currentAnim.currentFrame === this.currentAnim.frames.length - 1 && (this.onLoop(this.currentAnim), this.stopOnLoop)) {
                this.stopped = true;
                this.updateSpriteRect();
                return
            }
            this.currentAnim.currentFrame = (this.currentAnim.currentFrame + 1) % this.currentAnim.frames.length;
            this.onFrameChange(this.currentAnim, this.currentAnim.currentFrame);
            this.updateSpriteRect()
        }
    }
};
MLE.FrameAnim.prototype.updateSpriteRect = function() {
    var d = this.currentAnim.frames[this.currentAnim.currentFrame],
        c = Math.floor(d / Math.floor(this.sprite.bitmap.rect.w / this.frameW));
    this.sprite.rect.x = d % Math.floor(this.sprite.bitmap.rect.w / this.frameW) * this.frameW;
    this.sprite.rect.y = c * this.frameH;
    this.sprite.rect.w = this.frameW;
    this.sprite.rect.h = this.frameH
};
MLE.FrameAnim.prototype.onFrameChange = function() {};
MLE.FrameAnim.prototype.onLoop = function() {};
MLE.FrameAnim.prototype.isPlaying = function(b) {
    return this.currentAnim === this.anims[b] && this.anims[b] ? true : false
};
MLE = MLE || {};
MLE.Sprite = function(f, d, h, g) {
    typeof f === "string" && (f = MLE.assets.getBitmap(f));
    this.bitmap = f;
    this.rect = g ? g : {
        x: 0,
        y: 0,
        w: f.rect.w,
        h: f.rect.h
    };
    this.x = d;
    this.y = h;
    this.scaleY = this.scaleX = 1;
    this.pivotY = this.pivotX = this.angle = this.skewY = this.skewX = 0;
    this.alpha = 1;
    this.useTransforms = true;
    this.anchor = false
};
MLE.Sprite.prototype.draw = function() {
    if (this.alpha > 1) {
        this.alpha = 1
    } else {
        if (this.alpha < 0) {
            this.alpha = 0
        }
    }
    if (this.alpha !== 0) {
        var f = MLE.cameraX,
            d = MLE.cameraY;
        if (this.anchor) {
            MLE.cameraX = 0, MLE.cameraY = 0
        }
        if (this.useTransforms || !(this.x + this.pivotX + this.rect.w * this.scaleX < MLE.cameraX || this.x + this.pivotX > MLE.cameraX + MLE.width || this.y + this.pivotY + this.rect.h * this.scaleX < MLE.cameraY || this.y + this.pivotY > MLE.cameraY + MLE.height)) {
            var h = MLE.context.globalAlpha;
            MLE.context.globalAlpha *= this.alpha;
            if (this.useTransforms) {
                var g = MLE.context;
                g.save();
                g.translate(Math.floor(this.x - MLE.cameraX), Math.floor(this.y - MLE.cameraY));
                g.rotate(MLE.Util.toRad(this.angle));
                g.transform(this.scaleX, Math.tan(MLE.Util.toRad(this.skewY)), Math.tan(MLE.Util.toRad(this.skewX)), this.scaleY, 0, 0);
                MLE.context.drawImage(this.bitmap.texture, this.rect.x + this.bitmap.rect.x, this.rect.y + this.bitmap.rect.y, this.rect.w, this.rect.h, -this.pivotX, -this.pivotY, this.rect.w, this.rect.h);
                g.restore()
            } else {
                MLE.context.drawImage(this.bitmap.texture, this.rect.x + this.bitmap.rect.x, this.rect.y + this.bitmap.rect.y, this.rect.w, this.rect.h, Math.floor(this.x - MLE.cameraX), Math.floor(this.y - MLE.cameraY), this.rect.w, this.rect.h)
            }
            MLE.context.globalAlpha = h
        }
        MLE.cameraX = f;
        MLE.cameraY = d
    }
};
MLE.Sprite.prototype.centerPivot = function() {
    this.pivotX = this.rect.w / 2;
    this.pivotY = this.rect.h / 2
};
MLE.Sprite.prototype.setPivotPercent = function(d, c) {
    this.pivotX = d * this.rect.w;
    this.pivotY = c * this.rect.h
};
MLE.Sprite.prototype.changeBitmap = function(d, c) {
    typeof d === "string" && (d = MLE.assets.getBitmap(d));
    this.bitmap = d;
    this.rect = c ? c : {
        x: 0,
        y: 0,
        w: d.rect.w,
        h: d.rect.h
    }
};
MLE = MLE || {};
MLE.TextSprite = function(g, f, j, h, i) {
    this.x = f;
    this.y = j;
    this.alpha = 1;
    this.text = g || "";
    this.font = h || "Comic Sans MS";
    this.size = 32;
    this.align = i || "center";
    this.color = "#ffffff";
    this.border = "#000000";
    this.storkeThin = 5;
    this.baseline = "middle";
    this.lineHeight = 50;
    this.wrap = 9999
};
MLE.TextSprite.prototype.draw = function() {
    var b = MLE.context;
    b.save();
    b.globalAlpha *= this.alpha;
    b.font = this.size + "px " + this.font;
    b.textAlign = this.align;
    b.fillStyle = this.color;
    b.strokeStyle = this.border;
    b.textBaseline = this.baseline;
    b.lineWidth = 5;
    b.strokeText(this.text, this.x, this.y);
    b.fillText(this.text, this.x, this.y);
    b.restore()
};
MLE.TextSprite.prototype.getWidth = function() {
    var d = MLE.context;
    d.save();
    d.globalAlpha *= this.alpha;
    d.font = this.size + "px " + this.font;
    d.textAlign = this.align;
    d.fillStyle = this.color;
    d.strokeStyle = this.border;
    d.textBaseline = this.baseline;
    d.lineWidth = 5;
    var c = d.measureText(this.text);
    d.restore();
    return c.width
};
MLE.TextSprite.prototype.adjustFontSize = function(d) {
    for (var c = true; c === true && this.size > 5;) {
        this.getWidth() < d ? c = false : this.size -= 1
    }
};

function wrapText(h, g, l, j, k, i) {
    g = g.split("\n");
    for (k = 0; k < g.length; k++) {
        h.fillText(g[k], l, j, 40), h.lineWidth = 5, h.strokeText(g[k], l, j), j += i
    }
}
MLE = MLE || {};
MLE.Group = function() {
    this.y = this.x = 0;
    this.rect = {
        x: 0,
        y: 0,
        w: 0,
        h: 0
    };
    this.scaleY = this.scaleX = 1;
    this.pivotY = this.pivotX = this.angle = this.skewY = this.skewX = 0;
    this.alpha = 1;
    this.children = []
};
MLE.Group.prototype.draw = function() {
    if (this.alpha > 1) {
        this.alpha = 1
    } else {
        if (this.alpha < 0) {
            this.alpha = 0
        }
    }
    if (this.alpha !== 0) {
        var f = MLE.cameraX,
            d = MLE.cameraY;
        MLE.cameraX = 0;
        MLE.cameraY = 0;
        var h = MLE.context;
        h.save();
        h.globalAlpha *= this.alpha;
        h.translate(this.x - MLE.cameraX, this.y - MLE.cameraY);
        h.rotate(MLE.Util.toRad(this.angle));
        h.transform(this.scaleX, Math.tan(MLE.Util.toRad(this.skewY)), Math.tan(MLE.Util.toRad(this.skewX)), this.scaleY, 0, 0);
        h.translate(-this.pivotX, -this.pivotY);
        this.preDraw();
        for (var g = 0; g < this.children.length; g++) {
            this.children[g].draw()
        }
        this.postDraw();
        h.restore();
        MLE.cameraX = f;
        MLE.cameraY = d;
        h.globalAlpha /= this.alpha
    }
};
MLE.Group.prototype.centerPivot = function() {
    this.pivotX = this.rect.w / 2;
    this.pivotY = this.rect.h / 2
};
MLE.Group.prototype.addChild = function(b) {
    b.grouped = this;
    this.children.push(b)
};
MLE.Group.prototype.addChildInBack = function(b) {
    this.children.unshift(b)
};
MLE.Group.prototype.preDraw = function() {};
MLE.Group.prototype.postDraw = function() {};
MLE.Group.prototype.removeAllTweens = function() {
    createjs.Tween.removeTweens(this);
    for (var b = 0; b < this.children.length; b++) {
        createjs.Tween.removeTweens(this.children[b])
    }
};
MLE = MLE || {};
MLE.SimpleMovement = function(b) {
    this.sprite = b;
    this.init()
};
MLE.SimpleMovement.prototype.init = function() {
    this.accelY = this.accelX = this.velY = this.velX = 0;
    this.maxVelY = this.maxVelX = 1000;
    this.gravity = 0
};
MLE.SimpleMovement.prototype.update = function() {
    var b = this.accelX,
        b = b * MLE.tick / 1000;
    this.sprite.x += MLE.tick / 1000 * (this.velX + b / 2);
    this.velX += b;
    b = this.gravity + this.accelY;
    b = b * MLE.tick / 1000;
    this.sprite.y += MLE.tick / 1000 * (this.velY + b / 2);
    this.velY += b;
    if (this.velX > this.maxVelX) {
        this.velX = this.maxVelX
    } else {
        if (this.velX < -this.maxVelX) {
            this.velX = -this.maxVelX
        }
    }
    if (this.velY > this.maxVelY) {
        this.velY = this.maxVelY
    } else {
        if (this.velY < -this.maxVelY) {
            this.velY = -this.maxVelY
        }
    }
};
MLE.SimpleMovement.prototype.setValues = function(i, h, o, l, m, k, j) {
    this.velX = i;
    this.velY = h;
    this.accelX = o;
    this.accelY = l;
    this.maxVelX = m || this.maxVelX;
    this.maxVelY = k || this.maxVelY;
    this.gravity = j || this.gravity
};
MLE.CircleCollision = function(g, f, j, h, i) {
    this.sprite = g;
    this.x = f;
    this.y = j;
    this.r = h;
    this.fillStyle = i || "rgba(0,255,255,0.6)"
};
MLE.CircleCollision.prototype = {
    checkAgainst: function(e) {
        var d = Math.abs(this.sprite.x + this.x - e.x - e.sprite.x),
            f = Math.abs(this.sprite.y + this.y - e.y - e.sprite.y);
        return d * d + f * f < (this.r + e.r) * (this.r + e.r)
    },
    drawDebug: function() {}
};
MLE.CircleCollision.prototype.checkAgainstWithPosCorrection = function(f, d, h) {
    var g = this.checkAgainstWithShift(f, d, h);
    if (g === null) {
        return null
    }
    getDistance(d, h, g.ox1, g.oy1) < getDistance(d, h, g.ox2, g.oy2) || g.ox2 === null ? (f.sprite.x = g.ox1 - (this.x + this.sprite.x > g.ox1 ? 1 : -1), f.sprite.y = g.oy1 - (this.y + this.sprite.y > g.oy1 ? 1 : -1)) : (f.sprite.x = g.ox2 - (this.x + this.sprite.x > g.ox2 ? 1 : -1), f.sprite.y = g.oy2 - (this.y + this.sprite.y > g.oy2 ? 1 : -1));
    return true
};
MLE.CircleCollision.prototype.checkAgainstWithShift = function(s, r, q) {
    var o = (s.y + s.sprite.y - q) / (s.x + s.sprite.x - r),
        p = o * (this.x + this.sprite.x) + (q - r * o) - this.y - this.sprite.y,
        m = this.r + s.r,
        l = o * o + 1,
        k = 2 * o * p,
        j = k * k - 4 * l * (p * p - m * m),
        m = (-k - Math.sqrt(j)) / (2 * l),
        l = (-k + Math.sqrt(j)) / (2 * l),
        k = o * m + p,
        o = o * l + p;
    m += this.x + this.sprite.x;
    l += this.x + this.sprite.x;
    k += this.y + this.sprite.y;
    o += this.y + this.sprite.y;
    if (!m.isBetween(r, s.x + s.sprite.x) || !k.isBetween(q, s.y + s.sprite.y)) {
        k = m = null
    }
    if (!l.isBetween(r, s.x + s.sprite.x) || !o.isBetween(q, s.y + s.sprite.y)) {
        o = l = null
    }
    return (m === null || isNaN(m)) && (l === null || isNaN(l)) && (k === null || isNaN(k)) && (o === null || isNaN(o)) ? null : {
        ox1: m,
        oy1: k,
        ox2: l,
        oy2: o
    }
};
MLE = MLE || {};
MLE.TouchEventTarget = function(b) {
    this.sprite = b;
    this.isInside = false;
    this.collisionBox = {
        x: 0,
        y: 0,
        w: b.rect.w,
        h: b.rect.h
    }
};
MLE.TouchEventTarget.prototype.init = function() {};
MLE.TouchEventTarget.prototype.update = function() {
    var s = MLE.mouse.pressed,
        r = MLE.mouse.released,
        q = MLE.mouse.isDown,
        o = MLE.mouse.x,
        p = MLE.mouse.y,
        m = this.getCumulX(),
        l = this.getCumulY(),
        k = this.collisionBox.w,
        j = this.collisionBox.h,
        o = o > m && o < m + k && p > l && p < l + j ? true : false;
    if (q && o && !this.isInside) {
        this.isInside = true, this.onIn()
    }
    if (s && o) {
        this.onDown()
    }
    if (q && !o && this.isInside) {
        this.isInside = false, this.onOut()
    }
    if (r && o) {
        this.onUp()
    }
};
MLE.TouchEventTarget.prototype.drawDebug = function() {
    MLE.context.fillStyle = "#ffff00";
    MLE.context.globalAlpha = 0.5;
    MLE.context.fillRect(this.sprite.x - this.sprite.pivotX + this.collisionBox.x - MLE.cameraX, this.sprite.y - this.sprite.pivotY + this.collisionBox.y - MLE.cameraY, this.collisionBox.w, this.collisionBox.h);
    MLE.context.globalAlpha = 1
};
MLE.TouchEventTarget.prototype.setArea = function(f, d, h, g) {
    this.collisionBox.x = f;
    this.collisionBox.y = d;
    this.collisionBox.w = h;
    this.collisionBox.h = g
};
MLE.TouchEventTarget.prototype.onDown = function() {
    console.log("onDown")
};
MLE.TouchEventTarget.prototype.onUp = function() {
    console.log("onUp")
};
MLE.TouchEventTarget.prototype.onOut = function() {
    console.log("onOut")
};
MLE.TouchEventTarget.prototype.onIn = function() {};
MLE.TouchEventTarget.prototype.getCumulX = function() {
    for (var d = this.sprite.x - this.sprite.pivotX + this.collisionBox.x - MLE.cameraX, c = this.sprite; c.grouped;) {
        c = c.grouped, d += c.x - c.pivotX
    }
    return d
};
MLE.TouchEventTarget.prototype.getCumulY = function() {
    for (var d = this.sprite.y - this.sprite.pivotY + this.collisionBox.y - MLE.cameraY, c = this.sprite; c.grouped;) {
        c = c.grouped, d += c.y - c.pivotY
    }
    return d
};
MLE = MLE || {};
MLE.Pin = function(f, d, h, g) {
    this.spriteA = f;
    this.spriteB = d;
    this.offsetX = h;
    this.offsetY = g
};
MLE.Pin.prototype.update = function() {
    this.spriteA.x = this.spriteB.x + this.offsetX;
    this.spriteA.y = this.spriteB.y + this.offsetY
};
MLE.BoxCollision = function(g, f, j, h, i) {
    this.sprite = g;
    this.x = f;
    this.y = j;
    this.w = h;
    this.h = i
};
MLE.BoxCollision.prototype = {
    checkAgainst: function(b) {
        return !(this.x + this.sprite.x >= b.x + b.sprite.x + b.w || this.x + this.sprite.x + this.w <= b.x + b.sprite.x || this.y + this.sprite.y >= b.y + b.sprite.y + b.h || this.y + this.sprite.y + this.h <= b.y + b.sprite.y)
    },
    drawDebug: function() {
        MLE.context.fillStyle = "rgba(0,255,255,0.6)";
        MLE.context.fillRect(this.x + this.sprite.x - MLE.cameraX, this.y + this.sprite.y - MLE.cameraY, this.w, this.h)
    }
};
MLE = MLE || {};
MLE.ImageAnim = function(b) {
    this.sprite = b;
    this.frameW = this.sprite.rect.w;
    this.frameH = this.sprite.rect.h;
    this.anims = {};
    this.currentAnim = null;
    this.stopped = false;
    this.cumulTime = 0
};
MLE.ImageAnim.prototype.addAnim = function(e, d, f) {
    this.anims[e] = {
        fps: f,
        frames: d,
        currentFrame: 0
    };
    this.currentFrame = this.anims[e]
};
MLE.ImageAnim.prototype.gotoAndPlay = function(e, d) {
    if (d) {
        this.currentAnim = this.anims[d]
    }
    var f;
    this.stopped = false;
    this.currentAnim.currentFrame = e || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.ImageAnim.prototype.gotoAndStop = function(e, d) {
    if (d) {
        this.currentAnim = this.anims[d]
    }
    var f;
    this.stopped = true;
    this.currentAnim.currentFrame = e || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.ImageAnim.prototype.update = function() {
    if (!(this.stopped || this.currentAnim === null)) {
        if (this.cumulTime += MLE.tick, this.cumulTime > 1000 / this.currentAnim.fps) {
            this.cumulTime -= 1000 / this.currentAnim.fps;
            if (this.currentAnim.currentFrame === this.currentAnim.frames.length - 1 && (this.onLoop(this.currentAnim), this.stopOnLoop)) {
                this.stopped = true;
                this.updateSpriteRect();
                return
            }
            this.currentAnim.currentFrame = (this.currentAnim.currentFrame + 1) % this.currentAnim.frames.length;
            this.onFrameChange(this.currentAnim, this.currentAnim.currentFrame);
            this.updateSpriteRect()
        }
    }
};
MLE.ImageAnim.prototype.updateSpriteRect = function() {
    this.sprite.changeBitmap(this.currentAnim.frames[this.currentAnim.currentFrame])
};
MLE.ImageAnim.prototype.onFrameChange = function() {};
MLE.ImageAnim.prototype.onLoop = function() {};
MLE.ImageAnim.prototype.isPlaying = function(b) {
    return this.currentAnim === this.anims[b] && this.anims[b] ? true : false
};
MouseInput = function() {
    this.screenY = this.screenX = this.y = this.x = 0;
    this.isDown = false;
    this.event = null;
    this.pressed = this.released = this._pressed = this._released = this.useTouch = false
};
MouseInput.prototype = {
    init: function(b) {
        this.domElement = b;
        if ("ontouchstart" in document.documentElement) {
            this.useTouch = true
        }
        this.startListening()
    },
    startListening: function() {
        this.useTouch === true ? (MLE.wrapper.addEventListener("touchstart", this.touchStart.bindd(this), false), MLE.wrapper.addEventListener("touchmove", this.touchMove.bindd(this), false), MLE.wrapper.addEventListener("touchend", this.touchEnd.bindd(this), false)) : (MLE.wrapper.addEventListener("mousedown", this.onMouseDown.bindd(this), false), MLE.wrapper.addEventListener("mousemove", this.onMouseMove.bindd(this), false), MLE.wrapper.addEventListener("mouseup", this.onMouseUp.bindd(this), false))
    },
    stopListening: function() {
        this.useTouch === true ? (MLE.wrapper.removeEventListener("touchmove", this.touchMove.bindd(this)), MLE.wrapper.removeEventListener("touchend", this.touchEnd.bindd(this))) : (MLE.wrapper.removeEventListener("mousemove", this.onMouseMove.bindd(this)), MLE.wrapper.removeEventListener("mouseup", this.onMouseUp.bindd(this)));
        window.addEventListener("focus", this.reset.bindd(this), false);
        window.addEventListener("blur", this.reset.bindd(this), false)
    },
    destroy: function() {
        this.stopListening()
    },
    update: function() {
        this.released = this._released;
        this.pressed = this._pressed;
        this._pressed = this._released = false;
        var d = wrapper.style.width.slice(0, wrapper.style.width.length - 2) / MLE.width,
            c = wrapper.style.height.slice(0, wrapper.style.height.length - 2) / MLE.height;
        d === 0 && (d = c = 1);
        MLE.mouseScale = d;
        this.x = Math.floor((this.screenX - wrapper.offsetLeft) / d);
        this.y = Math.floor((this.screenY - wrapper.offsetTop) / c)
    },
    onMouseMove: function(b) {
        b.preventDefault();
        this.screenX = b.pageX;
        this.screenY = b.pageY
    },
    onMouseDown: function(b) {
        b.preventDefault();
        this._pressed = this.isDown = true;
        this.event = b;
        this.screenX = b.pageX;
        this.screenY = b.pageY;
        this.update();
        MLE.downCallbacks();
        this._pressed = this.isDown = true;
        this.event = b;
        this.screenX = b.pageX;
        this.screenY = b.pageY
    },
    onMouseUp: function(b) {
        if (this.isDown === true) {
            this._released = true, this.isDown = false, this.event = b, this.update(), MLE.upCallbacks(), this._released = true, this.isDown = false, this.event = b
        }
    },
    touchStart: function(b) {
        b.preventDefault();
        this._pressed = this.isDown = true;
        this.screenX = b.targetTouches[0].pageX;
        this.screenY = b.targetTouches[0].pageY;
        this.update();
        MLE.downCallbacks();
        this._pressed = this.isDown = true;
        this.screenX = b.targetTouches[0].pageX;
        this.screenY = b.targetTouches[0].pageY
    },
    touchMove: function(b) {
        b.preventDefault();
        this.screenX = b.targetTouches[0].pageX;
        this.screenY = b.targetTouches[0].pageY
    },
    touchEnd: function() {
        this.isDown = false;
        this._released = true;
        this.update();
        MLE.upCallbacks();
        this.isDown = false;
        this._released = true
    },
    clickEnd: function() {
        gotoSpilSite()
    },
    reset: function() {
        console.log("RESET!!!");
        this.screenY = this.screenX = this.y = this.x = 0;
        this.isDown = false;
        this.event = null;
        this.pressed = this.released = this._pressed = this._released = this.useTouch = false
    }
};
KeyboardInput = function() {
    this.key = 0;
    this._released = this._pressed = this.released = this.pressed = this.hasKeyboard = this.isDown = false
};
KeyboardInput.prototype = {
    init: function() {
        if ("onkeyup" in document.documentElement) {
            this.hasKeyboard = true, this.startListening()
        }
    },
    startListening: function() {
        document.body.addEventListener("keyup", this.keyUp.bindd(this), false);
        document.body.addEventListener("keydown", this.keyDown.bindd(this), false)
    },
    keyDown: function(b) {
        if (!(this.key == -1 && b.keyCode == 37) && !(this.key == 1 && b.keyCode == 39)) {
            if (b.keyCode == 37) {
                this.key = -1, this.isDown = this._pressed = true
            } else {
                if (b.keyCode == 39) {
                    this.key = 1, this.isDown = this._pressed = true
                }
            }
        }
    },
    keyUp: function(b) {
        this.key == -1 && b.keyCode == 37 ? (this.key = 0, this._released = true, this.isDown = false) : this.key == 1 && b.keyCode == 39 ? (this.key = 0, this._released = true, this.isDown = false) : b.keyCode > 48 && b.keyCode < 56 ? (console.log("Produkuje powerupa", b.keyCode - 48), gameScene && gameScene.spawnPowerUp(Math.random() * (MLE.width - getConst(200)) + getConst(100), Math.random() * getConst(500) + getConst(75), -1, b.keyCode - 48, true)) : b.keyCode === 48 && (console.log("Produkuje rep", b.keyCode - 48), gameScene && gameScene.spawnRepairPart(Math.random() * (MLE.width - getConst(200)) + getConst(100), Math.random() * getConst(500) + getConst(75), -1, true))
    },
    update: function() {
        this.released = this._released;
        this.pressed = this._pressed;
        this._pressed = this._released = false
    }
};
MLE = MLE || {};
MLE.FaceFont = function() {};
MLE.FaceFont.prototype.loadFont = function(f) {
    var d = document.createElement("canvas");
    d.width = 64;
    d.height = 64;
    var h = d.getContext("2d"),
        g = setInterval(function() {
            h.clearRect(0, 0, 64, 64);
            h.font = "32px " + f;
            h.fillStyle = "#ffffff";
            h.fillText("test", 32, 32);
            MLE.context.drawImage(d, 100, 100);
            var a = MLE.Util.isCanvasEmpty(d);
            h.font !== "10px sans-serif" && !a && (this.onLoad(f), clearInterval(g))
        }.bindd(this), 500)
};
MLE.FaceFont.prototype.onLoad = function() {};
var JSON;
JSON || (JSON = {});
(function() {
    function a(a) {
        return a < 10 ? "0" + a : a
    }

    function b(a) {
        d.lastIndex = 0;
        return d.test(a) ? '"' + a.replace(d, function(a) {
            var b = h[a];
            return typeof b === "string" ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + a + '"'
    }

    function c(a, e) {
        var d, h, m, o, p = f,
            k, j = e[a];
        j && typeof j === "object" && typeof j.toJSON === "function" && (j = j.toJSON(a));
        typeof i === "function" && (j = i.call(e, a, j));
        switch (typeof j) {
            case "string":
                return b(j);
            case "number":
                return isFinite(j) ? String(j) : "null";
            case "boolean":
            case "null":
                return String(j);
            case "object":
                if (!j) {
                    return "null"
                }
                f += g;
                k = [];
                if (Object.prototype.toString.apply(j) === "[object Array]") {
                    o = j.length;
                    for (d = 0; d < o; d += 1) {
                        k[d] = c(d, j) || "null"
                    }
                    m = k.length === 0 ? "[]" : f ? "[\n" + f + k.join(",\n" + f) + "\n" + p + "]" : "[" + k.join(",") + "]";
                    f = p;
                    return m
                }
                if (i && typeof i === "object") {
                    o = i.length;
                    for (d = 0; d < o; d += 1) {
                        typeof i[d] === "string" && (h = i[d], (m = c(h, j)) && k.push(b(h) + (f ? ": " : ":") + m))
                    }
                } else {
                    for (h in j) {
                        Object.prototype.hasOwnProperty.call(j, h) && (m = c(h, j)) && k.push(b(h) + (f ? ": " : ":") + m)
                    }
                }
                m = k.length === 0 ? "{}" : f ? "{\n" + f + k.join(",\n" + f) + "\n" + p + "}" : "{" + k.join(",") + "}";
                f = p;
                return m
        }
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function() {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "Z" : null
        }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
            return this.valueOf()
        }
    }
    var e = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        d = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        f, g, h = {
            "\u0008": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\u000c": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        },
        i;
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function(a, b, e) {
            var d;
            g = f = "";
            if (typeof e === "number") {
                for (d = 0; d < e; d += 1) {
                    g += " "
                }
            } else {
                typeof e === "string" && (g = e)
            }
            if ((i = b) && typeof b !== "function" && (typeof b !== "object" || typeof b.length !== "number")) {
                throw Error("JSON.stringify")
            }
            return c("", {
                "": a
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function(a, b) {
            function c(a, e) {
                var d, f, g = a[e];
                if (g && typeof g === "object") {
                    for (d in g) {
                        Object.prototype.hasOwnProperty.call(g, d) && (f = c(g, d), f !== void 0 ? g[d] = f : delete g[d])
                    }
                }
                return b.call(a, e, g)
            }
            var d, a = String(a);
            e.lastIndex = 0;
            e.test(a) && (a = a.replace(e, function(a) {
                return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
            }));
            if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                return d = eval("(" + a + ")"), typeof b === "function" ? c({
                    "": d
                }, "") : d
            }
            throw new SyntaxError("JSON.parse")
        }
    }
})();
var createjs = this.createjs = this.createjs || {};
(function() {
    var d = function() {
            this.initialize()
        },
        c = d.prototype;
    d.initialize = function(b) {
        b.addEventListener = c.addEventListener;
        b.removeEventListener = c.removeEventListener;
        b.removeAllEventListeners = c.removeAllEventListeners;
        b.hasEventListener = c.hasEventListener;
        b.dispatchEvent = c.dispatchEvent
    };
    c._listeners = null;
    c.initialize = function() {};
    c.addEventListener = function(g, e) {
        var i = this._listeners;
        i ? this.removeEventListener(g, e) : i = this._listeners = {};
        var h = i[g];
        h || (h = i[g] = []);
        h.push(e);
        return e
    };
    c.removeEventListener = function(i, e) {
        var m = this._listeners;
        if (m) {
            var l = m[i];
            if (l) {
                for (var k = 0, j = l.length; k < j; k++) {
                    if (l[k] == e) {
                        1 == j ? delete m[i] : l.splice(k, 1);
                        break
                    }
                }
            }
        }
    };
    c.removeAllEventListeners = function(b) {
        b ? this._listeners && delete this._listeners[b] : this._listeners = null
    };
    c.dispatchEvent = function(j, e) {
        var p = false,
            o = this._listeners;
        if (j && o) {
            "string" == typeof j && (j = {
                type: j
            });
            j.target = e || this;
            o = o[j.type];
            if (!o) {
                return p
            }
            for (var o = o.slice(), m = 0, l = o.length; m < l; m++) {
                var k = o[m];
                k instanceof Function ? p = p || k.apply(null, [j]) : k.handleEvent && (p = p || k.handleEvent(j))
            }
        }
        return !!p
    };
    c.hasEventListener = function(f) {
        var e = this._listeners;
        return !(!e || !e[f])
    };
    c.toString = function() {
        return "[EventDispatcher]"
    };
    createjs.EventDispatcher = d
})();
this.createjs = this.createjs || {};
(function() {
    var d = function(f, e, g) {
            this.initialize(f, e, g)
        },
        c = d.prototype;
    d.NONE = 0;
    d.LOOP = 1;
    d.REVERSE = 2;
    d.IGNORE = {};
    d._tweens = [];
    d._plugins = {};
    d.get = function(a, h, i, g) {
        g && d.removeTweens(a);
        return new d(a, h, i)
    };
    d.tick = function(a, j) {
        for (var k = d._tweens.slice(), i = k.length - 1; 0 <= i; i--) {
            var h = k[i];
            j && !h.ignoreGlobalPause || h._paused || h.tick(h._useTicks ? 1 : a)
        }
    };
    createjs.Ticker && createjs.Ticker.addListener(d, false);
    d.removeTweens = function(a) {
        if (a.tweenjs_count) {
            for (var f = d._tweens, g = f.length - 1; 0 <= g; g--) {
                f[g]._target == a && (f[g]._paused = true, f.splice(g, 1))
            }
            a.tweenjs_count = 0
        }
    };
    d.hasActiveTweens = function(a) {
        return a ? a.tweenjs_count : d._tweens && d._tweens.length
    };
    d.installPlugin = function(u, r) {
        var s = u.priority;
        null == s && (u.priority = s = 0);
        for (var p = 0, o = r.length, m = d._plugins; p < o; p++) {
            var k = r[p];
            if (m[k]) {
                for (var a = m[k], j = 0, v = a.length; j < v && !(s < a[j].priority); j++) {}
                m[k].splice(j, 0, u)
            } else {
                m[k] = [u]
            }
        }
    };
    d._register = function(a, f) {
        var g = a._target;
        f ? (g && (g.tweenjs_count = g.tweenjs_count ? g.tweenjs_count + 1 : 1), d._tweens.push(a)) : (g && g.tweenjs_count--, g = d._tweens.indexOf(a), -1 != g && d._tweens.splice(g, 1))
    };
    c.addEventListener = null;
    c.removeEventListener = null;
    c.removeAllEventListeners = null;
    c.dispatchEvent = null;
    c.hasEventListener = null;
    c._listeners = null;
    createjs.EventDispatcher.initialize(c);
    c.ignoreGlobalPause = false;
    c.loop = false;
    c.duration = 0;
    c.pluginData = null;
    c.onChange = null;
    c.change = null;
    c.target = null;
    c.position = null;
    c._paused = false;
    c._curQueueProps = null;
    c._initQueueProps = null;
    c._steps = null;
    c._actions = null;
    c._prevPosition = 0;
    c._stepPosition = 0;
    c._prevPos = -1;
    c._target = null;
    c._useTicks = false;
    c.initialize = function(a, f, g) {
        this.target = this._target = a;
        f && (this._useTicks = f.useTicks, this.ignoreGlobalPause = f.ignoreGlobalPause, this.loop = f.loop, this.onChange = f.onChange, f.override && d.removeTweens(a));
        this.pluginData = g || {};
        this._curQueueProps = {};
        this._initQueueProps = {};
        this._steps = [];
        this._actions = [];
        f && f.paused ? this._paused = true : d._register(this, true);
        f && null != f.position && this.setPosition(f.position, d.NONE)
    };
    c.wait = function(f) {
        if (null == f || 0 >= f) {
            return this
        }
        var e = this._cloneProps(this._curQueueProps);
        return this._addStep({
            d: f,
            p0: e,
            e: this._linearEase,
            p1: e
        })
    };
    c.to = function(f, e, g) {
        if (isNaN(e) || 0 > e) {
            e = 0
        }
        return this._addStep({
            d: e || 0,
            p0: this._cloneProps(this._curQueueProps),
            e: g,
            p1: this._cloneProps(this._appendQueueProps(f))
        })
    };
    c.call = function(f, e, g) {
        return this._addAction({
            f: f,
            p: e ? e : [this],
            o: g ? g : this._target
        })
    };
    c.set = function(f, e) {
        return this._addAction({
            f: this._set,
            o: this,
            p: [f, e ? e : this._target]
        })
    };
    c.play = function(b) {
        return this.call(b.setPaused, [false], b)
    };
    c.pause = function(b) {
        b || (b = this);
        return this.call(b.setPaused, [true], b)
    };
    c.setPosition = function(j, e) {
        0 > j && (j = 0);
        null == e && (e = 1);
        var p = j,
            o = false;
        p >= this.duration && (this.loop ? p %= this.duration : (p = this.duration, o = true));
        if (p == this._prevPos) {
            return o
        }
        var m = this._prevPos;
        this.position = this._prevPos = p;
        this._prevPosition = j;
        if (this._target) {
            if (o) {
                this._updateTargetProps(null, 1)
            } else {
                if (0 < this._steps.length) {
                    for (var l = 0, k = this._steps.length; l < k && !(this._steps[l].t > p); l++) {}
                    l = this._steps[l - 1];
                    this._updateTargetProps(l, (this._stepPosition = p - l.t) / l.d)
                }
            }
        }
        0 != e && 0 < this._actions.length && (this._useTicks ? this._runActions(p, p) : 1 == e && p < m ? (m != this.duration && this._runActions(m, this.duration), this._runActions(0, p, true)) : this._runActions(m, p));
        o && this.setPaused(true);
        this.onChange && this.onChange(this);
        this.dispatchEvent("change");
        return o
    };
    c.tick = function(b) {
        this._paused || this.setPosition(this._prevPosition + b)
    };
    c.setPaused = function(a) {
        this._paused = !!a;
        d._register(this, !a);
        return this
    };
    c.w = c.wait;
    c.t = c.to;
    c.c = c.call;
    c.s = c.set;
    c.toString = function() {
        return "[Tween]"
    };
    c.clone = function() {
        throw "Tween can not be cloned."
    };
    c._updateTargetProps = function(u, r) {
        var s, p, o, m;
        !u && 1 == r ? s = p = this._curQueueProps : (u.e && (r = u.e(r, 0, 1, 1)), s = u.p0, p = u.p1);
        for (n in this._initQueueProps) {
            if (null == (o = s[n])) {
                s[n] = o = this._initQueueProps[n]
            }
            if (null == (m = p[n])) {
                p[n] = m = o
            }
            o = o == m || 0 == r || 1 == r || "number" != typeof o ? 1 == r ? m : o : o + (m - o) * r;
            var k = false;
            if (m = d._plugins[n]) {
                for (var a = 0, j = m.length; a < j; a++) {
                    var v = m[a].tween(this, n, o, s, p, r, !!u && s == p, !u);
                    v == d.IGNORE ? k = true : o = v
                }
            }
            k || (this._target[n] = o)
        }
    };
    c._runActions = function(t, s, r) {
        var p = t,
            o = s,
            m = -1,
            k = this._actions.length,
            e = 1;
        for (t > s && (p = s, o = t, m = k, k = e = -1);
            (m += e) != k;) {
            var s = this._actions[m],
                j = s.t;
            (j == o || j > p && j < o || r && j == t) && s.f.apply(s.o, s.p)
        }
    };
    c._appendQueueProps = function(a) {
        var o, p, m, l, k, j;
        for (j in a) {
            if (void 0 === this._initQueueProps[j]) {
                p = this._target[j];
                if (o = d._plugins[j]) {
                    m = 0;
                    for (l = o.length; m < l; m++) {
                        p = o[m].init(this, j, p)
                    }
                }
                this._initQueueProps[j] = void 0 === p ? null : p
            } else {
                p = this._curQueueProps[j]
            }
            if (o = d._plugins[j]) {
                k = k || {};
                m = 0;
                for (l = o.length; m < l; m++) {
                    o[m].step && o[m].step(this, j, p, a[j], k)
                }
            }
            this._curQueueProps[j] = a[j]
        }
        k && this._appendQueueProps(k);
        return this._curQueueProps
    };
    c._cloneProps = function(f) {
        var e = {},
            g;
        for (g in f) {
            e[g] = f[g]
        }
        return e
    };
    c._addStep = function(b) {
        0 < b.d && (this._steps.push(b), b.t = this.duration, this.duration += b.d);
        return this
    };
    c._addAction = function(b) {
        b.t = this.duration;
        this._actions.push(b);
        return this
    };
    c._set = function(f, e) {
        for (var g in f) {
            e[g] = f[g]
        }
    };
    createjs.Tween = d
})();
this.createjs = this.createjs || {};
(function() {
    var d = function(f, e, g) {
            this.initialize(f, e, g)
        },
        c = d.prototype;
    c.ignoreGlobalPause = false;
    c.duration = 0;
    c.loop = false;
    c.onChange = null;
    c.position = null;
    c._paused = false;
    c._tweens = null;
    c._labels = null;
    c._prevPosition = 0;
    c._prevPos = -1;
    c._useTicks = false;
    c.initialize = function(f, e, g) {
        this._tweens = [];
        g && (this._useTicks = g.useTicks, this.loop = g.loop, this.ignoreGlobalPause = g.ignoreGlobalPause, this.onChange = g.onChange);
        f && this.addTween.apply(this, f);
        this.setLabels(e);
        g && g.paused ? this._paused = true : createjs.Tween._register(this, true);
        g && null != g.position && this.setPosition(g.position, createjs.Tween.NONE)
    };
    c.addTween = function(f) {
        var e = arguments.length;
        if (1 < e) {
            for (var g = 0; g < e; g++) {
                this.addTween(arguments[g])
            }
            return arguments[0]
        }
        if (0 == e) {
            return null
        }
        this.removeTween(f);
        this._tweens.push(f);
        f.setPaused(true);
        f._paused = false;
        f._useTicks = this._useTicks;
        f.duration > this.duration && (this.duration = f.duration);
        0 <= this._prevPos && f.setPosition(this._prevPos, createjs.Tween.NONE);
        return f
    };
    c.removeTween = function(g) {
        var e = arguments.length;
        if (1 < e) {
            for (var i = true, h = 0; h < e; h++) {
                i = i && this.removeTween(arguments[h])
            }
            return i
        }
        if (0 == e) {
            return false
        }
        e = this._tweens.indexOf(g);
        return -1 != e ? (this._tweens.splice(e, 1), g.duration >= this.duration && this.updateDuration(), true) : false
    };
    c.addLabel = function(f, e) {
        this._labels[f] = e
    };
    c.setLabels = function(b) {
        this._labels = b ? b : {}
    };
    c.gotoAndPlay = function(b) {
        this.setPaused(false);
        this._goto(b)
    };
    c.gotoAndStop = function(b) {
        this.setPaused(true);
        this._goto(b)
    };
    c.setPosition = function(i, e) {
        0 > i && (i = 0);
        var m = this.loop ? i % this.duration : i,
            l = !this.loop && i >= this.duration;
        if (m == this._prevPos) {
            return l
        }
        this._prevPosition = i;
        this.position = this._prevPos = m;
        for (var k = 0, j = this._tweens.length; k < j; k++) {
            if (this._tweens[k].setPosition(m, e), m != this._prevPos) {
                return false
            }
        }
        l && this.setPaused(true);
        this.onChange && this.onChange(this);
        return l
    };
    c.setPaused = function(b) {
        this._paused = !!b;
        createjs.Tween._register(this, !b)
    };
    c.updateDuration = function() {
        for (var f = this.duration = 0, e = this._tweens.length; f < e; f++) {
            tween = this._tweens[f], tween.duration > this.duration && (this.duration = tween.duration)
        }
    };
    c.tick = function(b) {
        this.setPosition(this._prevPosition + b)
    };
    c.resolve = function(f) {
        var e = parseFloat(f);
        isNaN(e) && (e = this._labels[f]);
        return e
    };
    c.toString = function() {
        return "[Timeline]"
    };
    c.clone = function() {
        throw "Timeline can not be cloned."
    };
    c._goto = function(b) {
        b = this.resolve(b);
        null != b && this.setPosition(b)
    };
    createjs.Timeline = d
})();
this.createjs = this.createjs || {};
(function() {
    var b = function() {
        throw "Ease cannot be instantiated."
    };
    b.linear = function(c) {
        return c
    };
    b.none = b.linear;
    b.get = function(c) {
        -1 > c && (c = -1);
        1 < c && (c = 1);
        return function(a) {
            return 0 == c ? a : 0 > c ? a * (a * -c + 1 + c) : a * ((2 - a) * c + (1 - c))
        }
    };
    b.getPowIn = function(c) {
        return function(a) {
            return Math.pow(a, c)
        }
    };
    b.getPowOut = function(c) {
        return function(a) {
            return 1 - Math.pow(1 - a, c)
        }
    };
    b.getPowInOut = function(c) {
        return function(a) {
            return 1 > (a *= 2) ? 0.5 * Math.pow(a, c) : 1 - 0.5 * Math.abs(Math.pow(2 - a, c))
        }
    };
    b.quadIn = b.getPowIn(2);
    b.quadOut = b.getPowOut(2);
    b.quadInOut = b.getPowInOut(2);
    b.cubicIn = b.getPowIn(3);
    b.cubicOut = b.getPowOut(3);
    b.cubicInOut = b.getPowInOut(3);
    b.quartIn = b.getPowIn(4);
    b.quartOut = b.getPowOut(4);
    b.quartInOut = b.getPowInOut(4);
    b.quintIn = b.getPowIn(5);
    b.quintOut = b.getPowOut(5);
    b.quintInOut = b.getPowInOut(5);
    b.sineIn = function(c) {
        return 1 - Math.cos(c * Math.PI / 2)
    };
    b.sineOut = function(c) {
        return Math.sin(c * Math.PI / 2)
    };
    b.sineInOut = function(c) {
        return -0.5 * (Math.cos(Math.PI * c) - 1)
    };
    b.getBackIn = function(c) {
        return function(a) {
            return a * a * ((c + 1) * a - c)
        }
    };
    b.backIn = b.getBackIn(1.7);
    b.getBackOut = function(c) {
        return function(a) {
            return --a * a * ((c + 1) * a + c) + 1
        }
    };
    b.backOut = b.getBackOut(1.7);
    b.getBackInOut = function(c) {
        c *= 1.525;
        return function(a) {
            return 1 > (a *= 2) ? 0.5 * a * a * ((c + 1) * a - c) : 0.5 * ((a -= 2) * a * ((c + 1) * a + c) + 2)
        }
    };
    b.backInOut = b.getBackInOut(1.7);
    b.circIn = function(c) {
        return -(Math.sqrt(1 - c * c) - 1)
    };
    b.circOut = function(c) {
        return Math.sqrt(1 - --c * c)
    };
    b.circInOut = function(c) {
        return 1 > (c *= 2) ? -0.5 * (Math.sqrt(1 - c * c) - 1) : 0.5 * (Math.sqrt(1 - (c -= 2) * c) + 1)
    };
    b.bounceIn = function(a) {
        return 1 - b.bounceOut(1 - a)
    };
    b.bounceOut = function(c) {
        return c < 1 / 2.75 ? 7.5625 * c * c : c < 2 / 2.75 ? 7.5625 * (c -= 1.5 / 2.75) * c + 0.75 : c < 2.5 / 2.75 ? 7.5625 * (c -= 2.25 / 2.75) * c + 0.9375 : 7.5625 * (c -= 2.625 / 2.75) * c + 0.984375
    };
    b.bounceInOut = function(a) {
        return 0.5 > a ? 0.5 * b.bounceIn(2 * a) : 0.5 * b.bounceOut(2 * a - 1) + 0.5
    };
    b.getElasticIn = function(d, g) {
        var f = 2 * Math.PI;
        return function(c) {
            if (0 == c || 1 == c) {
                return c
            }
            var a = g / f * Math.asin(1 / d);
            return -(d * Math.pow(2, 10 * (c -= 1)) * Math.sin((c - a) * f / g))
        }
    };
    b.elasticIn = b.getElasticIn(1, 0.3);
    b.getElasticOut = function(d, g) {
        var f = 2 * Math.PI;
        return function(c) {
            if (0 == c || 1 == c) {
                return c
            }
            var a = g / f * Math.asin(1 / d);
            return d * Math.pow(2, -10 * c) * Math.sin((c - a) * f / g) + 1
        }
    };
    b.elasticOut = b.getElasticOut(1, 0.3);
    b.getElasticInOut = function(d, g) {
        var f = 2 * Math.PI;
        return function(c) {
            var a = g / f * Math.asin(1 / d);
            return 1 > (c *= 2) ? -0.5 * d * Math.pow(2, 10 * (c -= 1)) * Math.sin((c - a) * f / g) : 0.5 * d * Math.pow(2, -10 * (c -= 1)) * Math.sin((c - a) * f / g) + 1
        }
    };
    b.elasticInOut = b.getElasticInOut(1, 0.3 * 1.5);
    createjs.Ease = b
})();
this.createjs = this.createjs || {};
(function() {
    var b = function() {
        throw "MotionGuidePlugin cannot be instantiated."
    };
    b.priority = 0;
    b.install = function() {
        createjs.Tween.installPlugin(b, ["guide", "x", "y", "rotation"]);
        return createjs.Tween.IGNORE
    };
    b.init = function(d, g, f) {
        d = d.target;
        d.hasOwnProperty("x") || (d.x = 0);
        d.hasOwnProperty("y") || (d.y = 0);
        d.hasOwnProperty("rotation") || (d.rotation = 0);
        return "guide" == g ? null : f
    };
    b.step = function(O, N, L, M, K) {
        if ("guide" != N) {
            return M
        }
        var J;
        M.hasOwnProperty("path") || (M.path = []);
        O = M.path;
        M.hasOwnProperty("end") || (M.end = 1);
        M.hasOwnProperty("start") || (M.start = L && L.hasOwnProperty("end") && L.path === O ? L.end : 0);
        if (M.hasOwnProperty("_segments") && M._length) {
            return M
        }
        L = O.length;
        if (6 <= L && 0 == (L - 2) % 4) {
            M._segments = [];
            M._length = 0;
            for (N = 2; N < L; N += 4) {
                for (var I = O[N - 2], H = O[N - 1], A = O[N + 0], E = O[N + 1], x = O[N + 2], a = O[N + 3], D = I, C = H, B, F, G = 0, y = [], w = 1; 10 >= w; w++) {
                    F = w / 10;
                    var z = 1 - F;
                    B = z * z * I + 2 * z * F * A + F * F * x;
                    F = z * z * H + 2 * z * F * E + F * F * a;
                    G += y[y.push(Math.sqrt((J = B - D) * J + (J = F - C) * J)) - 1];
                    D = B;
                    C = F
                }
                M._segments.push(G);
                M._segments.push(y);
                M._length += G
            }
        } else {
            throw "invalid 'path' data, please see documentation for valid paths"
        }
        J = M.orient;
        M.orient = false;
        b.calc(M, M.end, K);
        M.orient = J;
        return M
    };
    b.tween = function(a, o, l, m, k, j, i) {
        k = k.guide;
        if (void 0 == k || k === m.guide) {
            return l
        }
        k.lastRatio != j && (b.calc(k, (k.end - k.start) * (i ? k.end : j) + k.start, a.target), k.orient && (a.target.rotation += m.rotation || 0), k.lastRatio = j);
        return !k.orient && "rotation" == o ? l : a.target[o]
    };
    b.calc = function(a, q, o) {
        void 0 == a._segments && b.validate(a);
        void 0 == o && (o = {
            x: 0,
            y: 0,
            rotation: 0
        });
        for (var p = a._segments, m = a.path, l = a._length * q, k = p.length - 2, q = 0; l > p[q] && q < k;) {
            l -= p[q], q += 2
        }
        for (var p = p[q + 1], j = 0, k = p.length - 1; l > p[j] && j < k;) {
            l -= p[j], j++
        }
        l = j / ++k + l / (k * p[j]);
        q = 2 * q + 2;
        k = 1 - l;
        o.x = k * k * m[q - 2] + 2 * k * l * m[q + 0] + l * l * m[q + 2];
        o.y = k * k * m[q - 1] + 2 * k * l * m[q + 1] + l * l * m[q + 3];
        a.orient && (o.rotation = 57.2957795 * Math.atan2((m[q + 1] - m[q - 1]) * k + (m[q + 3] - m[q + 1]) * l, (m[q + 0] - m[q - 2]) * k + (m[q + 2] - m[q + 0]) * l));
        return o
    };
    createjs.MotionGuidePlugin = b
})();
(function() {
    var b = this.createjs = this.createjs || {},
        b = b.TweenJS = b.TweenJS || {};
    b.version = "0.4.0";
    b.buildDate = "Tue, 12 Feb 2013 21:09:02 GMT"
})();

function PxLoader(s) {
    s = s || {};
    if (s.statusInterval == null) {
        s.statusInterval = 5000
    }
    if (s.loggingDelay == null) {
        s.loggingDelay = 20000
    }
    if (s.noProgressTimeout == null) {
        s.noProgressTimeout = Infinity
    }
    var r = [],
        q = [],
        o, p = +new Date;
    this.add = function(b) {
        b.tags = new PxLoaderTags(b.tags);
        if (b.priority == null) {
            b.priority = Infinity
        }
        r.push({
            resource: b,
            status: 0
        })
    };
    this.addProgressListener = function(d, c) {
        q.push({
            callback: d,
            tags: new PxLoaderTags(c)
        })
    };
    this.addCompletionListener = function(d, c) {
        q.push({
            tags: new PxLoaderTags(c),
            callback: function(a) {
                a.completedCount === a.totalCount && d(a)
            }
        })
    };
    var m = function(d) {
        var d = d == null ? [] : Array.isArray(d) ? d : [d],
            c = function(a) {
                for (var a = a.resource, h = Infinity, g = 0; g < a.tags.length; g++) {
                    for (var f = 0; f < Math.min(d.length, h); f++) {
                        if (a.tags[g] == d[f] && f < h && (h = f, h === 0)) {
                            break
                        }
                        if (h === 0) {
                            break
                        }
                    }
                }
                return h
            };
        return function(b, h) {
            var g = c(b),
                f = c(h);
            return g < f ? -1 : g > f ? 1 : b.priority < h.priority ? -1 : b.priority > h.priority ? 1 : 0
        }
    };
    this.start = function(b) {
        o = +new Date;
        b = m(b);
        r.sort(b);
        for (var b = 0, f = r.length; b < f; b++) {
            var e = r[b];
            e.status = 1;
            e.resource.start(this)
        }
        setTimeout(l, 100)
    };
    var l = function() {
        for (var t = false, g = +new Date - p, d = g >= s.noProgressTimeout, g = g >= s.loggingDelay, b = 0, a = r.length; b < a; b++) {
            var i = r[b];
            if (i.status === 1 && (i.resource.checkStatus && i.resource.checkStatus(), i.status === 1)) {
                if (d) {
                    i.resource.onTimeout()
                } else {
                    t = true
                }
            }
        }
        g && t && j();
        t && setTimeout(l, s.statusInterval)
    };
    this.isBusy = function() {
        for (var b = 0, d = r.length; b < d; b++) {
            if (r[b].status === 0 || r[b].status === 1) {
                return true
            }
        }
        return false
    };
    var k = function(B, A) {
        for (var z = null, y = 0, x = r.length; y < x; y++) {
            if (r[y].resource === B) {
                z = r[y];
                break
            }
        }
        if (!(z == null || z.status !== 1)) {
            z.status = A;
            p = +new Date;
            y = 0;
            for (x = q.length; y < x; y++) {
                var v = q[y];
                if (v.tags.length === 0 || B.tags.contains(v.tags)) {
                    for (var c = z, d = 0, t = 0, E = 0, D = r.length; E < D; E++) {
                        var b = r[E],
                            C = false;
                        if (C = v.tags.length === 0 ? true : b.resource.tags.contains(v.tags)) {
                            t++, (b.status === 2 || b.status === 3 || b.status === 4) && d++
                        }
                    }
                    v.callback({
                        resource: c.resource,
                        loaded: c.status === 2,
                        error: c.status === 3,
                        timeout: c.status === 4,
                        completedCount: d,
                        totalCount: t
                    })
                }
            }
        }
    };
    this.onLoad = function(b) {
        k(b, 2)
    };
    this.onError = function(b) {
        k(b, 3)
    };
    this.onTimeout = function(b) {
        k(b, 4)
    };
    var j = this.log = function(b) {
        if (window.console) {
            var t = Math.round((+new Date - o) / 1000);
            window.console.log("PxLoader elapsed: " + t + " sec");
            for (var t = 0, i = r.length; t < i; t++) {
                var h = r[t];
                if (b || h.status === 1) {
                    var e = "PxLoader: #" + t + " " + h.resource.getName();
                    switch (h.status) {
                        case 0:
                            e += " (Not Started)";
                            break;
                        case 1:
                            e += " (Waiting)";
                            break;
                        case 2:
                            e += " (Loaded)";
                            break;
                        case 3:
                            e += " (Error)";
                            break;
                        case 4:
                            e += " (Timeout)"
                    }
                    h.resource.tags.length > 0 && (e += " Tags: [" + h.resource.tags.array.join(",") + "]");
                    window.console.log(e)
                }
            }
        }
    }
}

function PxLoaderTags(d) {
    this.array = [];
    this.object = {};
    this.value = null;
    this.length = 0;
    if (d !== null && d !== void 0) {
        if (Array.isArray(d)) {
            this.array = d
        } else {
            if (typeof d === "object") {
                for (var c in d) {
                    this.array.push(c)
                }
            } else {
                this.array.push(d), this.value = d
            }
        }
        this.length = this.array.length;
        for (d = 0; d < this.length; d++) {
            this.object[this.array[d]] = true
        }
    }
    this.contains = function(f) {
        if (this.length === 0 || f.length === 0) {
            return false
        } else {
            if (this.length === 1 && this.value !== null) {
                return f.length === 1 ? this.value === f.value : f.object.hasOwnProperty(this.value)
            } else {
                if (f.length < this.length) {
                    return f.contains(this)
                } else {
                    for (var e in this.object) {
                        if (f.object[e]) {
                            return true
                        }
                    }
                    return false
                }
            }
        }
    }
}
if (!Array.isArray) {
    Array.isArray = function(b) {
        return Object.prototype.toString.call(b) == "[object Array]"
    }
}

function PxLoaderImage(s, r, q) {
    var o = this,
        p = null;
    this.img = new Image;
    this.tags = r;
    this.priority = q;
    var m = function() {
            o.img.readyState == "complete" && (j(), p.onLoad(o))
        },
        l = function() {
            j();
            p.onLoad(o)
        },
        k = function() {
            j();
            p.onError(o)
        },
        j = function() {
            o.unbind("load", l);
            o.unbind("readystatechange", m);
            o.unbind("error", k)
        };
    this.start = function(a) {
        p = a;
        o.bind("load", l);
        o.bind("readystatechange", m);
        o.bind("error", k);
        o.img.src = s
    };
    this.checkStatus = function() {
        o.img.complete && (j(), p.onLoad(o))
    };
    this.onTimeout = function() {
        j();
        if (o.img.complete) {
            p.onLoad(o)
        } else {
            p.onTimeout(o)
        }
    };
    this.getName = function() {
        return s
    };
    this.bind = function(d, c) {
        o.img.addEventListener ? o.img.addEventListener(d, c, false) : o.img.attachEvent && o.img.attachEvent("on" + d, c)
    };
    this.unbind = function(d, c) {
        o.img.removeEventListener ? o.img.removeEventListener(d, c, false) : o.img.detachEvent && o.img.detachEvent("on" + d, c)
    }
}
PxLoader.prototype.addImage = function(e, d, f) {
    e = new PxLoaderImage(e, d, f);
    this.add(e);
    return e.img
};
var Director = function() {
    window.director = this;
    this.init()
};
Director.prototype.init = function() {
    window.game = this;
    this.menu = this.currentScene = new MainMenu;
    this.nextScene = null;
    this.rectAlpha = 1;
    this.rectColor = "#000000";
    createjs.Tween.get(this).to({
        rectAlpha: 0
    }, 500, createjs.Ease.sineInOut)
};
Director.prototype.update = function() {
    this.currentScene && this.currentScene.update()
};
Director.prototype.draw = function() {
    this.currentScene && this.currentScene.draw();
    if (this.nextScene) {
        this.currentScene = this.nextScene, this.nextScene = null, MLE.cameraX = MLE.cameraY = 0
    }
    if (this.rectAlpha > 0) {
        MLE.context.fillStyle = this.rectColor, MLE.context.globalAlpha = this.rectAlpha, MLE.context.fillRect(0, 0, MLE.width, MLE.height), MLE.context.globalAlpha = 1
    }
};
var PreLoaderScene = function() {
    this.init()
};
PreLoaderScene.prototype.init = function() {
    window.preloaderScene = this;
    this.logo = new MLE.Sprite("preload", 0, getConst(-100));
    this.logo.centerPivot();
    this.loadingBar1 = new MLE.Sprite("loadingBar1", 0, getConst(150));
    this.loadingBar1.centerPivot();
    this.loadingBar0 = new MLE.Sprite("loadingBar0", 0, getConst(150));
    this.loadingBar0.centerPivot();
    this.group = new MLE.Group;
    this.rimX = getConst(250);
    this.rimY = getConst(-105);
    this.rimR = getConst(17);
    this.loadingText = new MLE.Sprite("loadingTextAnim", 0, getConst(230));
    this.loadingText.centerPivot();
    this.loadingText.y = this.loadingText.y - 70;
    this.loadingTextFA = new MLE.FrameAnim(this.loadingText, 1, 4);
    this.loadingTextFA.addAnim("loading", [0, 1, 2, 3], 4);
    this.loadingTextFA.gotoAndPlay(0, "loading");
    this.group.addChild(this.logo);
    this.group.addChild(this.loadingText);
    this.group.x = MLE.width / 2;
    this.group.y = MLE.height / 2 + 100;
    this.fullBarsWidth = this.loadingBar0.rect.w;
    this.loaded = false;
    this.text = new MLE.TextSprite, this.text.text = "0%", this.text.x = 0, this.text.y = -140, this.text.baseline = "middle", this.text.adjustFontSize(250), this.group.addChild(this.text)
};
PreLoaderScene.prototype.update = function() {
    this.loadingTextFA.update();
    this.percent = MLE.loader.loadedResources / MLE.loader.allResources * 100;
    this.loadingBar0.rect.w = this.percent * this.fullBarsWidth / 100;
    this.text.text = Math.floor(this.percent) + "%";
    if (this.loadingBar0.rect.w === 0) {
        this.loadingBar0.rect.w = 1
    }
    if (this.percent === 100 && this.loaded === false && xiaomiisready === true) {
        this.loaded = true, createjs.Tween.get(this).call(function() {
            MLE.start()
        })
    }
};
PreLoaderScene.prototype.draw = function() {
    MLE.context.fillStyle = "#ffffff";
    MLE.context.fillRect(0, 0, MLE.width, MLE.height);
    this.group.draw()
};
var MenuButton = function(e, d, f) {
    this.init(e, d, f)
};
MenuButton.prototype.init = function(f, d, h) {
    this.group = new MLE.Group;
    f = f || "pause";
    this.buttonDown = this.buttonUp = null;
    this.touchEventTarget = new MLE.TouchEventTarget(this.group);
    this.touchEventTarget.onDown = this.onDown.bindd(this);
    this.touchEventTarget.onUp = this.onUp.bindd(this);
    this.touchEventTarget.onOut = this.onOut.bindd(this);
    this.buttonUp = new MLE.Sprite(f + "_normal", 0, 0);
    this.buttonDown = new MLE.Sprite(f + "_select", 0, 0);
    var f = this.buttonUp.rect.w,
        g = this.buttonUp.rect.h;
    this.touchEventTarget.setArea(-f / 2, -g / 2, f, g);
    this.buttonUp.centerPivot();
    this.buttonDown.centerPivot();
    this.buttonDown.alpha = 0;
    this.group.addChild(this.buttonUp);
    this.group.addChild(this.buttonDown);
    if (d) {
        this.text = new MLE.TextSprite, this.text.text = d, this.text.x = 0, this.text.y = 0, this.text.align = "center", this.text.baseline = "middle", this.text.adjustFontSize(250), this.group.addChild(this.text)
    }
    if (h) {
        this.comment = new MLE.TextSprite, this.comment.text = h, this.comment.x = 0, this.comment.y = 30, this.comment.size = 18, this.comment.align = "center", this.comment.baseline = "middle", this.comment.adjustFontSize(280), this.group.addChild(this.comment)
    }
    this.block = this.canBePressed = false
};
MenuButton.prototype.update = function() {
    this.block || this.touchEventTarget.update()
};
MenuButton.prototype.draw = function() {
    this.group.draw()
};
MenuButton.prototype.onUp = function() {
    if (this.canBePressed) {
        this.clickCallback(), this.canBePressed = false, this.buttonUp.alpha = 1, this.buttonDown.alpha = 0
    }
};
MenuButton.prototype.onDown = function() {
    this.canBePressed = true;
    this.buttonUp.alpha = 0;
    this.buttonDown.alpha = 1
};
MenuButton.prototype.onOut = function() {
    this.canBePressed = false;
    this.buttonUp.alpha = 1;
    this.buttonDown.alpha = 0
};
MenuButton.prototype.clickCallback = function() {
    console.log("ButtonClickCallback")
};
MenuButton.prototype.isDown = function() {
    return this.buttonUp.alpha === 1 ? false : true
};
var MainMenu = function() {
    window.mainMenu = this;
    this.init()
};
MainMenu.prototype.init = function() {
    this.bg = new MLE.Sprite("splash", 0, 0);
    this.playButton = new MenuButton("gift", currLang.startGame);
    this.playButton.group.x = MLE.width / 2;
    this.playButton.group.y = MLE.height / 2 + 270;
    this.playButton.clickCallback = this.startGameClicked.bindd(this);
    var d = 0;
    localStorage.WinterFantasyTossPaper2BestScore && (d = Number(localStorage.WinterFantasyTossPaper2BestScore));
    this.title = new MLE.TextSprite;
    this.title.text = "";
    this.title.x = MLE.width / 2;
    this.title.y = MLE.height / 2 - 150;
    this.title.align = "center";
    this.title.baseline = "middle";
    this.title.adjustFontSize(300);
    this.best = new MLE.TextSprite;
    this.best.text = currLang.best + ": " + d;
    this.best.x = MLE.width / 2;
    this.best.y = MLE.height / 2 - 75;
    this.best.align = "center";
    this.best.baseline = "middle";
    this.best.adjustFontSize(250);
    this.lvl = new MLE.TextSprite;
    this.lvl.text = currLang.selectLevel + ":";
    this.lvl.x = MLE.width / 2;
    this.lvl.y = MLE.height / 2 - 15;
    this.lvl.align = "center";
    this.lvl.baseline = "middle";
    this.lvl.adjustFontSize(250);
    this.lvl.alpha = 0;
    var c = MLE.height / 2 + 70;
    this.active = false;
    createjs.Tween.get(this).wait(750).call(function() {
        this.active = true
    }.bindd(this));
    this.playButton.clickCallback()
};
MainMenu.prototype.update = function() {
    this.active && (this.playButton.update())
};
MainMenu.prototype.draw = function() {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw()
};
MainMenu.prototype.startGameClicked = function() {
    SG_Hooks.start();
    this.playButton.block = true;
    createjs.Tween.get(window.director).to({
        rectAlpha: 1
    }, 250, createjs.Ease.sineInOut).call(function() {
        createjs.Tween._tweens = [];
        window.director.nextScene = new GameScene;
        createjs.Tween.get(window.director).to({
            rectAlpha: 0
        }, 500, createjs.Ease.sineInOut).call(function() {
            window.director.currentScene.startGame()
        })
    })
};
var ActiveRuleWindow = function() {
    this.init()
};
ActiveRuleWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("activeRule", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.closeWindowButton = new MenuButton("close", "");
    this.closeWindowButton.group.x = 570;
    this.closeWindowButton.group.y = 140;
    this.closeWindowButton.group.alpha = 0;
    this.closeWindowButton.clickCallback = this.closeClicked.bindd(this)
};
ActiveRuleWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.closeWindowButton.update())
};
ActiveRuleWindow.prototype.draw = function() {
    this.sprite.draw();
    this.closeWindowButton.draw()
};
ActiveRuleWindow.prototype.show = function() {
    gameScene.activeRuleShowing = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).wait(100).to({
        alpha: 1
    }, 350)
};
ActiveRuleWindow.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).to({
        alpha: 0
    }, 350)
};
ActiveRuleWindow.prototype.closeClicked = function() {
    this.hide();
    gameScene.resume();
    gameScene.activeRuleShowing = false
};
var PlayRuleWindow = function() {
    this.init()
};
PlayRuleWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("playRule", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.closeWindowButton = new MenuButton("close", "");
    this.closeWindowButton.group.x = 545;
    this.closeWindowButton.group.y = 150;
    this.closeWindowButton.group.alpha = 0;
    this.closeWindowButton.clickCallback = this.closeClicked.bindd(this)
};
PlayRuleWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.closeWindowButton.update())
};
PlayRuleWindow.prototype.draw = function() {
    this.sprite.draw();
    this.closeWindowButton.draw()
};
PlayRuleWindow.prototype.show = function() {
    gameScene.playRuleShowing = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).wait(100).to({
        alpha: 1
    }, 350)
};
PlayRuleWindow.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).to({
        alpha: 0
    }, 350)
};
PlayRuleWindow.prototype.closeClicked = function() {
    this.hide();
    gameScene.resume();
    gameScene.playRuleShowing = false
};
var GameScene = function() {
    window.gameScene = this;
    this.states = {
        IDLE: 0,
        AIMING: 1,
        BEFORE_WIND: 2,
        IN_AIR_UP: 3,
        IN_AIR: 4,
        FROM_WALL: 5,
        FROM_GROUND: 6
    };
    this.currentState = this.states.IDLE;
    this.ground = -1;
    this.maxHeight = getConst(50);
    var b = Math.floor(Math.random() * 59) / 10;
    this.windPower = getConst(1000) * b / 6;
    this.minScale = 0.35;
    this.init();
    this.gui.bestNumber < 2000 && (b = Math.floor(Math.random() * 8) / 10 + 0.1);
    this.windCloud.windFont.text = b + "";
    this.windCloud.windNumber = b;
    this.windPower = getConst(1000) * b / 6;
    this.activeRuleButton = new MenuButton("active_rule", currLang.startGame);
    this.activeRuleButton.group.x = MLE.width / 2 - 180;
    this.activeRuleButton.group.y = MLE.height / 2 - 430;
    this.activeRuleButton.clickCallback = this.activeRuleClicked.bindd(this);
    this.playRuleButton = new MenuButton("play_rule", currLang.startGame);
    this.playRuleButton.group.x = MLE.width / 2 + 180;
    this.playRuleButton.group.y = MLE.height / 2 - 430;
    this.playRuleButton.clickCallback = this.playRuleClicked.bindd(this);
    this.activeRuleWindow = new ActiveRuleWindow();
    this.playRuleWindow = new PlayRuleWindow()
};
GameScene.prototype.init = function() {
    this.bg = new MLE.Sprite("gameBackground", 0, 0);
    this.windCloud = new WindCloud;
    this.windCloud.group.x = 0;
    this.windCloud.group.y = getConst(650);
    this.aimArrow = new AimArrow;
    this.aimArrow.sprite.alpha = 0;
    this.ball = new Ball;
    this.pauseButton = new MenuButton("gift");
    this.pauseButton.group.x = MLE.width - 50;
    this.pauseButton.group.y = MLE.height - 50;
    this.pauseButton.clickCallback = this.pauseClicked.bindd(this);
    this.monsterFront = new MLE.Sprite("goalFront", 0, 0);
    this.monsterFront.centerPivot();
    this.monster = new Monster;
    this.monster.setPositionXY(MLE.width / 2, MLE.height / 2 + getConst(315));
    this.shadow = new MLE.Sprite("shadow", this.ball.startPosX, this.ball.startPosY + getConst(30));
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.gui = new GUI(1);
    this.hideShowFrontMonsters(false);
    this.gui.alpha = 1;
    this.aimArrow.rotationTween.setPosition(1350);
    this.monster.setScaleX(1.5);
    this.isEasyLevel = false;
    this.easyLevelCounter = this.easyLevel = 0;
    if (this.gui.bestNumber < 2000) {
        this.isEasyLevel = true
    }
    this.createNewBall();
    this.paused = false;
    this.activeRuleShowing = false;
    this.palyRuleShowing = false;
    this.shouldShowActiveRule = false;
    this.shouldShowPlayRule = false;
    this.shouldShowGiftBoxWindow = false;
    this.giftBoxShowing = false;
    this.giftBoxWindow = new GiftBoxWindow();
    this.giftCount = 0;
    this.firstShowGift = true
};
GameScene.prototype.update = function() {
    this.activeRuleButton.update();
    this.playRuleButton.update();
    this.activeRuleWindow.update();
    this.playRuleWindow.update();
    this.giftBoxWindow.update();
    if (this.firstShowGift && this.giftCount > 0 && !this.giftBoxShowing) {
        this.giftBoxWindow.show();
        this.firstShowGift = false;
        setTimeout(function() {
            gameScene.giftBoxWindow.light.show()
        }, 550)
    }
    if (this.shouldShowGiftBoxWindow && !this.giftBoxShowing) {
        this.giftBoxWindow.show("withButton")
    }
    if (this.shouldShowActiveRule && !this.activeRuleShowing) {
        this.paused = true;
        this.aimArrow.setPaused(true);
        this.windCloud.setPaused(true);
        this.activeRuleWindow.show();
        this.shouldShowActiveRule = false
    }
    if (this.shouldShowPlayRule && !this.palyRuleShowing) {
        this.paused = true;
        this.aimArrow.setPaused(true);
        this.windCloud.setPaused(true);
        this.playRuleWindow.show();
        this.shouldShowPlayRule = false
    }
    if (!this.paused) {
        this.windCloud.update();
        this.monster.update();
        this.gui.update();
        this.ball.update();
        var f = (xiaomishoot) && this.ball.sprite.x === this.ball.startPosX && this.ball.sprite.y === this.ball.startPosY && this.aimArrow.sprite.alpha >= 0.75;
        this.shadow.x = this.ball.sprite.x;
        this.aimArrow.update();
        if (f && this.currentState === this.states.IDLE) {
			xiaomishoot=false;
            this.currentState = this.states.AIMING;
        } else {
            if (f && this.currentState === this.states.AIMING) {
				xiaomishoot=false;
                this.ball.makeShoot(this.aimArrow.shotDirectionX, this.aimArrow.shotDirectionY, this.aimArrow.shootAngle), this.makeShadowTween(), this.ball.rotateFast(), this.currentState = this.states.BEFORE_WIND, this.aimArrow.stopRotationTween()
            } else {
                if (this.currentState === this.states.IN_AIR_UP && this.ball.simpleMovement.velY > 0) {
                    this.currentState = this.states.IN_AIR, this.hideShowFrontMonsters(true)
                } else {
                    if (this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL || this.currentState === this.states.FROM_GROUND) {
                        for (var f = this.monster.circleCollisions, d = this.ball.circleCollision, h = true, g = 0; g < f.length && h; g++) {
                            if (f[g].checkAgainstWithPosCorrection(d, this.ball.befX, this.ball.befY) !== null && this.currentState !== this.states.FROM_WALL) {
                                h = false, g < 2 && this.ball.sprite.y < f[g].y + f[g].sprite.y - getConst(12) ? (this.ball.simpleMovement.velX = g === 1 ? getConst(50) : getConst(-50), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.velY = getConst(-300), this.ball.simpleMovement.accelY = getConst(800)) : (this.ball.simpleMovement.velX = this.ball.sprite.x > f[g].x + f[g].sprite.x ? getConst(130) : getConst(-130), this.ball.simpleMovement.accelX = 0), this.currentState = this.states.FROM_WALL, this.ball.rotateSlow()
                            }
                        }
                        if (this.monster.pointDetector.checkAgainstWithShift(this.ball.circleCollision, this.ball.befX, this.ball.befY) !== null) {
                            this.ball.simpleMovement.velX = 0;
                            this.ball.simpleMovement.accelX = 0;
                            this.ball.simpleMovement.velY = 0;
                            this.ball.simpleMovement.accelY = 0;
                            this.currentState = this.states.IDLE;
                            this.sensorTouched();
                            return
                        }
                        if (this.ball.sprite.x > MLE.width + getConst(80) || this.ball.sprite.y < getConst(-80)) {
                            this.noSuccessDetected();
                            this.currentState = this.states.IDLE;
                            return
                        }
                    }
                }
            }
        }
        if ((this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL) && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) {
            this.ball.sprite.x > 800 || this.ball.sprite.y < getConst(-160) ? (this.noSuccessDetected(), this.currentState = this.states.IDLE) : (this.ball.rotateSlow(), this.currentState === this.states.FROM_WALL ? (this.ball.simpleMovement.velX *= getConst(200) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-200)) : (this.ball.simpleMovement.velX *= getConst(400) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-300)), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.accelY = getConst(800), this.currentState = this.states.FROM_GROUND, this.hideShowFrontMonsters(false), this.ball.sprite.y = this.ground)
        } else {
            if (this.currentState == this.states.FROM_GROUND && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) {
                this.ball.rotateStop(), this.ball.simpleMovement.setValues(0, 0, 0, 0), this.currentState = this.states.IDLE, this.noSuccessDetected(true), this.ball.sprite.y = this.ground
            }
        }
    }
};
GameScene.prototype.draw = function() {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw();
    this.monster.draw();
    this.aimArrow.draw();
    this.shadow.draw();
    this.ball.draw();
    this.monsterFront.x = this.monster.group.x;
    this.monsterFront.y = this.monster.group.y - this.monster.group.pivotY;
    this.monsterFront.draw();
    this.gui.draw();
    this.windCloud.draw();
    this.activeRuleButton.draw();
    this.playRuleButton.draw();
    this.activeRuleWindow.draw();
    this.playRuleWindow.draw();
    this.giftBoxWindow.draw()
};
GameScene.prototype.startGame = function() {};
GameScene.prototype.makeShadowTween = function() {
    var d = this.ball.startPosY + getConst(35),
        c = this.ground + getConst(15);
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.y = d;
    createjs.Tween.get(this.shadow).to({
        y: c,
        alpha: 0.7,
        scaleX: 0.3,
        scaleY: 0.3
    }, 2000, createjs.Ease.quadOut)
};
GameScene.prototype.hideShowFrontMonsters = function(b) {
    this.monsterFront.alpha = b ? 1 : 0
};
GameScene.prototype.noSuccessDetected = function() {
    this.monster.makeHungryAnimation();
    this.hideShowFrontMonsters(false);
    this.gui.zeroPoints();
    createjs.Tween.get(this.ball.sprite).to({
        alpha: 0
    }, 150).call(this.createNewBall, null, this);
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 120);
    this.aimArrow.sprite.alpha > 0 && createjs.Tween.get(this.aimArrow.sprite).to({
        alpha: 0
    }, 120);
    this.generateNewWind()
};
GameScene.prototype.createNewBall = function() {
    this.ball.simpleMovement.setValues(0, 0, 0, 0);
    this.ball.rotateStop();
    this.ball.sprite.x = this.ball.startPosX;
    this.ball.sprite.y = this.ball.startPosY + getConst(140);
    this.ball.sprite.scaleX = this.ball.sprite.scaleY = 1;
    this.ball.sprite.alpha = 0.5;
    createjs.Tween.get(this.ball.sprite).wait(250).to({
        y: this.ball.startPosY,
        alpha: 1
    }, 350, createjs.Ease.sineOut);
    this.aimArrow.resumeRotationTween();
    this.shadow.x = this.ball.startPosX;
    this.shadow.y = this.ball.startPosY + getConst(170);
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.alpha = 0.5;
    createjs.Tween.get(this.shadow).wait(250).to({
        y: this.ball.startPosY + getConst(30),
        alpha: 1
    }, 350, createjs.Ease.sineOut)
};
GameScene.prototype.sensorTouched = function() {
    if (this.isEasyLevel && (this.easyLevelCounter += 1, this.easyLevelCounter >= 3 && (this.easyLevel += 1, this.easyLevelCounter = 0, this.easyLevel === 6))) {
        this.isEasyLevel = false
    }
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 150);
    this.ball.sprite.alpha = 0;
    this.hideShowFrontMonsters(false);
    this.gui.hitTime++;
    if (this.gui.hitTime == 2) {
        this.gui.hitTime = 0;
        this.gui.getGiftTime++;
        this.giftCount++;
        gameScene.gui.giftBoxs.text.text = "x " + gameScene.giftCount;
        if (!gameScene.firstShowGift) {
            gameScene.gui.light.show()
        }
        setTimeout(function() {
            gameScene.gui.light.hide()
        }, 1500)
    }
    this.gui.addPoints(1);
    this.generateNewWind();
    this.createNewBall()
};
GameScene.prototype.generateNewWind = function() {
    var d = Math.random() + Math.random(),
        c = getConst(1000),
        d = d * c - c;
    this.windCloud.changeWind(MLE.Util.mapValue(d, -getConst(1000), getConst(1000), -10, 10));
    this.windPower = d * MLE.Util.mapValue(Math.abs(d), 0, c, 0.9, 0.7)
};
GameScene.prototype.pauseClicked = function() {
    this.paused = true;
    this.aimArrow.setPaused(true);
    this.windCloud.setPaused(true);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 0
    }, 350)
};
GameScene.prototype.resume = function() {
    this.aimArrow.setPaused(false);
    this.windCloud.setPaused(false);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 1
    }, 350).wait(500).call(function() {
        this.paused = false
    }.bind(this))
};
GameScene.prototype.activeRuleClicked = function() {
    this.shouldShowActiveRule = true
};
GameScene.prototype.playRuleClicked = function() {
    this.shouldShowPlayRule = true
};
var WindCloud = function() {
    this.init()
};
WindCloud.prototype.init = function() {
    this.group = new MLE.Group;
    this.windCloud = new MLE.Sprite("wind", 45, -130);
    this.windCloud.centerPivot();
    this.sprite = new MLE.Sprite("fanleft1", 0, -80);
    this.imageAnim = new MLE.ImageAnim(this.sprite);
    this.imageAnim.addAnim("fan", "fanleft1,fanleft2".split(","), 20);
    this.imageAnim.gotoAndPlay(0, "fan");
    this.group.addChild(this.windCloud);
    this.group.addChild(this.sprite);
    this.windFont = new MLE.TextSprite;
    this.windFont.text = "2.5";
    this.windFont.size = 27;
    this.windFont.x += getConst(35);
    this.numberPin = new MLE.Pin(this.windFont, this.group, getConst(45), -100);
    this.windNumber = 2.5;
    this.tween = {}
};
WindCloud.prototype.update = function() {
    this.windNumber = Math.round(this.windNumber * 10) / 10;
    this.windFont.text = "" + this.windNumber;
    this.windNumber % 1 === 0 && (this.windFont.text += ".0");
    this.numberPin.update();
    this.imageAnim.update()
};
WindCloud.prototype.draw = function() {
    this.group.draw();
    this.windFont.draw()
};
WindCloud.prototype.changeWind = function(e) {
    e = Math.round(e * 10) / 10;
    e === 0 && (e = 0.1);
    if (this.group.scaleX / e > 0) {
        this.tween = createjs.Tween.get(this).to({
            windNumber: Math.abs(e)
        }, 750, createjs.Ease.sineInOut)
    } else {
        var d = this.group.scaleX,
            f;
        f = d === 1 ? [getConst(-100), MLE.width + getConst(100), MLE.width] : [MLE.width + getConst(100), getConst(-100), 0];
        this.tween = createjs.Tween.get(this.group).to({
            x: f[0]
        }, 400).to({
            x: f[1],
            scaleX: d * -1
        }).call(function() {
            this.windNumber = Math.abs(e);
            this.numberPin.offsetX = getConst(35) * d * -1
        }.bindd(this)).to({
            x: f[2]
        }, 400, createjs.Ease.sineInOut)
    }
};
WindCloud.prototype.setPaused = function(b) {
    this.tween._paused = b
};
var Monster = function() {
    this.init()
};
Monster.prototype.init = function() {
    this.group = new MLE.Group;
    this.shadow = new MLE.Sprite("shadow", -1, -1);
    this.shadow.centerPivot();
    this.shadow.alpha = 0;
    this.body = new MLE.Sprite("goal", 0, 0);
    this.body.centerPivot();
    this.group.addChild(this.body);
    this.group.pivotY = getConst(224);
    this.baseY = this.baseX = 0;
    this.circleCollisions = [];
    for (var e = [{
            x: 40,
            y: -165,
            r: 4
        }, {
            x: -40,
            y: -165,
            r: 4
        }, {
            x: 36,
            y: -150,
            r: 4
        }, {
            x: -36,
            y: -150,
            r: 4
        }, {
            x: 33,
            y: -135,
            r: 4
        }, {
            x: -33,
            y: -135,
            r: 4
        }, {
            x: 29,
            y: -120,
            r: 4
        }, {
            x: -29,
            y: -120,
            r: 4
        }, {
            x: 27,
            y: -105,
            r: 4
        }, {
            x: -27,
            y: -105,
            r: 4
        }, {
            x: 25,
            y: -90,
            r: 4
        }, {
            x: -25,
            y: -90,
            r: 4
        }, {
            x: 23,
            y: -75,
            r: 4
        }, {
            x: -23,
            y: -75,
            r: 4
        }], d = 0; d < e.length; d++) {
        var f = e[d],
            f = new MLE.CircleCollision(this.shadow, getConst(f.x), getConst(f.y), getConst(f.r));
        this.circleCollisions.push(f);
        f.realX = f.x
    }
    this.pointDetector = new MLE.CircleCollision(this.shadow, 0, getConst(-94), getConst(30))
};
Monster.prototype.update = function() {};
Monster.prototype.draw = function() {
    this.shadow.draw();
    this.group.draw();
    for (var b = 0; b < this.circleCollisions.length; b++) {
        this.circleCollisions[b].drawDebug()
    }
    this.pointDetector.drawDebug()
};
Monster.prototype.setPositionXY = function(d, c) {
    this.baseX = d;
    this.baseY = c;
    this.shadow.x = d;
    this.shadow.y = c - getConst(98);
    window.gameScene.ground = this.shadow.y - getConst(95);
    this.group.x = d;
    this.group.y = c
};
Monster.prototype.setScaleX = function(d) {
    this.group.scaleX = d;
    this.shadow.scaleX = this.shadow.scaleY = d;
    window.gameScene.monsterFront.scaleX = d;
    for (var c = 0; c < this.circleCollisions.length; c++) {
        this.circleCollisions[c].x = this.circleCollisions[c].realX * d
    }
};
Monster.prototype.makeHappyJump = function() {};
Monster.prototype.makeHungryAnimation = function() {};
var Ball = function() {
    this.init()
};
Ball.prototype.init = function() {
    this.startPosX = MLE.width / 2;
    this.startPosY = MLE.height - getConst(50);
    this.minScale = 0.48;
    this.sprite = new MLE.Sprite("paper", this.startPosX, this.startPosY);
    this.sprite.centerPivot();
    this.simpleMovement = new MLE.SimpleMovement(this.sprite);
    this.circleCollision = new MLE.CircleCollision(this.sprite, 0, 0, getConst(30));
    this.rotationSpeed = 0
};
Ball.prototype.update = function() {
    this.befX = this.sprite.x;
    this.befY = this.sprite.y;
    this.simpleMovement.update();
    this.sprite.angle += this.rotationSpeed * MLE.tick / 1000;
    if (window.gameScene.currentState > window.gameScene.states.AIMING && window.gameScene.currentState < window.gameScene.states.FROM_WALL) {
        var b = this.sprite.y - this.simpleMovement.velY * this.simpleMovement.velY / this.simpleMovement.accelY / 2;
        if (window.gameScene.currentState === window.gameScene.states.IN_AIR_UP || window.gameScene.currentState === window.gameScene.states.BEFORE_WIND) {
            b = (this.sprite.y - b) / (this.startPosY - b), this.sprite.scaleX = this.sprite.scaleY = b.map(0, 1, 1 - (1 - this.minScale) / 1.3, 1)
        } else {
            if (window.gameScene.currentState === window.gameScene.states.IN_AIR) {
                b = (this.sprite.y - b) / (window.gameScene.ground - getConst(0) - b), this.sprite.scaleX = this.sprite.scaleY = b.map(0, 1, 1 - (1 - this.minScale) / 1.3, this.minScale)
            }
        }
        if (this.sprite.scaleX < this.minScale) {
            this.sprite.scaleX = this.sprite.scaleY = this.minScale
        }
        this.circleCollision.r = getConst(30) * this.sprite.scaleX
    }
};
Ball.prototype.draw = function() {
    this.sprite.draw();
    this.circleCollision.drawDebug()
};
Ball.prototype.makeShoot = function(e, d, f) {
    createjs.Tween.get(this.sprite).to({
        x: this.sprite.x + 2 * e,
        y: this.sprite.y + 2 * d
    }, 200).call(function() {
        f = MLE.Util.toDeg(f);
        var b = getConst(-800),
            c = window.gameScene.windPower * 0.9,
            a = getConst(1100);
        this.simpleMovement.setValues(b / d * e, b, c, a);
        window.gameScene.currentState = window.gameScene.states.IN_AIR_UP
    }.bindd(this))
};
Ball.prototype.rotateStop = function() {
    this.rotationSpeed = 0
};
Ball.prototype.rotateSlow = function() {
    this.rotationSpeed = 500
};
Ball.prototype.rotateFast = function() {
    this.rotationSpeed = 1500
};
var AimArrow = function() {
    this.init()
};
AimArrow.prototype.init = function() {
    this.maxAngle = 50;
    this.angleChangeDirection = 1;
    this.angleChangeSpeed = 80;
    this.sprite = new MLE.Sprite("aimArrow", MLE.width / 2, MLE.height - getConst(50));
    this.sprite.setPivotPercent(0.5, 1.1);
    this.shootAngle = this.shotDirectionY = this.shotDirectionX = -1;
    this.makeRotationTween()
};
AimArrow.prototype.update = function() {
    var d = this.sprite.pivotY * this.sprite.scaleY,
        c = this.sprite.x + Math.sin(MLE.Util.toRad(this.sprite.angle)) * d,
        d = this.sprite.y - Math.cos(MLE.Util.toRad(this.sprite.angle)) * d;
    this.shotDirectionX = c - this.sprite.x;
    this.shotDirectionY = d - this.sprite.y;
    this.shootAngle = this.sprite.angle
};
AimArrow.prototype.draw = function() {
    this.sprite.draw()
};
AimArrow.prototype.makeRotationTween = function() {
    createjs.Tween.removeTweens(this.sprite);
    this.sprite.scaleY = 0.95;
    this.rotationTween = createjs.Tween.get(this.sprite, {
        loop: true
    }).to({
        angle: 38
    }, 500).to({
        angle: -38
    }, 1000).to({
        angle: 0
    }, 500)
};
AimArrow.prototype.stopRotationTween = function() {
    this.rotationTween._paused = true;
    createjs.Tween.get(this.sprite).wait(500).to({
        alpha: 0
    }, 350)
};
AimArrow.prototype.resumeRotationTween = function() {
    this.rotationTween._paused = false;
    createjs.Tween.get(this.sprite).wait(500).to({
        alpha: 1
    }, 350).call(function() {
        window.gameScene.currentState = window.gameScene.states.AIMING
    })
};
AimArrow.prototype.setPaused = function(b) {
    this.rotationTween._paused = b
};
var GUI = function(b) {
    this.init(b)
};
GUI.prototype.init = function(b) {
    this.multiplier = b;
    this.group = new MLE.Group;
    this.box1 = new MLE.Sprite("box", 130, 830);
    this.group.addChild(this.box1);
    this.box1.centerPivot();
    this.box2 = new MLE.Sprite("box", 130, 890);
    this.group.addChild(this.box2);
    this.box2.centerPivot();
    this.points = new MLE.TextSprite;
    this.points.x = getConst(180);
    this.points.y = getConst(909);
    this.points.text = "0";
    this.ptsText = new MLE.TextSprite;
    this.ptsText.text = "最大连中:";
    this.ptsText.size = 23;
    this.ptsText.color = "#000000";
    this.ptsText.border = "#e6e6e6";
    this.ptsText.x = getConst(100);
    this.ptsText.align = "left";
    this.ptsText.y = getConst(183);
    this.ptsText.adjustFontSize(500);
    this.group.addChild(this.ptsText);
    this.currentPoint = new MLE.TextSprite;
    this.currentPoint.x = getConst(220);
    this.currentPoint.y = getConst(226);
    this.currentPoint.text = "999";
    this.currentPoint.size = 30;
    this.currentPoint.color = "#000000";
    this.currentPoint.border = "#d7d7d7";
    this.cptsText = new MLE.TextSprite;
    this.cptsText.text = "当前连中:";
    this.cptsText.size = 23;
    this.cptsText.color = "#000000";
    this.cptsText.border = "#d7d7d7";
    this.cptsText.x = getConst(100);
    this.cptsText.align = "left";
    this.cptsText.y = getConst(228);
    this.cptsText.adjustFontSize(500);
    this.group.addChild(this.cptsText);
    this.bstText = new MLE.TextSprite;
    this.bstText.text = "";
    this.bstText.size = 25;
    this.bstText.x = getConst(52);
    this.bstText.align = "left";
    this.bstText.y = getConst(910);
    this.bstText.adjustFontSize(500);
    this.group.addChild(this.bstText);
    this.best = new MLE.TextSprite;
    this.best.x = getConst(220);
    this.best.y = getConst(180);
    this.best.text = "0";
    this.best.size = 30;
    this.best.color = "#000000";
    this.best.border = "#e6e6e6";
    this.group.addChild(this.best);
    this.newPoints = new MLE.TextSprite;
    this.newPoints.x = getConst(52);
    this.newPoints.y = getConst({
        1: 450,
        2: 830,
        3: 830
    }[b + ""]);
    this.newPoints.text = "+5";
    this.group.addChild(this.newPoints);
    this.group.addChild(this.points);
    this.group.addChild(this.currentPoint);
    this.newPoints.xOffset = 0;
    this.pointsNumber = this.newPoints.alpha = 0;
    localStorage.WinterFantasyTossPaper2BestScore ? this.bestNumber = Number(localStorage.WinterFantasyTossPaper2BestScore) : (localStorage.WinterFantasyTossPaper2BestScore = "0", this.bestNumber = 0);
    this.alpha = 1;
    this.inRow = this.levelUp = 0;
    this.giftBoxCount = 0;
    this.giftBoxs = new MenuButton("gift", "x 0");
    this.giftBoxs.group.x = MLE.width / 2 + 270;
    this.giftBoxs.group.y = MLE.height / 2 + 430;
    this.giftBoxs.buttonDown.scaleX = 0.25;
    this.giftBoxs.buttonDown.scaleY = 0.25;
    this.giftBoxs.buttonUp.scaleX = 0.25;
    this.giftBoxs.buttonUp.scaleY = 0.25;
    this.giftBoxs.buttonUp.x = -60;
    this.giftBoxs.buttonDown.x = -60;
    this.giftBoxs.group.alpha = 0;
    this.giftBoxs.clickCallback = this.giftBoxsClicked.bindd(this);
    this.group.addChild(this.giftBoxs);
    this.hitTime = 0;
    this.light = new Light();
    this.light.sprite.x = MLE.width / 2 + 210;
    this.light.sprite.y = MLE.height / 2 + 430;
    this.light.sprite.scaleX = 0.4;
    this.light.sprite.scaleY = 0.4
};
GUI.prototype.update = function() {
    this.giftBoxs.group.alpha == 1 && this.giftBoxs.update()
};
GUI.prototype.draw = function() {
    var b = MLE.context.globalAlpha;
    MLE.context.globalAlpha *= this.alpha;
    this.light.draw();
    this.points.text = "";
    this.best.text = "" + this.bestNumber;
    this.currentPoint.text = "" + Math.round(this.pointsNumber);
    this.newPoints.x = this.newPoints.xStart + this.newPoints.xOffset;
    this.group.draw();
    this.giftBoxs.draw();
    MLE.context.globalAlpha = b
};
GUI.prototype.giftBoxsClicked = function() {
    if (gameScene.giftCount > 0) {
        gameScene.shouldShowGiftBoxWindow = true
    }
};
GUI.prototype.addPoints = function(d) {
    this.newPoints.xOffset = 0;
    this.newPoints.xStart = MLE.width / 2 + 30;
    if (2 - this.hitTime != 0 && this.hitTime != 0) {
        this.newPoints.text = "棒极了！再投中1次就可以获得礼盒了！"
    } else {
        this.newPoints.text = ""
    }
    if (this.multiplier !== 1) {
        this.newPoints.text = "+ " + this.multiplier + " x 再投中" + (3 - this.hitTime) + "就可以抽奖啦！"
    }
    createjs.Tween.get(this.newPoints).to({
        alpha: 1
    }, 150).wait(350).to({
        xOffset: -getConst(30),
        alpha: 0
    }, 500, createjs.Ease.sineInOut);
    d *= this.multiplier;
    for (var c = 0; c < d; c += 1) {
        createjs.Tween.get(this).wait(500 / d * (c + 1) + 350).call(function() {
            this.pointsNumber += 1;
            this.pointsNumber > this.bestNumber && (this.bestNumber += 1)
        }.bindd(this))
    }
    this.pointsNumber + d > this.bestNumber && (localStorage.WinterFantasyTossPaper2BestScore = this.pointsNumber + d + "");
    this.inRow += 1;
    this.currentPoint.text = "" + this.pointsNumber;
    if (this.inRow === 4) {
        this.inRow = 0, SG_Hooks.levelUp(this.multiplier, this.pointsNumber + d)
    }
};
GUI.prototype.zeroPoints = function() {
    this.inRow += 1;
    if (this.inRow === 4) {
        this.inRow = 0, SG_Hooks.gameOver(this.multiplier, this.pointsNumber)
    }
    this.hitTime = 0;
    createjs.Tween.get(this).to({
        pointsNumber: 0
    }, 750, createjs.Ease.sineInOut);
    this.newPoints.text = "好可惜，就差一点点";
    createjs.Tween.get(this.newPoints).to({
        alpha: 1
    }, 150).wait(350).to({
        xOffset: -getConst(30),
        alpha: 0
    }, 500, createjs.Ease.sineInOut)
};
var Light = function() {
    this.init()
};
Light.prototype.init = function() {
    this.sprite = new MLE.Sprite("light", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.makeRotationTween()
};
Light.prototype.update = function() {};
Light.prototype.draw = function() {
    this.sprite.draw()
};
Light.prototype.makeRotationTween = function() {
    createjs.Tween.removeTweens(this.sprite);
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    this.rotationTween = createjs.Tween.get(this.sprite, {
        loop: true
    }).to({
        angle: 1440
    }, 8000)
};
Light.prototype.stopRotationTween = function() {
    this.rotationTween._paused = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 100)
};
Light.prototype.show = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 100)
};
Light.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 100)
};
var GiftBoxWindow = function() {
    this.init()
};
GiftBoxWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("popup", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.light = new Light();
    this.light.sprite.scaleX = 1.3;
    this.light.sprite.scaleY = 1.3;
    this.giftBox = new MenuButton("gift", "");
    this.giftBox.group.x = MLE.width / 2;
    this.giftBox.group.y = 0;
    this.giftBox.group.alpha = 0;
    this.noGift = new MLE.Sprite("nogift", 0, 0);
    this.noGift.centerPivot();
    this.noGift.x = MLE.width / 2;
    this.noGift.y = MLE.height / 2 - 70;
    this.noGift.alpha = 0;
    this.openGiftBoxButton = new MenuButton("getgift", "");
    this.openGiftBoxButton.group.x = MLE.width / 2;
    this.openGiftBoxButton.group.y = 600;
    this.openGiftBoxButton.group.alpha = 0;
    this.openGiftBoxButton.clickCallback = this.openGiftBoxButtonClicked.bindd(this)
};
GiftBoxWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.giftBox.update());
    this.openGiftBoxButton.group.alpha === 1 && this.openGiftBoxButton.update()
};
GiftBoxWindow.prototype.draw = function() {
    this.sprite.draw();
    this.light.draw();
    this.giftBox.draw();
    this.noGift.draw();
    this.openGiftBoxButton.draw()
};
GiftBoxWindow.prototype.show = function(b) {
    gameScene.paused = true;
    gameScene.aimArrow.setPaused(true);
    gameScene.windCloud.setPaused(true);
    gameScene.giftBoxShowing = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    if (gameScene.firstShowGift) {
        createjs.Tween.get(this.giftBox.group).wait(100).to({
            alpha: 1,
            y: 485
        }, 700, createjs.Ease.bounceOut);
        setTimeout(function() {
            gameScene.giftBoxWindow.giftBoxClicked()
        }, 1100)
    }
    if (b == "withButton") {
        setTimeout(function() {
            createjs.Tween.get(gameScene.giftBoxWindow.openGiftBoxButton.group).to({
                alpha: 1
            }, 200)
        }, 200);
        this.giftBox.group.alpha = 1;
        createjs.Tween.get(this.giftBox.group, {
            loop: false
        }).to({
            scaleX: 1,
            scaleY: 1,
            x: MLE.width / 2,
            y: MLE.height / 2 - 50
        }, 300)
    }
};
GiftBoxWindow.prototype.hide = function() {
    gameScene.giftBoxShowing = false;
    gameScene.resume();
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.giftBox.group).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.openGiftBoxButton.group).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.noGift).to({
        alpha: 0
    }, 350);
    this.light.hide()
};
GiftBoxWindow.prototype.getgiftClicked = function() {
    window.location = "http://www.baidu.com"
};
GiftBoxWindow.prototype.openGiftBoxButtonClicked = function() {
    gameScene.shouldShowGiftBoxWindow = false;
    gameScene.giftCount--;
    gameScene.gui.giftBoxs.text.text = "x " + gameScene.giftCount;
    this.rotationTween = createjs.Tween.get(this.giftBox.group, {
        loop: false
    }).to({
        angle: 3
    }, 50).to({
        angle: -3
    }, 50).to({
        angle: 0
    }, 50).to({
        angle: 3
    }, 50).to({
        angle: -3
    }, 50).to({
        angle: 0
    }, 50).to({
        alpha: 0
    }, 150);
    var a = new XMLHttpRequest();
    if (a != null) {
        a.open("get", "http://123.57.64.159/getRandom.php", true);
        a.send(null);
        a.onreadystatechange = function() {
            if (a.status == 200 && a.responseText.indexOf("http://17323.zuikuapp.com/") == 0) {
                window.location = a.responseText
            } else {
                setTimeout(function() {
                    createjs.Tween.get(gameScene.giftBoxWindow.noGift).to({
                        alpha: 1
                    }, 200)
                }, 300);
                setTimeout(function() {
                    createjs.Tween.get(gameScene.giftBoxWindow.noGift).to({
                        alpha: 0
                    }, 200)
                }, 1300);				
            }
        }
    }
    setTimeout(function() {
        gameScene.giftBoxWindow.hide()
    }, 1500)
};
GiftBoxWindow.prototype.giftBoxClicked = function() {
    createjs.Tween.get(this.giftBox.group, {
        loop: false
    }).to({
        scaleX: 0.25,
        scaleY: 0.25,
        x: MLE.width / 2 + 210,
        y: MLE.height / 2 + 430
    }, 800);
    createjs.Tween.get(this.light.sprite, {
        loop: false
    }).to({
        scaleX: 0.25,
        scaleY: 0.25,
        x: MLE.width / 2 + 210,
        y: MLE.height / 2 + 430
    }, 800);
    setTimeout(function() {
        gameScene.giftBoxWindow.hide();
        gameScene.resume();
        createjs.Tween.get(gameScene.gui.giftBoxs.group).to({
            alpha: 1
        }, 350)
    }, 1200);
    this.giftBox.block = true
};
var PauseWindow = function() {
    this.init()
};
PauseWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("popup", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.resumeButton = new MenuButton("gift", "");
    this.resumeButton.group.x = MLE.width / 2;
    this.resumeButton.group.y = 420;
    this.resumeButton.group.alpha = 0;
    this.resumeButton.clickCallback = this.resumeClicked.bindd(this);
    this.backToMenuButton = new MenuButton("gift", "");
    this.backToMenuButton.group.x = MLE.width / 2;
    this.backToMenuButton.group.y = 580;
    this.backToMenuButton.group.alpha = 0;
    this.backToMenuButton.clickCallback = this.backToMainMenu.bindd(this)
};
PauseWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.resumeButton.update(), this.backToMenuButton.update())
};
PauseWindow.prototype.draw = function() {
    this.sprite.draw();
    this.resumeButton.draw();
    this.backToMenuButton.draw()
};
PauseWindow.prototype.show = function(b) {
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.resumeButton.group).wait(200).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.backToMenuButton.group).wait(400).to({
        alpha: 1
    }, 350)
};
PauseWindow.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.resumeButton.group).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.backToMenuButton.group).to({
        alpha: 0
    }, 350)
};
PauseWindow.prototype.resumeClicked = function() {
    this.hide();
    gameScene.resume()
};
PauseWindow.prototype.backToMainMenu = function() {
    this.hide();
    gameScene.resume()
};
var RotateScene = function() {
    this.init()
};
RotateScene.prototype.init = function() {
    window.rotateScene = this;
    this.rotateImage = new MLE.Sprite("rotate", MLE.width / 2, MLE.height / 2);
    this.rotateImage.scaleX = this.rotateImage.scaleY = 1.75;
    this.rotateImage.centerPivot()
};
RotateScene.prototype.update = function() {
    document.body.style["background-color"] = "#ffffff"
};
RotateScene.prototype.draw = function() {
    MLE.context.fillStyle = "#ffffff";
    MLE.context.fillRect(0, 0, MLE.width, MLE.height);
    this.rotateImage.draw()
};
var isSmall, remote = {
        log: function() {}
    },
    monsterType = 1,
    windowOnload = function() {
        var d = [],
            c;
        for (c in window.languages) {
            d.push(c)
        }
        c = "ch";
        window.currLang = window.languages[c];
        d = function() {};
        SG_Hooks.setOrientationHandler(d);
        SG_Hooks.setResizeHandler(d);
        d = (isSmall = false, "media2");
        c = isSmall ? "preloaderSD" : "preloaderHD";
        MLE.init({
            preManifest: [{
                src: "./" + c + "/preload.png",
                id: "preload"
            }, {
                src: "./" + c + "/loadingBar0.png",
                id: "loadingBar0"
            }, {
                src: "./" + c + "/loadingBar1.png",
                id: "loadingBar1"
            }, {
                src: "./" + c + "/loadingTextAnim.png",
                id: "loadingTextAnim"
            }, {
                src: "./" + c + "/rotatePortrait.png",
                id: "rotate"
            }],
            preLoaderScene: PreLoaderScene,
            manifest: [{
                src: "./" + d + "/shadow.png",
                id: "shadow"
            }, {
                src: "./" + d + "/aimArrow.png",
                id: "aimArrow"
            }, {
                src: "./" + d + "/gameBackground.png",
                id: "gameBackground"
            }, {
                src: "./" + c + "/preload.png",
                id: "splash"
            }, {
                src: "./" + d + "/paper.png",
                id: "paper"
            }, {
                src: "./" + d + "/wind.png",
                id: "wind"
            }, {
                src: "./" + d + "/goal.png",
                id: "goal"
            }, {
                src: "./" + d + "/goalFront.png",
                id: "goalFront"
            }, {
                src: "./" + d + "/box.png",
                id: "box"
            }, {
                src: "./" + d + "/transform_normal.png",
                id: "transform_normal"
            }, {
                src: "./" + d + "/transform_normal.png",
                id: "transform_select"
            }, {
                src: "./" + d + "/popup.png",
                id: "popup"
            }, {
                src: "./" + d + "/active_rule_normal.png",
                id: "active_rule_normal"
            }, {
                src: "./" + d + "/active_rule_normal.png",
                id: "active_rule_select"
            }, {
                src: "./" + d + "/play_rule_normal.png",
                id: "play_rule_normal"
            }, {
                src: "./" + d + "/play_rule_normal.png",
                id: "play_rule_select"
            }, {
                src: "./" + d + "/playRule.png",
                id: "playRule"
            }, {
                src: "./" + d + "/activeRule.png",
                id: "activeRule"
            }, {
                src: "./" + d + "/close_normal.png",
                id: "close_normal"
            }, {
                src: "./" + d + "/close_normal.png",
                id: "close_select"
            }, {
                src: "./" + d + "/gift_normal.png",
                id: "gift_normal"
            }, {
                src: "./" + d + "/gift_normal.png",
                id: "gift_select"
            }, {
                src: "./" + d + "/nogift.png",
                id: "nogift"
            }, {
                src: "./" + d + "/fanleft1.png",
                id: "fanleft1"
            }, {
                src: "./" + d + "/fanleft2.png",
                id: "fanleft2"
            }, {
                src: "./" + d + "/getgift_normal.png",
                id: "getgift_select"
            }, {
                src: "./" + d + "/getgift_normal.png",
                id: "getgift_normal"
            }, {
                src: "./" + d + "/light.png",
                id: "light"
            }],
            game: Director,
            height: 960,
            width: 640,
            scaling: true,
            showDebug: false
        })
    };
window.addEventListener("load", windowOnload, true);
var getConst = function(b) {
    return b * MLE.width / 640
};