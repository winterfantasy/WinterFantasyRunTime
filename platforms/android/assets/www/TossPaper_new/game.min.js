var prexx = 0;
var preyy = 0;
var prezz = 0;
var xiaomishoot = false;
var first = true;
var xiaomiisready = false;
var notifytimeout = false;

function changeTog(data) {
    //var raw = new Int8Array(data);
    //return raw[0] / 64;
	
	var dv = new DataView(data);
	var raw = dv.getUint16(0,true);
	raw = raw << 2;
	dv.setUint16(0,raw,true);
	var value = dv.getInt16(0,true);
	return value/400;
}

document.addEventListener('bcready', function () {
        	BC.bluetooth.addEventListener("bluetoothstatechange", function () {
        		if (BC.bluetooth.isopen) {
        			alert("your bluetooth has been opened successfully.");
        		} else {
        			alert("bluetooth is closed!");
        			BC.Bluetooth.OpenBluetooth(function () { alert("opened!"); });
        		}
        	});
			
			BC.Bluetooth.GetConnectedDevices(function(devices){
				var isxiaomiband = false;
				for(var i = 0;i < devices.length;i++){
					if(devices[i].deviceName == "MI"){
						isxiaomiband = true;
						var miband = new BC.Device({deviceAddress:devices[i].deviceAddress,deviceName:devices[i].deviceName,type:'BLE',isConnected:true});
						miband.addEventListener("devicedisconnected",function(){
							alert("手环意外断开，请重启小米运动app再试试哦~");
							cordova.exec(null,null,"BCBluetooth","kill",[]);
						});
						miband.discoverServices(function(){
							miband.services[2].discoverCharacteristics(function(){
								setTimeout(function(){
									var time = 0;
									miband.services[2].characteristics[13].subscribe(function(data){
										xiaomiisready = true;
										var datastr = data.value.getHexString();
										console.log(datastr);
										var datalen = datastr.length;
										if(datalen == 16 || datalen == 28){
											var xx = changeTog(data.value.value.slice(2,4))/10;
											var yy = changeTog(data.value.value.slice(4,6))/10;
											var zz = changeTog(data.value.value.slice(6,8))/10;
											
											if(first){
												first = false;
											}else{
												if(Math.abs(xx - prexx) > 0.5 || Math.abs(yy - preyy) > 0.5 || Math.abs(zz - prezz) > 0.5){
													xiaomishoot = true;
												}
											}
											prexx = xx;
											preyy = yy;
											prezz = zz;									
										}else{
											console.log("data length is not right : "+datalen);
											alert("手环连接出错啦，后台彻底退出并重启小米运动App后再试试哦~");
											cordova.exec(null,null,"BCBluetooth","kill",[]);
										}
									}
								)},100);
								
								setTimeout(function(){
									miband.services[2].characteristics[13].write("Hex","01",function(){
										/*setTimeout(function(){
											miband.services[2].characteristics[13].write("Hex","1201",function(){
												
											},function(){
												alert("write error!!!");
											})
										},100);*/
									},function(){
										alert("write error!!!");
									})
								},200);
								
								setInterval(function(){
									miband.services[2].characteristics[13].write("Hex","01",function(){
										setTimeout(function(){
											miband.services[2].characteristics[13].write("Hex","01",function(){
												
											},function(){
												alert("write error!!!");
											})
										},100);								
									},function(){
										alert("write error!!!");
									})
								},60000);								
							},function(){});
						},function(){});
					}
				}
				
				if(!isxiaomiband){
					alert("请先开启小米运动App，再打开游戏哦~");
					cordova.exec(null,null,"BCBluetooth","kill",[]);
				}
			},function(mes){alert(JSON.stringify(mes));});
			
        }, false);
		
var MLE = MLE || {};
MLE.init = function(a) {
    MLE.forceFPS = a.forceFPS || false;
    MLE.showDebug = a.showDebug || false;
    MLE.noCache = true;
    MLE.mouseScale = 1;
    MLE.mouse = new MouseInput;
    MLE.keyboard = new KeyboardInput;
    MLE.wrapper = document.getElementById(a.wrapper || "wrapper");
    MLE.canvas = document.getElementById(a.canvas || "gameCanvas");
    if (!MLE.canvas) {
        MLE.canvas = document.createElement("canvas"), MLE.canvas.id = "gameCanvas", MLE.wrapper.appendChild(MLE.canvas)
    }
    MLE.width = a.width || 320;
    MLE.height = a.height || 480;
    MLE.canvas.width = MLE.width;
    MLE.canvas.height = MLE.height;
    MLE.wrapper.style.width = MLE.width + "px";
    MLE.wrapper.style.height = MLE.height + "px";
    MLE.context = MLE.canvas.getContext("2d");
    MLE.scaling = a.scaling || true;
    MLE.scaling && MLE.initScaling();
    MLE.manifest = a.manifest || [];
    MLE.assets = new MLE.Assets;
    MLE.preManifest = a.preManifest || [];
    MLE.preLoader = new MLE.Loader(MLE.preManifest, MLE.startLoader.bindd(MLE));
    MLE.preLoaderScene = a.preLoaderScene;
    MLE.tick = 0;
    MLE.lastFrameTime = Date.now();
    MLE.gameType = a.game;
    MLE.game = null;
    MLE.cameraX = 0;
    MLE.cameraY = 0;
    MLE.lastCamX = 0;
    MLE.lastCamY = 0;
    MLE.context.imageSmoothingEnabled = true
};
MLE.startLoader = function() {
    MLE.tick = 0;
    MLE.lastFrameTime = Date.now();
    MLE.game = new MLE.preLoaderScene;
    MLE.rotateScene = new RotateScene;
    MLE.mouse.init();
    MLE.keyboard.init();
    MLE.loader = new MLE.Loader(MLE.manifest, function() {});
    MLE.gameLoop()
};
MLE.start = function() {
    setTimeout(function() {
        createjs.Tween._tweens = [];
        MLE.context.imageSmoothingEnabled = false;
        MLE.nextGame = new MLE.gameType
    }, 200)
};
MLE.initScaling = function() {
    MLE.sizeHandler();
    window.addEventListener("resize", function() {
        MLE.sizeHandler(15)
    }, false);
    window.addEventListener("orientationchange", function() {
        MLE.sizeHandler(15)
    }, false)
};
var cumulTick = 0,
    cumulCounter = 0,
    fps = 0;
MLE.gameLoop = function() {
    MLE.sizeHandler();
    if (window.innerHeight < window.innerWidth && isMobile.any()) {
        MLE.sizeHandler(), MLE.rotateScene.update(), MLE.rotateScene.draw()
    } else {
        document.body.style["background-color"] = "#000000";
        if (MLE.nextGame) {
            MLE.game = MLE.nextGame, MLE.nextGame = null
        }
        MLE.context.globalAlpha = 1;
        MLE.tick = Date.now() - MLE.lastFrameTime;
        MLE.context.clearRect(0, 0, MLE.width, MLE.height);
        MLE.lastFrameTime += MLE.tick;
        if (MLE.tick > 50) {
            MLE.tick = 50
        }
        Date.now();
        createjs.Tween.tick(MLE.tick, false);
        MLE.keyboard.update();
        MLE.mouse.update();
        MLE.game.update();
        Date.now();
        Date.now();
        MLE.game.draw();
        Date.now();
        cumulTick += MLE.tick;
        cumulCounter += 1;
        cumulTick > 1000 && (cumulTick -= 1000, fps = cumulCounter, cumulCounter = 0);
        if (MLE.showDebug) {
            MLE.context.font = "18px sans-serif", MLE.context.textAlign = "left", MLE.context.fillStyle = "#ff00ff", MLE.context.fillText(fps, 0, 20)
        }
        MLE.lastCamX = MLE.cameraX;
        MLE.lastCamY = MLE.cameraY
    }
    MLE.idAnimationFrame = requestAnimationFrame(MLE.gameLoop)
};
MLE.downCallbacks = function() {
    MLE.game && MLE.game.downCallbacks && MLE.game.downCallbacks()
};
MLE.upCallbacks = function() {
    MLE.game && MLE.game.upCallbacks && MLE.game.upCallbacks()
};
MLE.sizeHandler = function(d) {
    window.scrollTo(0, 1);
    var e = MLE.width,
        a = MLE.height,
        c = window.innerWidth,
        b = window.innerHeight,
        c = limitNumber(c, 160, 1200),
        b = limitNumber(b, 160, 1200);
    multiplier = Math.min(b / a, c / e);
    e *= multiplier;
    a *= multiplier;
    c = MLE.wrapper;
    c.style.display = "block";
    c.style.width = e + "px";
    c.style.height = a + 0 + "px";
    c.style.left = window.innerWidth / 2 - e / 2 + "px";
    c.style.top = window.innerHeight / 2 - a / 2 + "px";
    d && setTimeout(function() {
        MLE.sizeHandler(d - 1)
    }, 500)
};
(function() {
    for (var b = 0, c = ["ms", "moz", "webkit", "o"], a = 0; a < c.length && !window.requestAnimationFrame; ++a) {
        window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[c[a] + "CancelAnimationFrame"] || window[c[a] + "CancelRequestAnimationFrame"]
    }
    if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function(d) {
            var e = (new Date).getTime(),
                f = Math.max(0, 16 - (e - b)),
                g = window.setTimeout(function() {
                    d(e + f)
                }, f);
            b = e + f;
            return g
        }
    }
    if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = function(d) {
            clearTimeout(d)
        }
    }
})();
MLE = MLE || {};
MLE.Assets = function() {
    this.textures = {};
    this.bitmaps = {}
};
MLE.Assets.prototype.addResource = function(a) {
    a.isSpriteSheet ? this.addSpriteSheet(a) : (this.addTexture(a.id, a.img), this.addBitmap(a.id, a.img))
};
MLE.Assets.prototype.addBitmap = function(b, c, a) {
    this.bitmaps[b] = new MLE.Bitmap(c, a)
};
MLE.Assets.prototype.addTexture = function(a, b) {
    this.textures[a] = b
};
MLE.Assets.prototype.addSpriteSheet = function(a) {
    this.addTexture(a.id, a.img);
    for (var b in a.descObj) {
        this.addBitmap(b, a.img, a.descObj[b].frame)
    }
};
MLE.Assets.prototype.getBitmap = function(a) {
    try {
        return this.bitmaps[a] === null ? null : this.bitmaps[a].clone()
    } catch (b) {
        console.log("can not find the image: ", a)
    }
};
MLE = MLE || {};
MLE.Util = {};
MLE.Util.toDeg = function(a) {
    return a * 180 / Math.PI
};
MLE.Util.toRad = function(a) {
    return a / 180 * Math.PI
};
MLE.Util.mapValue = function(d, e, a, c, b) {
    return c + (b - c) * ((d - e) / (a - e))
};
MLE.Util.testMapValue = function() {
    console.log("1, 2, 3, 4, 5");
    console.log(MLE.Util.mapValue(1, 2, 3, 4, 5));
    console.log("Powinno: 3");
    console.log("2, 2, 3, 4, 5");
    console.log(MLE.Util.mapValue(2, 2, 3, 4, 5));
    console.log("Powinno: 4");
    console.log("0.25, 0, 1, 100, 1100");
    console.log(MLE.Util.mapValue(0.25, 0, 1, 100, 1100));
    console.log("Powinno: 350");
    console.log("0.25, 0, 1, 1000, 0");
    console.log(MLE.Util.mapValue(0.25, 0, 1, 1000, 0));
    console.log("Powinno: 750");
    console.log("0.25, 0, 1, 1000, 0");
    console.log(MLE.Util.mapValue(0.25, 1, 0, 0, 1000));
    console.log("Powinno: 750");
    console.log("1250, 2000, 1000, 1.5, 0");
    console.log(MLE.Util.mapValue(1250, 2000, 1000, 1.5, 0));
    console.log("Powinno: 0.375");
    console.log("1250, 2000, 1000, 1.5, 3");
    console.log(MLE.Util.mapValue(1250, 2000, 1000, 1.4, 3));
    console.log("Powinno: 2.6")
};
MLE.Util.sortArray = function(a, b) {
    a.sort(function(c, d) {
        return d[b] - c[b]
    });
    return a
};
MLE.Util.ajaxRequest = function() {
    var b = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
    if (window.ActiveXObject) {
        for (var c = 0; c < b.length; c++) {
            try {
                return new ActiveXObject(b[c])
            } catch (a) {}
        }
    } else {
        return window.XMLHttpRequest ? new XMLHttpRequest : false
    }
};
MLE.Util.isCanvasEmpty = function(b) {
    for (var b = b.getContext("2d").getImageData(0, 0, b.width, b.height).data, c = 0, a = b.length; c < a; c += 4) {
        if (b[c + 3]) {
            return false
        }
    }
    return true
};
trace = function() {};
Function.prototype.bindd = function(a) {
    var b = this;
    return temp = function() {
        return b.apply(a, arguments)
    }
};
limitNumber = function(b, c, a) {
    return Math.min(a, Math.max(c, b))
};

function shuffleArray(c) {
    for (var e = c.length - 1; e > 0; e--) {
        var a = Math.floor(Math.random() * (e + 1)),
            b = c[e];
        c[e] = c[a];
        c[a] = b
    }
    return c
}
var isMobile = {
    Android: function() {
        return navigator.userAgent.match(/Android/i)
    },
    BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i)
    },
    iOS: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i)
    },
    Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i)
    },
    Windows: function() {
        return navigator.userAgent.match(/IEMobile/i)
    },
    any: function() {
        return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()
    }
};

function getDistance(c, e, a, b) {
    c = Math.abs(c - a);
    e = Math.abs(e - b);
    return Math.sqrt(c * c + e * e)
}
MLE.Util.createArrayFromTo = function(e, f) {
    for (var a = Math.abs(e - f) / (e - f), c = [], b = true, d = e; b; d -= a) {
        c.push(d), d === f && (b = false)
    }
    return c
};
Number.prototype.map = function(c, e, a, b) {
    return a + (b - a) * ((this - c) / (e - c))
};
Number.prototype.isBetween = function(b, c) {
    var a;
    return this <= b && this >= c || this >= b && this <= c
};
MLE.Util.colorBetweenColors = function(d, e, a) {
    for (var c = [0, 0, 0, 0], b = 0; b < 4; b++) {
        c[b] = d[b] > e[b] ? d[b] - (d[b] - e[b]) * a : (e[b] - d[b]) * a + d[b]
    }
    for (b = 0; b < 4; b++) {
        c[b] = Math.floor(c[b])
    }
    return c
};
Number.prototype.map = function(c, e, a, b) {
    return a + (b - a) * ((this - c) / (e - c))
};
MLE = MLE || {};
MLE.Loader = function(d, e) {
    this.allResources = d.length;
    this.loadedResources = 0;
    this.onCompleteCallback = e;
    this.ready = false;
    this.manifest = d;
    if (MLE.noCache) {
        for (var a = 0; a < this.manifest.length; a++) {
            this.manifest[a].isFaceFont || (this.manifest[a].src += "?" + Date.now() + Math.random() * 999999)
        }
    }
    var c = new PxLoader;
    this.loader = c;
    for (a = 0; a < d.length; a++) {
        if (d[a].isJSON) {
            this.loadJSON(d[a])
        } else {
            if (d[a].isFaceFont) {
                var b = new MLE.FaceFont;
                b.onLoad = this.faceFontLoaded.bindd(this);
                b.loadFont(d[a].src)
            } else {
                b = new PxLoaderImage(d[a].src), b.id = d[a].id || null, b.isSpriteSheet = d[a].isSpriteSheet || false, b.descObj = d[a].descObj || null, c.add(b)
            }
        }
    }
    c.addProgressListener(this.onProgress.bindd(this));
    c.addCompletionListener(this.onComplete.bindd(this));
    c.start()
};
MLE.Loader.prototype.onProgress = function(a) {
    this.loadedResources += 1;
    MLE.assets.addResource(a.resource);
    this.drawProgress(a)
};
MLE.Loader.prototype.onComplete = function() {
    this.onLoadAsset()
};
MLE.Loader.prototype.drawProgress = function() {};
MLE.Loader.prototype.loadJSON = function(a) {
    var b = new MLE.Util.ajaxRequest;
    b.onreadystatechange = this.onLoadJSON.bindd(this);
    b.open("GET", a.src, true);
    b.send(null)
};
MLE.Loader.prototype.onLoadJSON = function(a) {
    a.target.readyState === 4 && (a.target.status === 200 ? (this.loadedResources += 1, this.drawProgress(), JSON.parse(a.target.responseText), this.onLoadAsset()) : alert("Error with loading json, try to reload!"))
};
MLE.Loader.prototype.faceFontLoaded = function() {
    this.loadedResources += 1;
    this.drawProgress();
    this.onLoadAsset()
};
MLE.Loader.prototype.onLoadAsset = function() {
    if (this.loadedResources === this.allResources && (this.ready = true, this.onCompleteCallback)) {
        this.onCompleteCallback()
    }
};
MLE = MLE || {};
MLE.Bitmap = function(a, b) {
    this.texture = a;
    this.rect = b ? b : {
        x: 0,
        y: 0,
        w: a.naturalWidth,
        h: a.naturalHeight
    }
};
MLE.Bitmap.prototype.draw = function(a, b) {
    MLE.context.drawImage(this.texture, this.rect.x, this.rect.y, this.rect.w, this.rect.h, a, b, this.rect.w, this.rect.h)
};
MLE.Bitmap.prototype.clone = function() {
    return new MLE.Bitmap(this.texture, this.rect)
};
MLE = MLE || {};
MLE.FrameAnim = function(b, c, a) {
    this.sprite = b;
    this.frameW = this.sprite.rect.w / c;
    this.frameH = this.sprite.rect.h / a;
    this.sprite.pivotX *= this.frameW / this.sprite.rect.w;
    this.sprite.pivotY *= this.frameH / this.sprite.rect.h;
    this.anims = {};
    this.currentAnim = null;
    this.stopped = false;
    this.cumulTime = 0
};
MLE.FrameAnim.prototype.addAnim = function(b, c, a) {
    this.anims[b] = {
        fps: a,
        frames: c,
        currentFrame: 0
    };
    this.currentFrame = this.anims[b]
};
MLE.FrameAnim.prototype.gotoAndPlay = function(b, c) {
    var a;
    if (c) {
        this.currentAnim = this.anims[c]
    }
    this.stopped = false;
    this.currentAnim.currentFrame = b || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.FrameAnim.prototype.gotoAndStop = function(b, c) {
    var a;
    if (c) {
        this.currentAnim = this.anims[c]
    }
    this.stopped = true;
    this.currentAnim.currentFrame = b || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.FrameAnim.prototype.update = function() {
    if (!(this.stopped || this.currentAnim === null)) {
        if (this.cumulTime += MLE.tick, this.cumulTime > 1000 / this.currentAnim.fps) {
            this.cumulTime -= 1000 / this.currentAnim.fps;
            if (this.currentAnim.currentFrame === this.currentAnim.frames.length - 1 && (this.onLoop(this.currentAnim), this.stopOnLoop)) {
                this.stopped = true;
                this.updateSpriteRect();
                return
            }
            this.currentAnim.currentFrame = (this.currentAnim.currentFrame + 1) % this.currentAnim.frames.length;
            this.onFrameChange(this.currentAnim, this.currentAnim.currentFrame);
            this.updateSpriteRect()
        }
    }
};
MLE.FrameAnim.prototype.updateSpriteRect = function() {
    var a = this.currentAnim.frames[this.currentAnim.currentFrame],
        b = Math.floor(a / Math.floor(this.sprite.bitmap.rect.w / this.frameW));
    this.sprite.rect.x = a % Math.floor(this.sprite.bitmap.rect.w / this.frameW) * this.frameW;
    this.sprite.rect.y = b * this.frameH;
    this.sprite.rect.w = this.frameW;
    this.sprite.rect.h = this.frameH
};
MLE.FrameAnim.prototype.onFrameChange = function() {};
MLE.FrameAnim.prototype.onLoop = function() {};
MLE.FrameAnim.prototype.isPlaying = function(a) {
    return this.currentAnim === this.anims[a] && this.anims[a] ? true : false
};
MLE = MLE || {};
MLE.Sprite = function(c, e, a, b) {
    typeof c === "string" && (c = MLE.assets.getBitmap(c));
    this.bitmap = c;
    this.rect = b ? b : {
        x: 0,
        y: 0,
        w: c.rect.w,
        h: c.rect.h
    };
    this.x = e;
    this.y = a;
    this.scaleY = this.scaleX = 1;
    this.pivotY = this.pivotX = this.angle = this.skewY = this.skewX = 0;
    this.alpha = 1;
    this.useTransforms = true;
    this.anchor = false
};
MLE.Sprite.prototype.draw = function() {
    if (this.alpha > 1) {
        this.alpha = 1
    } else {
        if (this.alpha < 0) {
            this.alpha = 0
        }
    }
    if (this.alpha !== 0) {
        var c = MLE.cameraX,
            e = MLE.cameraY;
        if (this.anchor) {
            MLE.cameraX = 0, MLE.cameraY = 0
        }
        if (this.useTransforms || !(this.x + this.pivotX + this.rect.w * this.scaleX < MLE.cameraX || this.x + this.pivotX > MLE.cameraX + MLE.width || this.y + this.pivotY + this.rect.h * this.scaleX < MLE.cameraY || this.y + this.pivotY > MLE.cameraY + MLE.height)) {
            var a = MLE.context.globalAlpha;
            MLE.context.globalAlpha *= this.alpha;
            if (this.useTransforms) {
                var b = MLE.context;
                b.save();
                b.translate(Math.floor(this.x - MLE.cameraX), Math.floor(this.y - MLE.cameraY));
                b.rotate(MLE.Util.toRad(this.angle));
                b.transform(this.scaleX, Math.tan(MLE.Util.toRad(this.skewY)), Math.tan(MLE.Util.toRad(this.skewX)), this.scaleY, 0, 0);
                MLE.context.drawImage(this.bitmap.texture, this.rect.x + this.bitmap.rect.x, this.rect.y + this.bitmap.rect.y, this.rect.w, this.rect.h, -this.pivotX, -this.pivotY, this.rect.w, this.rect.h);
                b.restore()
            } else {
                MLE.context.drawImage(this.bitmap.texture, this.rect.x + this.bitmap.rect.x, this.rect.y + this.bitmap.rect.y, this.rect.w, this.rect.h, Math.floor(this.x - MLE.cameraX), Math.floor(this.y - MLE.cameraY), this.rect.w, this.rect.h)
            }
            MLE.context.globalAlpha = a
        }
        MLE.cameraX = c;
        MLE.cameraY = e
    }
};
MLE.Sprite.prototype.centerPivot = function() {
    this.pivotX = this.rect.w / 2;
    this.pivotY = this.rect.h / 2
};
MLE.Sprite.prototype.setPivotPercent = function(a, b) {
    this.pivotX = a * this.rect.w;
    this.pivotY = b * this.rect.h
};
MLE.Sprite.prototype.changeBitmap = function(a, b) {
    typeof a === "string" && (a = MLE.assets.getBitmap(a));
    this.bitmap = a;
    this.rect = b ? b : {
        x: 0,
        y: 0,
        w: a.rect.w,
        h: a.rect.h
    }
};
MLE = MLE || {};
MLE.TextSprite = function(d, e, a, c, b) {
    this.x = e;
    this.y = a;
    this.alpha = 1;
    this.text = d || "";
    this.font = c || "Comic Sans MS";
    this.size = 32;
    this.align = b || "center";
    this.color = "#ffffff";
    this.border = "#000000";
    this.storkeThin = 5;
    this.baseline = "middle";
    this.lineHeight = 50;
    this.wrap = 9999
};
MLE.TextSprite.prototype.draw = function() {
    var a = MLE.context;
    a.save();
    a.globalAlpha *= this.alpha;
    a.font = this.size + "px " + this.font;
    a.textAlign = this.align;
    a.fillStyle = this.color;
    a.strokeStyle = this.border;
    a.textBaseline = this.baseline;
    a.lineWidth = 5;
    a.strokeText(this.text, this.x, this.y);
    a.fillText(this.text, this.x, this.y);
    a.restore()
};
MLE.TextSprite.prototype.getWidth = function() {
    var a = MLE.context;
    a.save();
    a.globalAlpha *= this.alpha;
    a.font = this.size + "px " + this.font;
    a.textAlign = this.align;
    a.fillStyle = this.color;
    a.strokeStyle = this.border;
    a.textBaseline = this.baseline;
    a.lineWidth = 5;
    var b = a.measureText(this.text);
    a.restore();
    return b.width
};
MLE.TextSprite.prototype.adjustFontSize = function(a) {
    for (var b = true; b === true && this.size > 5;) {
        this.getWidth() < a ? b = false : this.size -= 1
    }
};

function wrapText(e, f, a, c, b, d) {
    f = f.split("\n");
    for (b = 0; b < f.length; b++) {
        e.fillText(f[b], a, c, 40), e.lineWidth = 5, e.strokeText(f[b], a, c), c += d
    }
}
MLE = MLE || {};
MLE.Group = function() {
    this.y = this.x = 0;
    this.rect = {
        x: 0,
        y: 0,
        w: 0,
        h: 0
    };
    this.scaleY = this.scaleX = 1;
    this.pivotY = this.pivotX = this.angle = this.skewY = this.skewX = 0;
    this.alpha = 1;
    this.children = []
};
MLE.Group.prototype.draw = function() {
    if (this.alpha > 1) {
        this.alpha = 1
    } else {
        if (this.alpha < 0) {
            this.alpha = 0
        }
    }
    if (this.alpha !== 0) {
        var c = MLE.cameraX,
            e = MLE.cameraY;
        MLE.cameraX = 0;
        MLE.cameraY = 0;
        var a = MLE.context;
        a.save();
        a.globalAlpha *= this.alpha;
        a.translate(this.x - MLE.cameraX, this.y - MLE.cameraY);
        a.rotate(MLE.Util.toRad(this.angle));
        a.transform(this.scaleX, Math.tan(MLE.Util.toRad(this.skewY)), Math.tan(MLE.Util.toRad(this.skewX)), this.scaleY, 0, 0);
        a.translate(-this.pivotX, -this.pivotY);
        this.preDraw();
        for (var b = 0; b < this.children.length; b++) {
            this.children[b].draw()
        }
        this.postDraw();
        a.restore();
        MLE.cameraX = c;
        MLE.cameraY = e;
        a.globalAlpha /= this.alpha
    }
};
MLE.Group.prototype.centerPivot = function() {
    this.pivotX = this.rect.w / 2;
    this.pivotY = this.rect.h / 2
};
MLE.Group.prototype.addChild = function(a) {
    a.grouped = this;
    this.children.push(a)
};
MLE.Group.prototype.addChildInBack = function(a) {
    this.children.unshift(a)
};
MLE.Group.prototype.preDraw = function() {};
MLE.Group.prototype.postDraw = function() {};
MLE.Group.prototype.removeAllTweens = function() {
    createjs.Tween.removeTweens(this);
    for (var a = 0; a < this.children.length; a++) {
        createjs.Tween.removeTweens(this.children[a])
    }
};
MLE = MLE || {};
MLE.SimpleMovement = function(a) {
    this.sprite = a;
    this.init()
};
MLE.SimpleMovement.prototype.init = function() {
    this.accelY = this.accelX = this.velY = this.velX = 0;
    this.maxVelY = this.maxVelX = 1000;
    this.gravity = 0
};
MLE.SimpleMovement.prototype.update = function() {
    var a = this.accelX,
        a = a * MLE.tick / 1000;
    this.sprite.x += MLE.tick / 1000 * (this.velX + a / 2);
    this.velX += a;
    a = this.gravity + this.accelY;
    a = a * MLE.tick / 1000;
    this.sprite.y += MLE.tick / 1000 * (this.velY + a / 2);
    this.velY += a;
    if (this.velX > this.maxVelX) {
        this.velX = this.maxVelX
    } else {
        if (this.velX < -this.maxVelX) {
            this.velX = -this.maxVelX
        }
    }
    if (this.velY > this.maxVelY) {
        this.velY = this.maxVelY
    } else {
        if (this.velY < -this.maxVelY) {
            this.velY = -this.maxVelY
        }
    }
};
MLE.SimpleMovement.prototype.setValues = function(e, f, g, b, a, c, d) {
    this.velX = e;
    this.velY = f;
    this.accelX = g;
    this.accelY = b;
    this.maxVelX = a || this.maxVelX;
    this.maxVelY = c || this.maxVelY;
    this.gravity = d || this.gravity
};
MLE.CircleCollision = function(d, e, a, c, b) {
    this.sprite = d;
    this.x = e;
    this.y = a;
    this.r = c;
    this.fillStyle = b || "rgba(0,255,255,0.6)"
};
MLE.CircleCollision.prototype = {
    checkAgainst: function(b) {
        var c = Math.abs(this.sprite.x + this.x - b.x - b.sprite.x),
            a = Math.abs(this.sprite.y + this.y - b.y - b.sprite.y);
        return c * c + a * a < (this.r + b.r) * (this.r + b.r)
    },
    drawDebug: function() {}
};
MLE.CircleCollision.prototype.checkAgainstWithPosCorrection = function(c, e, a) {
    var b = this.checkAgainstWithShift(c, e, a);
    if (b === null) {
        return null
    }
    getDistance(e, a, b.ox1, b.oy1) < getDistance(e, a, b.ox2, b.oy2) || b.ox2 === null ? (c.sprite.x = b.ox1 - (this.x + this.sprite.x > b.ox1 ? 1 : -1), c.sprite.y = b.oy1 - (this.y + this.sprite.y > b.oy1 ? 1 : -1)) : (c.sprite.x = b.ox2 - (this.x + this.sprite.x > b.ox2 ? 1 : -1), c.sprite.y = b.oy2 - (this.y + this.sprite.y > b.oy2 ? 1 : -1));
    return true
};
MLE.CircleCollision.prototype.checkAgainstWithShift = function(i, a, b) {
    var d = (i.y + i.sprite.y - b) / (i.x + i.sprite.x - a),
        c = d * (this.x + this.sprite.x) + (b - a * d) - this.y - this.sprite.y,
        e = this.r + i.r,
        f = d * d + 1,
        g = 2 * d * c,
        h = g * g - 4 * f * (c * c - e * e),
        e = (-g - Math.sqrt(h)) / (2 * f),
        f = (-g + Math.sqrt(h)) / (2 * f),
        g = d * e + c,
        d = d * f + c;
    e += this.x + this.sprite.x;
    f += this.x + this.sprite.x;
    g += this.y + this.sprite.y;
    d += this.y + this.sprite.y;
    if (!e.isBetween(a, i.x + i.sprite.x) || !g.isBetween(b, i.y + i.sprite.y)) {
        g = e = null
    }
    if (!f.isBetween(a, i.x + i.sprite.x) || !d.isBetween(b, i.y + i.sprite.y)) {
        d = f = null
    }
    return (e === null || isNaN(e)) && (f === null || isNaN(f)) && (g === null || isNaN(g)) && (d === null || isNaN(d)) ? null : {
        ox1: e,
        oy1: g,
        ox2: f,
        oy2: d
    }
};
MLE = MLE || {};
MLE.TouchEventTarget = function(a) {
    this.sprite = a;
    this.isInside = false;
    this.collisionBox = {
        x: 0,
        y: 0,
        w: a.rect.w,
        h: a.rect.h
    }
};
MLE.TouchEventTarget.prototype.init = function() {};
MLE.TouchEventTarget.prototype.update = function() {
    var i = MLE.mouse.pressed,
        a = MLE.mouse.released,
        b = MLE.mouse.isDown,
        d = MLE.mouse.x,
        c = MLE.mouse.y,
        e = this.getCumulX(),
        f = this.getCumulY(),
        g = this.collisionBox.w,
        h = this.collisionBox.h,
        d = d > e && d < e + g && c > f && c < f + h ? true : false;
    if (b && d && !this.isInside) {
        this.isInside = true, this.onIn()
    }
    if (i && d) {
        this.onDown()
    }
    if (b && !d && this.isInside) {
        this.isInside = false, this.onOut()
    }
    if (a && d) {
        this.onUp()
    }
};
MLE.TouchEventTarget.prototype.drawDebug = function() {
    MLE.context.fillStyle = "#ffff00";
    MLE.context.globalAlpha = 0.5;
    MLE.context.fillRect(this.sprite.x - this.sprite.pivotX + this.collisionBox.x - MLE.cameraX, this.sprite.y - this.sprite.pivotY + this.collisionBox.y - MLE.cameraY, this.collisionBox.w, this.collisionBox.h);
    MLE.context.globalAlpha = 1
};
MLE.TouchEventTarget.prototype.setArea = function(c, e, a, b) {
    this.collisionBox.x = c;
    this.collisionBox.y = e;
    this.collisionBox.w = a;
    this.collisionBox.h = b
};
MLE.TouchEventTarget.prototype.onDown = function() {
    console.log("onDown")
};
MLE.TouchEventTarget.prototype.onUp = function() {
    console.log("onUp")
};
MLE.TouchEventTarget.prototype.onOut = function() {
    console.log("onOut")
};
MLE.TouchEventTarget.prototype.onIn = function() {};
MLE.TouchEventTarget.prototype.getCumulX = function() {
    for (var a = this.sprite.x - this.sprite.pivotX + this.collisionBox.x - MLE.cameraX, b = this.sprite; b.grouped;) {
        b = b.grouped, a += b.x - b.pivotX
    }
    return a
};
MLE.TouchEventTarget.prototype.getCumulY = function() {
    for (var a = this.sprite.y - this.sprite.pivotY + this.collisionBox.y - MLE.cameraY, b = this.sprite; b.grouped;) {
        b = b.grouped, a += b.y - b.pivotY
    }
    return a
};
MLE = MLE || {};
MLE.Pin = function(c, e, a, b) {
    this.spriteA = c;
    this.spriteB = e;
    this.offsetX = a;
    this.offsetY = b
};
MLE.Pin.prototype.update = function() {
    this.spriteA.x = this.spriteB.x + this.offsetX;
    this.spriteA.y = this.spriteB.y + this.offsetY
};
MLE.BoxCollision = function(d, e, a, c, b) {
    this.sprite = d;
    this.x = e;
    this.y = a;
    this.w = c;
    this.h = b
};
MLE.BoxCollision.prototype = {
    checkAgainst: function(a) {
        return !(this.x + this.sprite.x >= a.x + a.sprite.x + a.w || this.x + this.sprite.x + this.w <= a.x + a.sprite.x || this.y + this.sprite.y >= a.y + a.sprite.y + a.h || this.y + this.sprite.y + this.h <= a.y + a.sprite.y)
    },
    drawDebug: function() {
        MLE.context.fillStyle = "rgba(0,255,255,0.6)";
        MLE.context.fillRect(this.x + this.sprite.x - MLE.cameraX, this.y + this.sprite.y - MLE.cameraY, this.w, this.h)
    }
};
MLE = MLE || {};
MLE.ImageAnim = function(a) {
    this.sprite = a;
    this.frameW = this.sprite.rect.w;
    this.frameH = this.sprite.rect.h;
    this.anims = {};
    this.currentAnim = null;
    this.stopped = false;
    this.cumulTime = 0
};
MLE.ImageAnim.prototype.addAnim = function(b, c, a) {
    this.anims[b] = {
        fps: a,
        frames: c,
        currentFrame: 0
    };
    this.currentFrame = this.anims[b]
};
MLE.ImageAnim.prototype.gotoAndPlay = function(b, c) {
    if (c) {
        this.currentAnim = this.anims[c]
    }
    var a;
    this.stopped = false;
    this.currentAnim.currentFrame = b || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.ImageAnim.prototype.gotoAndStop = function(b, c) {
    if (c) {
        this.currentAnim = this.anims[c]
    }
    var a;
    this.stopped = true;
    this.currentAnim.currentFrame = b || 0;
    this.cumulTime = 0;
    this.updateSpriteRect()
};
MLE.ImageAnim.prototype.update = function() {
    if (!(this.stopped || this.currentAnim === null)) {
        if (this.cumulTime += MLE.tick, this.cumulTime > 1000 / this.currentAnim.fps) {
            this.cumulTime -= 1000 / this.currentAnim.fps;
            if (this.currentAnim.currentFrame === this.currentAnim.frames.length - 1 && (this.onLoop(this.currentAnim), this.stopOnLoop)) {
                this.stopped = true;
                this.updateSpriteRect();
                return
            }
            this.currentAnim.currentFrame = (this.currentAnim.currentFrame + 1) % this.currentAnim.frames.length;
            this.onFrameChange(this.currentAnim, this.currentAnim.currentFrame);
            this.updateSpriteRect()
        }
    }
};
MLE.ImageAnim.prototype.updateSpriteRect = function() {
    this.sprite.changeBitmap(this.currentAnim.frames[this.currentAnim.currentFrame])
};
MLE.ImageAnim.prototype.onFrameChange = function() {};
MLE.ImageAnim.prototype.onLoop = function() {};
MLE.ImageAnim.prototype.isPlaying = function(a) {
    return this.currentAnim === this.anims[a] && this.anims[a] ? true : false
};
MouseInput = function() {
    this.screenY = this.screenX = this.y = this.x = 0;
    this.isDown = false;
    this.event = null;
    this.pressed = this.released = this._pressed = this._released = this.useTouch = false
};
MouseInput.prototype = {
    init: function(a) {
        this.domElement = a;
        if ("ontouchstart" in document.documentElement) {
            this.useTouch = true
        }
        this.startListening()
    },
    startListening: function() {
        this.useTouch === true ? (MLE.wrapper.addEventListener("touchstart", this.touchStart.bindd(this), false), MLE.wrapper.addEventListener("touchmove", this.touchMove.bindd(this), false), MLE.wrapper.addEventListener("touchend", this.touchEnd.bindd(this), false)) : (MLE.wrapper.addEventListener("mousedown", this.onMouseDown.bindd(this), false), MLE.wrapper.addEventListener("mousemove", this.onMouseMove.bindd(this), false), MLE.wrapper.addEventListener("mouseup", this.onMouseUp.bindd(this), false))
    },
    stopListening: function() {
        this.useTouch === true ? (MLE.wrapper.removeEventListener("touchmove", this.touchMove.bindd(this)), MLE.wrapper.removeEventListener("touchend", this.touchEnd.bindd(this))) : (MLE.wrapper.removeEventListener("mousemove", this.onMouseMove.bindd(this)), MLE.wrapper.removeEventListener("mouseup", this.onMouseUp.bindd(this)));
        window.addEventListener("focus", this.reset.bindd(this), false);
        window.addEventListener("blur", this.reset.bindd(this), false)
    },
    destroy: function() {
        this.stopListening()
    },
    update: function() {
        this.released = this._released;
        this.pressed = this._pressed;
        this._pressed = this._released = false;
        var a = wrapper.style.width.slice(0, wrapper.style.width.length - 2) / MLE.width,
            b = wrapper.style.height.slice(0, wrapper.style.height.length - 2) / MLE.height;
        a === 0 && (a = b = 1);
        MLE.mouseScale = a;
        this.x = Math.floor((this.screenX - wrapper.offsetLeft) / a);
        this.y = Math.floor((this.screenY - wrapper.offsetTop) / b)
    },
    onMouseMove: function(a) {
        a.preventDefault();
        this.screenX = a.pageX;
        this.screenY = a.pageY
    },
    onMouseDown: function(a) {
        a.preventDefault();
        this._pressed = this.isDown = true;
        this.event = a;
        this.screenX = a.pageX;
        this.screenY = a.pageY;
        this.update();
        MLE.downCallbacks();
        this._pressed = this.isDown = true;
        this.event = a;
        this.screenX = a.pageX;
        this.screenY = a.pageY
    },
    onMouseUp: function(a) {
        if (this.isDown === true) {
            this._released = true, this.isDown = false, this.event = a, this.update(), MLE.upCallbacks(), this._released = true, this.isDown = false, this.event = a
        }
    },
    touchStart: function(a) {
        a.preventDefault();
        this._pressed = this.isDown = true;
        this.screenX = a.targetTouches[0].pageX;
        this.screenY = a.targetTouches[0].pageY;
        this.update();
        MLE.downCallbacks();
        this._pressed = this.isDown = true;
        this.screenX = a.targetTouches[0].pageX;
        this.screenY = a.targetTouches[0].pageY
    },
    touchMove: function(a) {
        a.preventDefault();
        this.screenX = a.targetTouches[0].pageX;
        this.screenY = a.targetTouches[0].pageY
    },
    touchEnd: function() {
        this.isDown = false;
        this._released = true;
        this.update();
        MLE.upCallbacks();
        this.isDown = false;
        this._released = true
    },
    clickEnd: function() {
        gotoSpilSite()
    },
    reset: function() {
        console.log("RESET!!!");
        this.screenY = this.screenX = this.y = this.x = 0;
        this.isDown = false;
        this.event = null;
        this.pressed = this.released = this._pressed = this._released = this.useTouch = false
    }
};
KeyboardInput = function() {
    this.key = 0;
    this._released = this._pressed = this.released = this.pressed = this.hasKeyboard = this.isDown = false
};
KeyboardInput.prototype = {
    init: function() {
        if ("onkeyup" in document.documentElement) {
            this.hasKeyboard = true, this.startListening()
        }
    },
    startListening: function() {
        document.body.addEventListener("keyup", this.keyUp.bindd(this), false);
        document.body.addEventListener("keydown", this.keyDown.bindd(this), false)
    },
    keyDown: function(a) {
        if (!(this.key == -1 && a.keyCode == 37) && !(this.key == 1 && a.keyCode == 39)) {
            if (a.keyCode == 37) {
                this.key = -1, this.isDown = this._pressed = true
            } else {
                if (a.keyCode == 39) {
                    this.key = 1, this.isDown = this._pressed = true
                }
            }
        }
    },
    keyUp: function(a) {
        this.key == -1 && a.keyCode == 37 ? (this.key = 0, this._released = true, this.isDown = false) : this.key == 1 && a.keyCode == 39 ? (this.key = 0, this._released = true, this.isDown = false) : a.keyCode > 48 && a.keyCode < 56 ? (console.log("Produkuje powerupa", a.keyCode - 48), gameScene && gameScene.spawnPowerUp(Math.random() * (MLE.width - getConst(200)) + getConst(100), Math.random() * getConst(500) + getConst(75), -1, a.keyCode - 48, true)) : a.keyCode === 48 && (console.log("Produkuje rep", a.keyCode - 48), gameScene && gameScene.spawnRepairPart(Math.random() * (MLE.width - getConst(200)) + getConst(100), Math.random() * getConst(500) + getConst(75), -1, true))
    },
    update: function() {
        this.released = this._released;
        this.pressed = this._pressed;
        this._pressed = this._released = false
    }
};
MLE = MLE || {};
MLE.FaceFont = function() {};
MLE.FaceFont.prototype.loadFont = function(c) {
    var e = document.createElement("canvas");
    e.width = 64;
    e.height = 64;
    var a = e.getContext("2d"),
        b = setInterval(function() {
            a.clearRect(0, 0, 64, 64);
            a.font = "32px " + c;
            a.fillStyle = "#ffffff";
            a.fillText("test", 32, 32);
            MLE.context.drawImage(e, 100, 100);
            var d = MLE.Util.isCanvasEmpty(e);
            a.font !== "10px sans-serif" && !d && (this.onLoad(c), clearInterval(b))
        }.bindd(this), 500)
};
MLE.FaceFont.prototype.onLoad = function() {};
var JSON;
JSON || (JSON = {});
(function() {
    function a(a) {
        return a < 10 ? "0" + a : a
    }

    function b(a) {
        d.lastIndex = 0;
        return d.test(a) ? '"' + a.replace(d, function(a) {
            var b = h[a];
            return typeof b === "string" ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + a + '"'
    }

    function c(a, e) {
        var d, h, m, o, p = f,
            k, j = e[a];
        j && typeof j === "object" && typeof j.toJSON === "function" && (j = j.toJSON(a));
        typeof i === "function" && (j = i.call(e, a, j));
        switch (typeof j) {
            case "string":
                return b(j);
            case "number":
                return isFinite(j) ? String(j) : "null";
            case "boolean":
            case "null":
                return String(j);
            case "object":
                if (!j) {
                    return "null"
                }
                f += g;
                k = [];
                if (Object.prototype.toString.apply(j) === "[object Array]") {
                    o = j.length;
                    for (d = 0; d < o; d += 1) {
                        k[d] = c(d, j) || "null"
                    }
                    m = k.length === 0 ? "[]" : f ? "[\n" + f + k.join(",\n" + f) + "\n" + p + "]" : "[" + k.join(",") + "]";
                    f = p;
                    return m
                }
                if (i && typeof i === "object") {
                    o = i.length;
                    for (d = 0; d < o; d += 1) {
                        typeof i[d] === "string" && (h = i[d], (m = c(h, j)) && k.push(b(h) + (f ? ": " : ":") + m))
                    }
                } else {
                    for (h in j) {
                        Object.prototype.hasOwnProperty.call(j, h) && (m = c(h, j)) && k.push(b(h) + (f ? ": " : ":") + m)
                    }
                }
                m = k.length === 0 ? "{}" : f ? "{\n" + f + k.join(",\n" + f) + "\n" + p + "}" : "{" + k.join(",") + "}";
                f = p;
                return m
        }
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function() {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "Z" : null
        }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
            return this.valueOf()
        }
    }
    var e = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        d = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        f, g, h = {
            "\u0008": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\u000c": "\\f",
            "\r": "\\r",
            '"': '\\"',
            "\\": "\\\\"
        },
        i;
    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function(a, b, e) {
            var d;
            g = f = "";
            if (typeof e === "number") {
                for (d = 0; d < e; d += 1) {
                    g += " "
                }
            } else {
                typeof e === "string" && (g = e)
            }
            if ((i = b) && typeof b !== "function" && (typeof b !== "object" || typeof b.length !== "number")) {
                throw Error("JSON.stringify")
            }
            return c("", {
                "": a
            })
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function(a, b) {
            function c(a, e) {
                var d, f, g = a[e];
                if (g && typeof g === "object") {
                    for (d in g) {
                        Object.prototype.hasOwnProperty.call(g, d) && (f = c(g, d), f !== void 0 ? g[d] = f : delete g[d])
                    }
                }
                return b.call(a, e, g)
            }
            var d, a = String(a);
            e.lastIndex = 0;
            e.test(a) && (a = a.replace(e, function(a) {
                return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
            }));
            if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                return d = eval("(" + a + ")"), typeof b === "function" ? c({
                    "": d
                }, "") : d
            }
            throw new SyntaxError("JSON.parse")
        }
    }
})();
var createjs = this.createjs = this.createjs || {};
(function() {
    var a = function() {
            this.initialize()
        },
        b = a.prototype;
    a.initialize = function(c) {
        c.addEventListener = b.addEventListener;
        c.removeEventListener = b.removeEventListener;
        c.removeAllEventListeners = b.removeAllEventListeners;
        c.hasEventListener = b.hasEventListener;
        c.dispatchEvent = b.dispatchEvent
    };
    b._listeners = null;
    b.initialize = function() {};
    b.addEventListener = function(f, j) {
        var c = this._listeners;
        c ? this.removeEventListener(f, j) : c = this._listeners = {};
        var d = c[f];
        d || (d = c[f] = []);
        d.push(j);
        return j
    };
    b.removeEventListener = function(h, o) {
        var c = this._listeners;
        if (c) {
            var d = c[h];
            if (d) {
                for (var f = 0, g = d.length; f < g; f++) {
                    if (d[f] == o) {
                        1 == g ? delete c[h] : d.splice(f, 1);
                        break
                    }
                }
            }
        }
    };
    b.removeAllEventListeners = function(c) {
        c ? this._listeners && delete this._listeners[c] : this._listeners = null
    };
    b.dispatchEvent = function(g, i) {
        var h = false,
            q = this._listeners;
        if (g && q) {
            "string" == typeof g && (g = {
                type: g
            });
            g.target = i || this;
            q = q[g.type];
            if (!q) {
                return h
            }
            for (var q = q.slice(), c = 0, d = q.length; c < d; c++) {
                var f = q[c];
                f instanceof Function ? h = h || f.apply(null, [g]) : f.handleEvent && (h = h || f.handleEvent(g))
            }
        }
        return !!h
    };
    b.hasEventListener = function(c) {
        var d = this._listeners;
        return !(!d || !d[c])
    };
    b.toString = function() {
        return "[EventDispatcher]"
    };
    createjs.EventDispatcher = a
})();
this.createjs = this.createjs || {};
(function() {
    var a = function(d, h, c) {
            this.initialize(d, h, c)
        },
        b = a.prototype;
    a.NONE = 0;
    a.LOOP = 1;
    a.REVERSE = 2;
    a.IGNORE = {};
    a._tweens = [];
    a._plugins = {};
    a.get = function(c, e, d, f) {
        f && a.removeTweens(c);
        return new a(c, e, d)
    };
    a.tick = function(c, e) {
        for (var d = a._tweens.slice(), f = d.length - 1; 0 <= f; f--) {
            var g = d[f];
            e && !g.ignoreGlobalPause || g._paused || g.tick(g._useTicks ? 1 : c)
        }
    };
    createjs.Ticker && createjs.Ticker.addListener(a, false);
    a.removeTweens = function(c) {
        if (c.tweenjs_count) {
            for (var e = a._tweens, d = e.length - 1; 0 <= d; d--) {
                e[d]._target == c && (e[d]._paused = true, e.splice(d, 1))
            }
            c.tweenjs_count = 0
        }
    };
    a.hasActiveTweens = function(c) {
        return c ? c.tweenjs_count : a._tweens && a._tweens.length
    };
    a.installPlugin = function(q, c) {
        var t = q.priority;
        null == t && (q.priority = t = 0);
        for (var d = 0, e = c.length, f = a._plugins; d < e; d++) {
            var g = c[d];
            if (f[g]) {
                for (var i = f[g], h = 0, l = i.length; h < l && !(t < i[h].priority); h++) {}
                f[g].splice(h, 0, q)
            } else {
                f[g] = [q]
            }
        }
    };
    a._register = function(c, e) {
        var d = c._target;
        e ? (d && (d.tweenjs_count = d.tweenjs_count ? d.tweenjs_count + 1 : 1), a._tweens.push(c)) : (d && d.tweenjs_count--, d = a._tweens.indexOf(c), -1 != d && a._tweens.splice(d, 1))
    };
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b.ignoreGlobalPause = false;
    b.loop = false;
    b.duration = 0;
    b.pluginData = null;
    b.onChange = null;
    b.change = null;
    b.target = null;
    b.position = null;
    b._paused = false;
    b._curQueueProps = null;
    b._initQueueProps = null;
    b._steps = null;
    b._actions = null;
    b._prevPosition = 0;
    b._stepPosition = 0;
    b._prevPos = -1;
    b._target = null;
    b._useTicks = false;
    b.initialize = function(c, e, d) {
        this.target = this._target = c;
        e && (this._useTicks = e.useTicks, this.ignoreGlobalPause = e.ignoreGlobalPause, this.loop = e.loop, this.onChange = e.onChange, e.override && a.removeTweens(c));
        this.pluginData = d || {};
        this._curQueueProps = {};
        this._initQueueProps = {};
        this._steps = [];
        this._actions = [];
        e && e.paused ? this._paused = true : a._register(this, true);
        e && null != e.position && this.setPosition(e.position, a.NONE)
    };
    b.wait = function(c) {
        if (null == c || 0 >= c) {
            return this
        }
        var d = this._cloneProps(this._curQueueProps);
        return this._addStep({
            d: c,
            p0: d,
            e: this._linearEase,
            p1: d
        })
    };
    b.to = function(d, h, c) {
        if (isNaN(h) || 0 > h) {
            h = 0
        }
        return this._addStep({
            d: h || 0,
            p0: this._cloneProps(this._curQueueProps),
            e: c,
            p1: this._cloneProps(this._appendQueueProps(d))
        })
    };
    b.call = function(d, h, c) {
        return this._addAction({
            f: d,
            p: h ? h : [this],
            o: c ? c : this._target
        })
    };
    b.set = function(c, d) {
        return this._addAction({
            f: this._set,
            o: this,
            p: [c, d ? d : this._target]
        })
    };
    b.play = function(c) {
        return this.call(c.setPaused, [false], c)
    };
    b.pause = function(c) {
        c || (c = this);
        return this.call(c.setPaused, [true], c)
    };
    b.setPosition = function(g, i) {
        0 > g && (g = 0);
        null == i && (i = 1);
        var h = g,
            q = false;
        h >= this.duration && (this.loop ? h %= this.duration : (h = this.duration, q = true));
        if (h == this._prevPos) {
            return q
        }
        var c = this._prevPos;
        this.position = this._prevPos = h;
        this._prevPosition = g;
        if (this._target) {
            if (q) {
                this._updateTargetProps(null, 1)
            } else {
                if (0 < this._steps.length) {
                    for (var d = 0, f = this._steps.length; d < f && !(this._steps[d].t > h); d++) {}
                    d = this._steps[d - 1];
                    this._updateTargetProps(d, (this._stepPosition = h - d.t) / d.d)
                }
            }
        }
        0 != i && 0 < this._actions.length && (this._useTicks ? this._runActions(h, h) : 1 == i && h < c ? (c != this.duration && this._runActions(c, this.duration), this._runActions(0, h, true)) : this._runActions(c, h));
        q && this.setPaused(true);
        this.onChange && this.onChange(this);
        this.dispatchEvent("change");
        return q
    };
    b.tick = function(c) {
        this._paused || this.setPosition(this._prevPosition + c)
    };
    b.setPaused = function(c) {
        this._paused = !!c;
        a._register(this, !c);
        return this
    };
    b.w = b.wait;
    b.t = b.to;
    b.c = b.call;
    b.s = b.set;
    b.toString = function() {
        return "[Tween]"
    };
    b.clone = function() {
        throw "Tween can not be cloned."
    };
    b._updateTargetProps = function(q, c) {
        var t, d, e, f;
        !q && 1 == c ? t = d = this._curQueueProps : (q.e && (c = q.e(c, 0, 1, 1)), t = q.p0, d = q.p1);
        for (n in this._initQueueProps) {
            if (null == (e = t[n])) {
                t[n] = e = this._initQueueProps[n]
            }
            if (null == (f = d[n])) {
                d[n] = f = e
            }
            e = e == f || 0 == c || 1 == c || "number" != typeof e ? 1 == c ? f : e : e + (f - e) * c;
            var g = false;
            if (f = a._plugins[n]) {
                for (var i = 0, h = f.length; i < h; i++) {
                    var l = f[i].tween(this, n, e, t, d, c, !!q && t == d, !q);
                    l == a.IGNORE ? g = true : e = l
                }
            }
            g || (this._target[n] = e)
        }
    };
    b._runActions = function(q, u, c) {
        var d = q,
            f = u,
            g = -1,
            h = this._actions.length,
            l = 1;
        for (q > u && (d = u, f = q, g = h, h = l = -1);
            (g += l) != h;) {
            var u = this._actions[g],
                i = u.t;
            (i == f || i > d && i < f || c && i == q) && u.f.apply(u.o, u.p)
        }
    };
    b._appendQueueProps = function(e) {
        var i, h, c, d, f, g;
        for (g in e) {
            if (void 0 === this._initQueueProps[g]) {
                h = this._target[g];
                if (i = a._plugins[g]) {
                    c = 0;
                    for (d = i.length; c < d; c++) {
                        h = i[c].init(this, g, h)
                    }
                }
                this._initQueueProps[g] = void 0 === h ? null : h
            } else {
                h = this._curQueueProps[g]
            }
            if (i = a._plugins[g]) {
                f = f || {};
                c = 0;
                for (d = i.length; c < d; c++) {
                    i[c].step && i[c].step(this, g, h, e[g], f)
                }
            }
            this._curQueueProps[g] = e[g]
        }
        f && this._appendQueueProps(f);
        return this._curQueueProps
    };
    b._cloneProps = function(d) {
        var h = {},
            c;
        for (c in d) {
            h[c] = d[c]
        }
        return h
    };
    b._addStep = function(c) {
        0 < c.d && (this._steps.push(c), c.t = this.duration, this.duration += c.d);
        return this
    };
    b._addAction = function(c) {
        c.t = this.duration;
        this._actions.push(c);
        return this
    };
    b._set = function(d, h) {
        for (var c in d) {
            h[c] = d[c]
        }
    };
    createjs.Tween = a
})();
this.createjs = this.createjs || {};
(function() {
    var a = function(d, h, c) {
            this.initialize(d, h, c)
        },
        b = a.prototype;
    b.ignoreGlobalPause = false;
    b.duration = 0;
    b.loop = false;
    b.onChange = null;
    b.position = null;
    b._paused = false;
    b._tweens = null;
    b._labels = null;
    b._prevPosition = 0;
    b._prevPos = -1;
    b._useTicks = false;
    b.initialize = function(d, h, c) {
        this._tweens = [];
        c && (this._useTicks = c.useTicks, this.loop = c.loop, this.ignoreGlobalPause = c.ignoreGlobalPause, this.onChange = c.onChange);
        d && this.addTween.apply(this, d);
        this.setLabels(h);
        c && c.paused ? this._paused = true : createjs.Tween._register(this, true);
        c && null != c.position && this.setPosition(c.position, createjs.Tween.NONE)
    };
    b.addTween = function(d) {
        var h = arguments.length;
        if (1 < h) {
            for (var c = 0; c < h; c++) {
                this.addTween(arguments[c])
            }
            return arguments[0]
        }
        if (0 == h) {
            return null
        }
        this.removeTween(d);
        this._tweens.push(d);
        d.setPaused(true);
        d._paused = false;
        d._useTicks = this._useTicks;
        d.duration > this.duration && (this.duration = d.duration);
        0 <= this._prevPos && d.setPosition(this._prevPos, createjs.Tween.NONE);
        return d
    };
    b.removeTween = function(f) {
        var j = arguments.length;
        if (1 < j) {
            for (var c = true, d = 0; d < j; d++) {
                c = c && this.removeTween(arguments[d])
            }
            return c
        }
        if (0 == j) {
            return false
        }
        j = this._tweens.indexOf(f);
        return -1 != j ? (this._tweens.splice(j, 1), f.duration >= this.duration && this.updateDuration(), true) : false
    };
    b.addLabel = function(c, d) {
        this._labels[c] = d
    };
    b.setLabels = function(c) {
        this._labels = c ? c : {}
    };
    b.gotoAndPlay = function(c) {
        this.setPaused(false);
        this._goto(c)
    };
    b.gotoAndStop = function(c) {
        this.setPaused(true);
        this._goto(c)
    };
    b.setPosition = function(h, o) {
        0 > h && (h = 0);
        var c = this.loop ? h % this.duration : h,
            d = !this.loop && h >= this.duration;
        if (c == this._prevPos) {
            return d
        }
        this._prevPosition = h;
        this.position = this._prevPos = c;
        for (var f = 0, g = this._tweens.length; f < g; f++) {
            if (this._tweens[f].setPosition(c, o), c != this._prevPos) {
                return false
            }
        }
        d && this.setPaused(true);
        this.onChange && this.onChange(this);
        return d
    };
    b.setPaused = function(c) {
        this._paused = !!c;
        createjs.Tween._register(this, !c)
    };
    b.updateDuration = function() {
        for (var c = this.duration = 0, d = this._tweens.length; c < d; c++) {
            tween = this._tweens[c], tween.duration > this.duration && (this.duration = tween.duration)
        }
    };
    b.tick = function(c) {
        this.setPosition(this._prevPosition + c)
    };
    b.resolve = function(c) {
        var d = parseFloat(c);
        isNaN(d) && (d = this._labels[c]);
        return d
    };
    b.toString = function() {
        return "[Timeline]"
    };
    b.clone = function() {
        throw "Timeline can not be cloned."
    };
    b._goto = function(c) {
        c = this.resolve(c);
        null != c && this.setPosition(c)
    };
    createjs.Timeline = a
})();
this.createjs = this.createjs || {};
(function() {
    var a = function() {
        throw "Ease cannot be instantiated."
    };
    a.linear = function(b) {
        return b
    };
    a.none = a.linear;
    a.get = function(b) {
        -1 > b && (b = -1);
        1 < b && (b = 1);
        return function(c) {
            return 0 == b ? c : 0 > b ? c * (c * -b + 1 + b) : c * ((2 - c) * b + (1 - b))
        }
    };
    a.getPowIn = function(b) {
        return function(c) {
            return Math.pow(c, b)
        }
    };
    a.getPowOut = function(b) {
        return function(c) {
            return 1 - Math.pow(1 - c, b)
        }
    };
    a.getPowInOut = function(b) {
        return function(c) {
            return 1 > (c *= 2) ? 0.5 * Math.pow(c, b) : 1 - 0.5 * Math.abs(Math.pow(2 - c, b))
        }
    };
    a.quadIn = a.getPowIn(2);
    a.quadOut = a.getPowOut(2);
    a.quadInOut = a.getPowInOut(2);
    a.cubicIn = a.getPowIn(3);
    a.cubicOut = a.getPowOut(3);
    a.cubicInOut = a.getPowInOut(3);
    a.quartIn = a.getPowIn(4);
    a.quartOut = a.getPowOut(4);
    a.quartInOut = a.getPowInOut(4);
    a.quintIn = a.getPowIn(5);
    a.quintOut = a.getPowOut(5);
    a.quintInOut = a.getPowInOut(5);
    a.sineIn = function(b) {
        return 1 - Math.cos(b * Math.PI / 2)
    };
    a.sineOut = function(b) {
        return Math.sin(b * Math.PI / 2)
    };
    a.sineInOut = function(b) {
        return -0.5 * (Math.cos(Math.PI * b) - 1)
    };
    a.getBackIn = function(b) {
        return function(c) {
            return c * c * ((b + 1) * c - b)
        }
    };
    a.backIn = a.getBackIn(1.7);
    a.getBackOut = function(b) {
        return function(c) {
            return --c * c * ((b + 1) * c + b) + 1
        }
    };
    a.backOut = a.getBackOut(1.7);
    a.getBackInOut = function(b) {
        b *= 1.525;
        return function(c) {
            return 1 > (c *= 2) ? 0.5 * c * c * ((b + 1) * c - b) : 0.5 * ((c -= 2) * c * ((b + 1) * c + b) + 2)
        }
    };
    a.backInOut = a.getBackInOut(1.7);
    a.circIn = function(b) {
        return -(Math.sqrt(1 - b * b) - 1)
    };
    a.circOut = function(b) {
        return Math.sqrt(1 - --b * b)
    };
    a.circInOut = function(b) {
        return 1 > (b *= 2) ? -0.5 * (Math.sqrt(1 - b * b) - 1) : 0.5 * (Math.sqrt(1 - (b -= 2) * b) + 1)
    };
    a.bounceIn = function(b) {
        return 1 - a.bounceOut(1 - b)
    };
    a.bounceOut = function(b) {
        return b < 1 / 2.75 ? 7.5625 * b * b : b < 2 / 2.75 ? 7.5625 * (b -= 1.5 / 2.75) * b + 0.75 : b < 2.5 / 2.75 ? 7.5625 * (b -= 2.25 / 2.75) * b + 0.9375 : 7.5625 * (b -= 2.625 / 2.75) * b + 0.984375
    };
    a.bounceInOut = function(b) {
        return 0.5 > b ? 0.5 * a.bounceIn(2 * b) : 0.5 * a.bounceOut(2 * b - 1) + 0.5
    };
    a.getElasticIn = function(e, b) {
        var c = 2 * Math.PI;
        return function(f) {
            if (0 == f || 1 == f) {
                return f
            }
            var d = b / c * Math.asin(1 / e);
            return -(e * Math.pow(2, 10 * (f -= 1)) * Math.sin((f - d) * c / b))
        }
    };
    a.elasticIn = a.getElasticIn(1, 0.3);
    a.getElasticOut = function(e, b) {
        var c = 2 * Math.PI;
        return function(f) {
            if (0 == f || 1 == f) {
                return f
            }
            var d = b / c * Math.asin(1 / e);
            return e * Math.pow(2, -10 * f) * Math.sin((f - d) * c / b) + 1
        }
    };
    a.elasticOut = a.getElasticOut(1, 0.3);
    a.getElasticInOut = function(e, b) {
        var c = 2 * Math.PI;
        return function(f) {
            var d = b / c * Math.asin(1 / e);
            return 1 > (f *= 2) ? -0.5 * e * Math.pow(2, 10 * (f -= 1)) * Math.sin((f - d) * c / b) : 0.5 * e * Math.pow(2, -10 * (f -= 1)) * Math.sin((f - d) * c / b) + 1
        }
    };
    a.elasticInOut = a.getElasticInOut(1, 0.3 * 1.5);
    createjs.Ease = a
})();
this.createjs = this.createjs || {};
(function() {
    var a = function() {
        throw "MotionGuidePlugin cannot be instantiated."
    };
    a.priority = 0;
    a.install = function() {
        createjs.Tween.installPlugin(a, ["guide", "x", "y", "rotation"]);
        return createjs.Tween.IGNORE
    };
    a.init = function(e, b, c) {
        e = e.target;
        e.hasOwnProperty("x") || (e.x = 0);
        e.hasOwnProperty("y") || (e.y = 0);
        e.hasOwnProperty("rotation") || (e.rotation = 0);
        return "guide" == b ? null : c
    };
    a.step = function(b, c, e, d, g) {
        if ("guide" != c) {
            return d
        }
        var i;
        d.hasOwnProperty("path") || (d.path = []);
        b = d.path;
        d.hasOwnProperty("end") || (d.end = 1);
        d.hasOwnProperty("start") || (d.start = e && e.hasOwnProperty("end") && e.path === b ? e.end : 0);
        if (d.hasOwnProperty("_segments") && d._length) {
            return d
        }
        e = b.length;
        if (6 <= e && 0 == (e - 2) % 4) {
            d._segments = [];
            d._length = 0;
            for (c = 2; c < e; c += 4) {
                for (var j = b[c - 2], m = b[c - 1], u = b[c + 0], q = b[c + 1], k = b[c + 2], v = b[c + 3], r = j, s = m, t, p, o = 0, h = [], l = 1; 10 >= l; l++) {
                    p = l / 10;
                    var f = 1 - p;
                    t = f * f * j + 2 * f * p * u + p * p * k;
                    p = f * f * m + 2 * f * p * q + p * p * v;
                    o += h[h.push(Math.sqrt((i = t - r) * i + (i = p - s) * i)) - 1];
                    r = t;
                    s = p
                }
                d._segments.push(o);
                d._segments.push(h);
                d._length += o
            }
        } else {
            throw "invalid 'path' data, please see documentation for valid paths"
        }
        i = d.orient;
        d.orient = false;
        a.calc(d, d.end, g);
        d.orient = i;
        return d
    };
    a.tween = function(d, h, c, b, e, f, g) {
        e = e.guide;
        if (void 0 == e || e === b.guide) {
            return c
        }
        e.lastRatio != f && (a.calc(e, (e.end - e.start) * (g ? e.end : f) + e.start, d.target), e.orient && (d.target.rotation += b.rotation || 0), e.lastRatio = f);
        return !e.orient && "rotation" == h ? c : d.target[h]
    };
    a.calc = function(d, g, i) {
        void 0 == d._segments && a.validate(d);
        void 0 == i && (i = {
            x: 0,
            y: 0,
            rotation: 0
        });
        for (var h = d._segments, b = d.path, c = d._length * g, e = h.length - 2, g = 0; c > h[g] && g < e;) {
            c -= h[g], g += 2
        }
        for (var h = h[g + 1], f = 0, e = h.length - 1; c > h[f] && f < e;) {
            c -= h[f], f++
        }
        c = f / ++e + c / (e * h[f]);
        g = 2 * g + 2;
        e = 1 - c;
        i.x = e * e * b[g - 2] + 2 * e * c * b[g + 0] + c * c * b[g + 2];
        i.y = e * e * b[g - 1] + 2 * e * c * b[g + 1] + c * c * b[g + 3];
        d.orient && (i.rotation = 57.2957795 * Math.atan2((b[g + 1] - b[g - 1]) * e + (b[g + 3] - b[g + 1]) * c, (b[g + 0] - b[g - 2]) * e + (b[g + 2] - b[g + 0]) * c));
        return i
    };
    createjs.MotionGuidePlugin = a
})();
(function() {
    var a = this.createjs = this.createjs || {},
        a = a.TweenJS = a.TweenJS || {};
    a.version = "0.4.0";
    a.buildDate = "Tue, 12 Feb 2013 21:09:02 GMT"
})();

function PxLoader(i) {
    i = i || {};
    if (i.statusInterval == null) {
        i.statusInterval = 5000
    }
    if (i.loggingDelay == null) {
        i.loggingDelay = 20000
    }
    if (i.noProgressTimeout == null) {
        i.noProgressTimeout = Infinity
    }
    var a = [],
        b = [],
        d, c = +new Date;
    this.add = function(j) {
        j.tags = new PxLoaderTags(j.tags);
        if (j.priority == null) {
            j.priority = Infinity
        }
        a.push({
            resource: j,
            status: 0
        })
    };
    this.addProgressListener = function(j, k) {
        b.push({
            callback: j,
            tags: new PxLoaderTags(k)
        })
    };
    this.addCompletionListener = function(j, k) {
        b.push({
            tags: new PxLoaderTags(k),
            callback: function(l) {
                l.completedCount === l.totalCount && j(l)
            }
        })
    };
    var e = function(j) {
        var j = j == null ? [] : Array.isArray(j) ? j : [j],
            k = function(l) {
                for (var l = l.resource, m = Infinity, o = 0; o < l.tags.length; o++) {
                    for (var p = 0; p < Math.min(j.length, m); p++) {
                        if (l.tags[o] == j[p] && p < m && (m = p, m === 0)) {
                            break
                        }
                        if (m === 0) {
                            break
                        }
                    }
                }
                return m
            };
        return function(l, m) {
            var o = k(l),
                p = k(m);
            return o < p ? -1 : o > p ? 1 : l.priority < m.priority ? -1 : l.priority > m.priority ? 1 : 0
        }
    };
    this.start = function(j) {
        d = +new Date;
        j = e(j);
        a.sort(j);
        for (var j = 0, k = a.length; j < k; j++) {
            var l = a[j];
            l.status = 1;
            l.resource.start(this)
        }
        setTimeout(f, 100)
    };
    var f = function() {
        for (var m = false, o = +new Date - c, p = o >= i.noProgressTimeout, o = o >= i.loggingDelay, j = 0, k = a.length; j < k; j++) {
            var l = a[j];
            if (l.status === 1 && (l.resource.checkStatus && l.resource.checkStatus(), l.status === 1)) {
                if (p) {
                    l.resource.onTimeout()
                } else {
                    m = true
                }
            }
        }
        o && m && h();
        m && setTimeout(f, i.statusInterval)
    };
    this.isBusy = function() {
        for (var j = 0, k = a.length; j < k; j++) {
            if (a[j].status === 0 || a[j].status === 1) {
                return true
            }
        }
        return false
    };
    var g = function(l, m) {
        for (var q = null, s = 0, u = a.length; s < u; s++) {
            if (a[s].resource === l) {
                q = a[s];
                break
            }
        }
        if (!(q == null || q.status !== 1)) {
            q.status = m;
            c = +new Date;
            s = 0;
            for (u = b.length; s < u; s++) {
                var w = b[s];
                if (w.tags.length === 0 || l.tags.contains(w.tags)) {
                    for (var p = q, o = 0, F = 0, G = 0, j = a.length; G < j; G++) {
                        var r = a[G],
                            k = false;
                        if (k = w.tags.length === 0 ? true : r.resource.tags.contains(w.tags)) {
                            F++, (r.status === 2 || r.status === 3 || r.status === 4) && o++
                        }
                    }
                    w.callback({
                        resource: p.resource,
                        loaded: p.status === 2,
                        error: p.status === 3,
                        timeout: p.status === 4,
                        completedCount: o,
                        totalCount: F
                    })
                }
            }
        }
    };
    this.onLoad = function(j) {
        g(j, 2)
    };
    this.onError = function(j) {
        g(j, 3)
    };
    this.onTimeout = function(j) {
        g(j, 4)
    };
    var h = this.log = function(j) {
        if (window.console) {
            var l = Math.round((+new Date - d) / 1000);
            window.console.log("PxLoader elapsed: " + l + " sec");
            for (var l = 0, k = a.length; l < k; l++) {
                var m = a[l];
                if (j || m.status === 1) {
                    var o = "PxLoader: #" + l + " " + m.resource.getName();
                    switch (m.status) {
                        case 0:
                            o += " (Not Started)";
                            break;
                        case 1:
                            o += " (Waiting)";
                            break;
                        case 2:
                            o += " (Loaded)";
                            break;
                        case 3:
                            o += " (Error)";
                            break;
                        case 4:
                            o += " (Timeout)"
                    }
                    m.resource.tags.length > 0 && (o += " Tags: [" + m.resource.tags.array.join(",") + "]");
                    window.console.log(o)
                }
            }
        }
    }
}

function PxLoaderTags(a) {
    this.array = [];
    this.object = {};
    this.value = null;
    this.length = 0;
    if (a !== null && a !== void 0) {
        if (Array.isArray(a)) {
            this.array = a
        } else {
            if (typeof a === "object") {
                for (var b in a) {
                    this.array.push(b)
                }
            } else {
                this.array.push(a), this.value = a
            }
        }
        this.length = this.array.length;
        for (a = 0; a < this.length; a++) {
            this.object[this.array[a]] = true
        }
    }
    this.contains = function(c) {
        if (this.length === 0 || c.length === 0) {
            return false
        } else {
            if (this.length === 1 && this.value !== null) {
                return c.length === 1 ? this.value === c.value : c.object.hasOwnProperty(this.value)
            } else {
                if (c.length < this.length) {
                    return c.contains(this)
                } else {
                    for (var d in this.object) {
                        if (c.object[d]) {
                            return true
                        }
                    }
                    return false
                }
            }
        }
    }
}
if (!Array.isArray) {
    Array.isArray = function(a) {
        return Object.prototype.toString.call(a) == "[object Array]"
    }
}

function PxLoaderImage(i, a, b) {
    var d = this,
        c = null;
    this.img = new Image;
    this.tags = a;
    this.priority = b;
    var e = function() {
            d.img.readyState == "complete" && (h(), c.onLoad(d))
        },
        f = function() {
            h();
            c.onLoad(d)
        },
        g = function() {
            h();
            c.onError(d)
        },
        h = function() {
            d.unbind("load", f);
            d.unbind("readystatechange", e);
            d.unbind("error", g)
        };
    this.start = function(j) {
        c = j;
        d.bind("load", f);
        d.bind("readystatechange", e);
        d.bind("error", g);
        d.img.src = i
    };
    this.checkStatus = function() {
        d.img.complete && (h(), c.onLoad(d))
    };
    this.onTimeout = function() {
        h();
        if (d.img.complete) {
            c.onLoad(d)
        } else {
            c.onTimeout(d)
        }
    };
    this.getName = function() {
        return i
    };
    this.bind = function(j, k) {
        d.img.addEventListener ? d.img.addEventListener(j, k, false) : d.img.attachEvent && d.img.attachEvent("on" + j, k)
    };
    this.unbind = function(j, k) {
        d.img.removeEventListener ? d.img.removeEventListener(j, k, false) : d.img.detachEvent && d.img.detachEvent("on" + j, k)
    }
}
PxLoader.prototype.addImage = function(b, c, a) {
    b = new PxLoaderImage(b, c, a);
    this.add(b);
    return b.img
};
var Director = function() {
    window.director = this;
    this.init()
};
Director.prototype.init = function() {
    window.game = this;
    this.menu = this.currentScene = new MainMenu;
    this.nextScene = null;
    this.rectAlpha = 1;
    this.rectColor = "#000000";
    createjs.Tween.get(this).to({
        rectAlpha: 0
    }, 500, createjs.Ease.sineInOut)
};
Director.prototype.update = function() {
    this.currentScene && this.currentScene.update()
};
Director.prototype.draw = function() {
    this.currentScene && this.currentScene.draw();
    if (this.nextScene) {
        this.currentScene = this.nextScene, this.nextScene = null, MLE.cameraX = MLE.cameraY = 0
    }
    if (this.rectAlpha > 0) {
        MLE.context.fillStyle = this.rectColor, MLE.context.globalAlpha = this.rectAlpha, MLE.context.fillRect(0, 0, MLE.width, MLE.height), MLE.context.globalAlpha = 1
    }
};
var PreLoaderScene = function() {
    this.init()
};
PreLoaderScene.prototype.init = function() {
    window.preloaderScene = this;
    this.logo = new MLE.Sprite("preload", 0, getConst(-100));
    this.logo.centerPivot();
    this.loadingBar1 = new MLE.Sprite("loadingBar1", 0, getConst(150));
    this.loadingBar1.centerPivot();
    this.loadingBar0 = new MLE.Sprite("loadingBar0", 0, getConst(150));
    this.loadingBar0.centerPivot();
    this.group = new MLE.Group;
    this.rimX = getConst(250);
    this.rimY = getConst(-105);
    this.rimR = getConst(17);
    this.loadingText = new MLE.Sprite("loadingTextAnim", 0, getConst(230));
    this.loadingText.centerPivot();
    this.loadingText.y = this.loadingText.y - 70;
    this.loadingTextFA = new MLE.FrameAnim(this.loadingText, 1, 4);
    this.loadingTextFA.addAnim("loading", [0, 1, 2, 3], 4);
    this.loadingTextFA.gotoAndPlay(0, "loading");
    this.group.addChild(this.logo);
    this.group.addChild(this.loadingText);
    this.group.x = MLE.width / 2;
    this.group.y = MLE.height / 2 + 100;
    this.fullBarsWidth = this.loadingBar0.rect.w;
    this.loaded = false;
    this.text = new MLE.TextSprite, this.text.text = "0%", this.text.x = 0, this.text.y = -140, this.text.baseline = "middle", this.text.adjustFontSize(250), this.group.addChild(this.text)
};
PreLoaderScene.prototype.update = function() {
    this.loadingTextFA.update();
    this.percent = MLE.loader.loadedResources / MLE.loader.allResources * 100;
    this.loadingBar0.rect.w = this.percent * this.fullBarsWidth / 100;
    this.text.text = Math.floor(this.percent) + "%";
    if (this.loadingBar0.rect.w === 0) {
        this.loadingBar0.rect.w = 1
    }
    if (this.percent === 100 && this.loaded === false && xiaomiisready === true) {
        this.loaded = true, createjs.Tween.get(this).call(function() {
            MLE.start()
        })
    }
};
PreLoaderScene.prototype.draw = function() {
    MLE.context.fillStyle = "#ffffff";
    MLE.context.fillRect(0, 0, MLE.width, MLE.height);
    this.group.draw()
};
var MenuButton = function(b, c, a) {
    this.init(b, c, a)
};
MenuButton.prototype.init = function(c, e, a) {
    this.group = new MLE.Group;
    c = c || "pause";
    this.buttonDown = this.buttonUp = null;
    this.touchEventTarget = new MLE.TouchEventTarget(this.group);
    this.touchEventTarget.onDown = this.onDown.bindd(this);
    this.touchEventTarget.onUp = this.onUp.bindd(this);
    this.touchEventTarget.onOut = this.onOut.bindd(this);
    this.buttonUp = new MLE.Sprite(c + "_normal", 0, 0);
    this.buttonDown = new MLE.Sprite(c + "_select", 0, 0);
    var c = this.buttonUp.rect.w,
        b = this.buttonUp.rect.h;
    this.touchEventTarget.setArea(-c / 2, -b / 2, c, b);
    this.buttonUp.centerPivot();
    this.buttonDown.centerPivot();
    this.buttonDown.alpha = 0;
    this.group.addChild(this.buttonUp);
    this.group.addChild(this.buttonDown);
    if (e) {
        this.text = new MLE.TextSprite, this.text.text = e, this.text.x = 0, this.text.y = 0, this.text.align = "center", this.text.baseline = "middle", this.text.adjustFontSize(250), this.group.addChild(this.text)
    }
    if (a) {
        this.comment = new MLE.TextSprite, this.comment.text = a, this.comment.x = 0, this.comment.y = 30, this.comment.size = 18, this.comment.align = "center", this.comment.baseline = "middle", this.comment.adjustFontSize(280), this.group.addChild(this.comment)
    }
    this.block = this.canBePressed = false
};
MenuButton.prototype.update = function() {
    this.block || this.touchEventTarget.update()
};
MenuButton.prototype.draw = function() {
    this.group.draw()
};
MenuButton.prototype.onUp = function() {
    if (this.canBePressed) {
        this.clickCallback(), this.canBePressed = false, this.buttonUp.alpha = 1, this.buttonDown.alpha = 0
    }
};
MenuButton.prototype.onDown = function() {
    this.canBePressed = true;
    this.buttonUp.alpha = 0;
    this.buttonDown.alpha = 1
};
MenuButton.prototype.onOut = function() {
    this.canBePressed = false;
    this.buttonUp.alpha = 1;
    this.buttonDown.alpha = 0
};
MenuButton.prototype.clickCallback = function() {
    console.log("ButtonClickCallback")
};
MenuButton.prototype.isDown = function() {
    return this.buttonUp.alpha === 1 ? false : true
};
var MainMenu = function() {
    window.mainMenu = this;
    this.init()
};
MainMenu.prototype.init = function() {
    this.bg = new MLE.Sprite("splash", 0, 0);
    this.playButton = new MenuButton("gift", currLang.startGame);
    this.playButton.group.x = MLE.width / 2;
    this.playButton.group.y = MLE.height / 2 + 270;
    this.playButton.clickCallback = this.startGameClicked.bindd(this);
    var a = 0;
    localStorage.WinterFantasyTossPaper2BestScore && (a = Number(localStorage.WinterFantasyTossPaper2BestScore));
    this.title = new MLE.TextSprite;
    this.title.text = "";
    this.title.x = MLE.width / 2;
    this.title.y = MLE.height / 2 - 150;
    this.title.align = "center";
    this.title.baseline = "middle";
    this.title.adjustFontSize(300);
    this.best = new MLE.TextSprite;
    this.best.text = currLang.best + ": " + a;
    this.best.x = MLE.width / 2;
    this.best.y = MLE.height / 2 - 75;
    this.best.align = "center";
    this.best.baseline = "middle";
    this.best.adjustFontSize(250);
    this.lvl = new MLE.TextSprite;
    this.lvl.text = currLang.selectLevel + ":";
    this.lvl.x = MLE.width / 2;
    this.lvl.y = MLE.height / 2 - 15;
    this.lvl.align = "center";
    this.lvl.baseline = "middle";
    this.lvl.adjustFontSize(250);
    this.lvl.alpha = 0;
    var b = MLE.height / 2 + 70;
    this.active = false;
    createjs.Tween.get(this).wait(750).call(function() {
        this.active = true
    }.bindd(this));
    this.playButton.clickCallback()
};
MainMenu.prototype.update = function() {
    this.active && (this.playButton.update())
};
MainMenu.prototype.draw = function() {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw()
};
MainMenu.prototype.startGameClicked = function() {
    SG_Hooks.start();
    this.playButton.block = true;
    createjs.Tween.get(window.director).to({
        rectAlpha: 1
    }, 250, createjs.Ease.sineInOut).call(function() {
        createjs.Tween._tweens = [];
        window.director.nextScene = new GameScene;
        createjs.Tween.get(window.director).to({
            rectAlpha: 0
        }, 500, createjs.Ease.sineInOut).call(function() {
            window.director.currentScene.startGame()
        })
    })
};
var ActiveRuleWindow = function() {
    this.init()
};
ActiveRuleWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("activeRule", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.closeWindowButton = new MenuButton("close", "");
    this.closeWindowButton.group.x = 570;
    this.closeWindowButton.group.y = 140;
    this.closeWindowButton.group.alpha = 0;
    this.closeWindowButton.clickCallback = this.closeClicked.bindd(this)
};
ActiveRuleWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.closeWindowButton.update())
};
ActiveRuleWindow.prototype.draw = function() {
    this.sprite.draw();
    this.closeWindowButton.draw()
};
ActiveRuleWindow.prototype.show = function() {
    gameScene.activeRuleShowing = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).wait(100).to({
        alpha: 1
    }, 350)
};
ActiveRuleWindow.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).to({
        alpha: 0
    }, 350)
};
ActiveRuleWindow.prototype.closeClicked = function() {
    this.hide();
    gameScene.resume();
    gameScene.activeRuleShowing = false
};
var PlayRuleWindow = function() {
    this.init()
};
PlayRuleWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("playRule", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.closeWindowButton = new MenuButton("close", "");
    this.closeWindowButton.group.x = 575;
    this.closeWindowButton.group.y = 110;
    this.closeWindowButton.group.alpha = 0;
    this.closeWindowButton.clickCallback = this.closeClicked.bindd(this)
};
PlayRuleWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.closeWindowButton.update())
};
PlayRuleWindow.prototype.draw = function() {
    this.sprite.draw();
    this.closeWindowButton.draw()
};
PlayRuleWindow.prototype.show = function() {
    gameScene.playRuleShowing = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).wait(100).to({
        alpha: 1
    }, 350)
};
PlayRuleWindow.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.closeWindowButton.group).to({
        alpha: 0
    }, 350)
};
PlayRuleWindow.prototype.closeClicked = function() {
    this.hide();
    gameScene.resume();
    gameScene.playRuleShowing = false
};
var GameScene = function() {
    window.gameScene = this;
    this.states = {
        IDLE: 0,
        AIMING: 1,
        BEFORE_WIND: 2,
        IN_AIR_UP: 3,
        IN_AIR: 4,
        FROM_WALL: 5,
        FROM_GROUND: 6
    };
    this.currentState = this.states.IDLE;
    this.ground = -1;
    this.maxHeight = getConst(50);
    var a = Math.floor(Math.random() * 59) / 10;
    this.windPower = getConst(1000) * a / 6;
    this.minScale = 0.35;
    this.init();
    this.gui.bestNumber < 2000 && (a = Math.floor(Math.random() * 8) / 10 + 0.1);
    this.windCloud.windFont.text = a + "";
    this.windCloud.windNumber = a;
    this.windPower = getConst(1000) * a / 6;
    // this.activeRuleButton = new MenuButton("active_rule", currLang.startGame);
    // this.activeRuleButton.group.x = MLE.width / 2 - 180;
    // this.activeRuleButton.group.y = MLE.height / 2 - 430;
    // this.activeRuleButton.clickCallback = this.activeRuleClicked.bindd(this);
    this.playRuleButton = new MenuButton("play_rule", currLang.startGame);
    this.playRuleButton.group.x = MLE.width / 2 + 180;
    this.playRuleButton.group.y = MLE.height / 2 - 430;
    this.playRuleButton.clickCallback = this.playRuleClicked.bindd(this);
    this.activeRuleWindow = new ActiveRuleWindow();
    this.playRuleWindow = new PlayRuleWindow()
};
GameScene.prototype.init = function() {
    this.bg = new MLE.Sprite("gameBackground", 0, 0);
    this.windCloud = new WindCloud;
    this.windCloud.group.x = 0;
    this.windCloud.group.y = getConst(650);
    this.aimArrow = new AimArrow;
    this.aimArrow.sprite.alpha = 0;
    this.ball = new Ball;
    this.pauseButton = new MenuButton("gift");
    this.pauseButton.group.x = MLE.width - 50;
    this.pauseButton.group.y = MLE.height - 50;
    this.pauseButton.clickCallback = this.pauseClicked.bindd(this);
    this.monsterFront = new MLE.Sprite("goalFront", 0, 0);
    this.monsterFront.centerPivot();
    this.monster = new Monster;
    this.monster.setPositionXY(MLE.width / 2, MLE.height / 2 + getConst(315));
    this.shadow = new MLE.Sprite("shadow", this.ball.startPosX, this.ball.startPosY + getConst(30));
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.gui = new GUI(1);
    this.hideShowFrontMonsters(false);
    this.gui.alpha = 1;
    this.aimArrow.rotationTween.setPosition(1350);
    this.monster.setScaleX(1.5);
    this.isEasyLevel = false;
    this.easyLevelCounter = this.easyLevel = 0;
    if (this.gui.bestNumber < 2000) {
        this.isEasyLevel = true
    }
    this.createNewBall();
    this.paused = false;
    this.activeRuleShowing = false;
    this.palyRuleShowing = false;
    this.shouldShowActiveRule = false;
    this.shouldShowPlayRule = false;
    // this.shouldShowGiftBoxWindow = false;
    // this.giftBoxShowing = false;
    // this.giftBoxWindow = new GiftBoxWindow();
    // this.giftCount = 0;
    // this.firstShowGift = true
};
GameScene.prototype.update = function() {
    // this.activeRuleButton.update();
    this.playRuleButton.update();
    this.activeRuleWindow.update();
    this.playRuleWindow.update();
    // this.giftBoxWindow.update();
    // if (this.firstShowGift && this.giftCount > 0 && !this.giftBoxShowing) {
    //     this.giftBoxWindow.show();
    //     this.firstShowGift = false;
    //     setTimeout(function() {
    //         gameScene.giftBoxWindow.light.show()
    //     }, 550)
    // }
    // if (this.shouldShowGiftBoxWindow && !this.giftBoxShowing) {
    //     this.giftBoxWindow.show("withButton")
    // }
    if (this.shouldShowActiveRule && !this.activeRuleShowing) {
        this.paused = true;
        this.aimArrow.setPaused(true);
        this.windCloud.setPaused(true);
        this.activeRuleWindow.show();
        this.shouldShowActiveRule = false
    }
    if (this.shouldShowPlayRule && !this.palyRuleShowing) {
        this.paused = true;
        this.aimArrow.setPaused(true);
        this.windCloud.setPaused(true);
        this.playRuleWindow.show();
        this.shouldShowPlayRule = false
    }
    if (!this.paused) {
        this.windCloud.update();
        this.monster.update();
        this.gui.update();
        this.ball.update();
        var c = (xiaomishoot) && !this.pauseButton.isDown() && this.ball.sprite.x === this.ball.startPosX && this.ball.sprite.y === this.ball.startPosY && this.aimArrow.sprite.alpha >= 0.75;
        this.shadow.x = this.ball.sprite.x;
        this.aimArrow.update();
        if (c && this.currentState === this.states.IDLE) {
			xiaomishoot=false;
            this.currentState = this.states.AIMING
        } else {
            if (c && this.currentState === this.states.AIMING) {
				xiaomishoot=false;
                this.ball.makeShoot(this.aimArrow.shotDirectionX, this.aimArrow.shotDirectionY, this.aimArrow.shootAngle), this.makeShadowTween(), this.ball.rotateFast(), this.currentState = this.states.BEFORE_WIND, this.aimArrow.stopRotationTween()
            } else {
                if (this.currentState === this.states.IN_AIR_UP && this.ball.simpleMovement.velY > 0) {
                    this.currentState = this.states.IN_AIR, this.hideShowFrontMonsters(true)
                } else {
                    if (this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL || this.currentState === this.states.FROM_GROUND) {
                        for (var c = this.monster.circleCollisions, e = this.ball.circleCollision, a = true, b = 0; b < c.length && a; b++) {
                            if (c[b].checkAgainstWithPosCorrection(e, this.ball.befX, this.ball.befY) !== null && this.currentState !== this.states.FROM_WALL) {
                                a = false, b < 2 && this.ball.sprite.y < c[b].y + c[b].sprite.y - getConst(12) ? (this.ball.simpleMovement.velX = b === 1 ? getConst(50) : getConst(-50), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.velY = getConst(-300), this.ball.simpleMovement.accelY = getConst(800)) : (this.ball.simpleMovement.velX = this.ball.sprite.x > c[b].x + c[b].sprite.x ? getConst(130) : getConst(-130), this.ball.simpleMovement.accelX = 0), this.currentState = this.states.FROM_WALL, this.ball.rotateSlow()
                            }
                        }
                        if (this.monster.pointDetector.checkAgainstWithShift(this.ball.circleCollision, this.ball.befX, this.ball.befY) !== null) {
                            this.ball.simpleMovement.velX = 0;
                            this.ball.simpleMovement.accelX = 0;
                            this.ball.simpleMovement.velY = 0;
                            this.ball.simpleMovement.accelY = 0;
                            this.currentState = this.states.IDLE;
                            this.sensorTouched();
                            return
                        }
                        if (this.ball.sprite.x > MLE.width + getConst(80) || this.ball.sprite.y < getConst(-80)) {
                            this.noSuccessDetected();
                            this.currentState = this.states.IDLE;
                            return
                        }
                    }
                }
            }
        }
        if ((this.currentState === this.states.IN_AIR || this.currentState === this.states.FROM_WALL) && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) {
            this.ball.sprite.x > 800 || this.ball.sprite.y < getConst(-160) ? (this.noSuccessDetected(), this.currentState = this.states.IDLE) : (this.ball.rotateSlow(), this.currentState === this.states.FROM_WALL ? (this.ball.simpleMovement.velX *= getConst(200) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-200)) : (this.ball.simpleMovement.velX *= getConst(400) / this.ball.simpleMovement.velY, this.ball.simpleMovement.velY = getConst(-300)), this.ball.simpleMovement.accelX = 0, this.ball.simpleMovement.accelY = getConst(800), this.currentState = this.states.FROM_GROUND, this.hideShowFrontMonsters(false), this.ball.sprite.y = this.ground)
        } else {
            if (this.currentState == this.states.FROM_GROUND && this.ball.simpleMovement.velY > 0 && this.ball.sprite.y > this.ground) {
                this.ball.rotateStop(), this.ball.simpleMovement.setValues(0, 0, 0, 0), this.currentState = this.states.IDLE, this.noSuccessDetected(true), this.ball.sprite.y = this.ground
            }
        }
    }
};
GameScene.prototype.draw = function() {
    MLE.context.imageSmoothingEnabled = true;
    this.bg.draw();
    this.monster.draw();
    this.aimArrow.draw();
    this.shadow.draw();
    this.ball.draw();
    this.monsterFront.x = this.monster.group.x;
    this.monsterFront.y = this.monster.group.y - this.monster.group.pivotY;
    this.monsterFront.draw();
    this.gui.draw();
    this.windCloud.draw();
    // this.activeRuleButton.draw();
    this.playRuleButton.draw();
    this.activeRuleWindow.draw();
    this.playRuleWindow.draw();
    // this.giftBoxWindow.draw()
};
GameScene.prototype.startGame = function() {};
GameScene.prototype.makeShadowTween = function() {
    var a = this.ball.startPosY + getConst(35),
        b = this.ground + getConst(15);
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.y = a;
    createjs.Tween.get(this.shadow).to({
        y: b,
        alpha: 0.7,
        scaleX: 0.3,
        scaleY: 0.3
    }, 2000, createjs.Ease.quadOut)
};
GameScene.prototype.hideShowFrontMonsters = function(a) {
    this.monsterFront.alpha = a ? 1 : 0
};
GameScene.prototype.noSuccessDetected = function() {
    this.monster.makeHungryAnimation();
    this.hideShowFrontMonsters(false);
    this.gui.zeroPoints();
    createjs.Tween.get(this.ball.sprite).to({
        alpha: 0
    }, 150).call(this.createNewBall, null, this);
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 120);
    this.aimArrow.sprite.alpha > 0 && createjs.Tween.get(this.aimArrow.sprite).to({
        alpha: 0
    }, 120);
    this.generateNewWind()
};
GameScene.prototype.createNewBall = function() {
    this.ball.simpleMovement.setValues(0, 0, 0, 0);
    this.ball.rotateStop();
    this.ball.sprite.x = this.ball.startPosX;
    this.ball.sprite.y = this.ball.startPosY + getConst(140);
    this.ball.sprite.scaleX = this.ball.sprite.scaleY = 1;
    this.ball.sprite.alpha = 0.5;
    createjs.Tween.get(this.ball.sprite).wait(250).to({
        y: this.ball.startPosY,
        alpha: 1
    }, 350, createjs.Ease.sineOut);
    this.aimArrow.resumeRotationTween();
    this.shadow.x = this.ball.startPosX;
    this.shadow.y = this.ball.startPosY + getConst(170);
    this.shadow.centerPivot();
    this.shadow.scaleX = this.shadow.scaleY = 0.6;
    this.shadow.alpha = 0.5;
    createjs.Tween.get(this.shadow).wait(250).to({
        y: this.ball.startPosY + getConst(30),
        alpha: 1
    }, 350, createjs.Ease.sineOut)
};
GameScene.prototype.sensorTouched = function() {
    if (this.isEasyLevel && (this.easyLevelCounter += 1, this.easyLevelCounter >= 3 && (this.easyLevel += 1, this.easyLevelCounter = 0, this.easyLevel === 6))) {
        this.isEasyLevel = false
    }
    createjs.Tween.get(this.shadow, {
        override: true
    }).to({
        alpha: 0
    }, 150);
    this.ball.sprite.alpha = 0;
    this.hideShowFrontMonsters(false);
    this.gui.hitTime++;
    // if (this.gui.hitTime == 2) {
    //     this.gui.hitTime = 0;
    //     this.gui.getGiftTime++;
    //     this.giftCount++;
    //     gameScene.gui.giftBoxs.text.text = "x " + gameScene.giftCount;
    //     if (!gameScene.firstShowGift) {
    //         gameScene.gui.light.show()
    //     }
    //     setTimeout(function() {
    //         gameScene.gui.light.hide()
    //     }, 1500)
    // }
    this.gui.addPoints(1);
    this.generateNewWind();
    this.createNewBall()
};
GameScene.prototype.generateNewWind = function() {
    var a = Math.random() + Math.random(),
        b = getConst(1000),
        a = a * b - b;
    this.windCloud.changeWind(MLE.Util.mapValue(a, -getConst(1000), getConst(1000), -10, 10));
    this.windPower = a * MLE.Util.mapValue(Math.abs(a), 0, b, 0.9, 0.7)
};
GameScene.prototype.pauseClicked = function() {
    this.paused = true;
    this.aimArrow.setPaused(true);
    this.windCloud.setPaused(true);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 0
    }, 350)
};
GameScene.prototype.resume = function() {
    this.aimArrow.setPaused(false);
    this.windCloud.setPaused(false);
    createjs.Tween.get(this.pauseButton.group).to({
        alpha: 1
    }, 350).wait(500).call(function() {
        this.paused = false
    }.bind(this))
};
GameScene.prototype.activeRuleClicked = function() {
    this.shouldShowActiveRule = true
};
GameScene.prototype.playRuleClicked = function() {
    this.shouldShowPlayRule = true
};
var WindCloud = function() {
    this.init()
};
WindCloud.prototype.init = function() {
    this.group = new MLE.Group;
    this.windCloud = new MLE.Sprite("wind", 45, -130);
    this.windCloud.centerPivot();
    this.sprite = new MLE.Sprite("fanleft1", 0, -80);
    this.imageAnim = new MLE.ImageAnim(this.sprite);
    this.imageAnim.addAnim("fan", "fanleft1,fanleft2".split(","), 20);
    this.imageAnim.gotoAndPlay(0, "fan");
    this.group.addChild(this.windCloud);
    this.group.addChild(this.sprite);
    this.windFont = new MLE.TextSprite;
    this.windFont.text = "2.5";
    this.windFont.size = 27;
    this.windFont.x += getConst(35);
    this.numberPin = new MLE.Pin(this.windFont, this.group, getConst(45), -100);
    this.windNumber = 2.5;
    this.tween = {}
};
WindCloud.prototype.update = function() {
    this.windNumber = Math.round(this.windNumber * 10) / 10;
    this.windFont.text = "" + this.windNumber;
    this.windNumber % 1 === 0 && (this.windFont.text += ".0");
    this.numberPin.update();
    this.imageAnim.update()
};
WindCloud.prototype.draw = function() {
    this.group.draw();
    this.windFont.draw()
};
WindCloud.prototype.changeWind = function(b) {
    b = Math.round(b * 10) / 10;
    b === 0 && (b = 0.1);
    if (this.group.scaleX / b > 0) {
        this.tween = createjs.Tween.get(this).to({
            windNumber: Math.abs(b)
        }, 750, createjs.Ease.sineInOut)
    } else {
        var c = this.group.scaleX,
            a;
        a = c === 1 ? [getConst(-100), MLE.width + getConst(100), MLE.width] : [MLE.width + getConst(100), getConst(-100), 0];
        this.tween = createjs.Tween.get(this.group).to({
            x: a[0]
        }, 400).to({
            x: a[1],
            scaleX: c * -1
        }).call(function() {
            this.windNumber = Math.abs(b);
            this.numberPin.offsetX = getConst(35) * c * -1
        }.bindd(this)).to({
            x: a[2]
        }, 400, createjs.Ease.sineInOut)
    }
};
WindCloud.prototype.setPaused = function(a) {
    this.tween._paused = a
};
var Monster = function() {
    this.init()
};
Monster.prototype.init = function() {
    this.group = new MLE.Group;
    this.shadow = new MLE.Sprite("shadow", -1, -1);
    this.shadow.centerPivot();
    this.shadow.alpha = 0;
    this.body = new MLE.Sprite("goal", 0, 0);
    this.body.centerPivot();
    this.group.addChild(this.body);
    this.group.pivotY = getConst(224);
    this.baseY = this.baseX = 0;
    this.circleCollisions = [];
    for (var b = [{
            x: 40,
            y: -165,
            r: 4
        }, {
            x: -40,
            y: -165,
            r: 4
        }, {
            x: 36,
            y: -150,
            r: 4
        }, {
            x: -36,
            y: -150,
            r: 4
        }, {
            x: 33,
            y: -135,
            r: 4
        }, {
            x: -33,
            y: -135,
            r: 4
        }, {
            x: 29,
            y: -120,
            r: 4
        }, {
            x: -29,
            y: -120,
            r: 4
        }, {
            x: 27,
            y: -105,
            r: 4
        }, {
            x: -27,
            y: -105,
            r: 4
        }, {
            x: 25,
            y: -90,
            r: 4
        }, {
            x: -25,
            y: -90,
            r: 4
        }, {
            x: 23,
            y: -75,
            r: 4
        }, {
            x: -23,
            y: -75,
            r: 4
        }], c = 0; c < b.length; c++) {
        var a = b[c],
            a = new MLE.CircleCollision(this.shadow, getConst(a.x), getConst(a.y), getConst(a.r));
        this.circleCollisions.push(a);
        a.realX = a.x
    }
    this.pointDetector = new MLE.CircleCollision(this.shadow, 0, getConst(-94), getConst(30))
};
Monster.prototype.update = function() {};
Monster.prototype.draw = function() {
    this.shadow.draw();
    this.group.draw();
    for (var a = 0; a < this.circleCollisions.length; a++) {
        this.circleCollisions[a].drawDebug()
    }
    this.pointDetector.drawDebug()
};
Monster.prototype.setPositionXY = function(a, b) {
    this.baseX = a;
    this.baseY = b;
    this.shadow.x = a;
    this.shadow.y = b - getConst(98);
    window.gameScene.ground = this.shadow.y - getConst(95);
    this.group.x = a;
    this.group.y = b
};
Monster.prototype.setScaleX = function(a) {
    this.group.scaleX = a;
    this.shadow.scaleX = this.shadow.scaleY = a;
    window.gameScene.monsterFront.scaleX = a;
    for (var b = 0; b < this.circleCollisions.length; b++) {
        this.circleCollisions[b].x = this.circleCollisions[b].realX * a
    }
};
Monster.prototype.makeHappyJump = function() {};
Monster.prototype.makeHungryAnimation = function() {};
var Ball = function() {
    this.init()
};
Ball.prototype.init = function() {
    this.startPosX = MLE.width / 2;
    this.startPosY = MLE.height - getConst(50);
    this.minScale = 0.48;
    this.sprite = new MLE.Sprite("paper", this.startPosX, this.startPosY);
    this.sprite.centerPivot();
    this.simpleMovement = new MLE.SimpleMovement(this.sprite);
    this.circleCollision = new MLE.CircleCollision(this.sprite, 0, 0, getConst(30));
    this.rotationSpeed = 0
};
Ball.prototype.update = function() {
    this.befX = this.sprite.x;
    this.befY = this.sprite.y;
    this.simpleMovement.update();
    this.sprite.angle += this.rotationSpeed * MLE.tick / 1000;
    if (window.gameScene.currentState > window.gameScene.states.AIMING && window.gameScene.currentState < window.gameScene.states.FROM_WALL) {
        var a = this.sprite.y - this.simpleMovement.velY * this.simpleMovement.velY / this.simpleMovement.accelY / 2;
        if (window.gameScene.currentState === window.gameScene.states.IN_AIR_UP || window.gameScene.currentState === window.gameScene.states.BEFORE_WIND) {
            a = (this.sprite.y - a) / (this.startPosY - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, 1)
        } else {
            if (window.gameScene.currentState === window.gameScene.states.IN_AIR) {
                a = (this.sprite.y - a) / (window.gameScene.ground - getConst(0) - a), this.sprite.scaleX = this.sprite.scaleY = a.map(0, 1, 1 - (1 - this.minScale) / 1.3, this.minScale)
            }
        }
        if (this.sprite.scaleX < this.minScale) {
            this.sprite.scaleX = this.sprite.scaleY = this.minScale
        }
        this.circleCollision.r = getConst(30) * this.sprite.scaleX
    }
};
Ball.prototype.draw = function() {
    this.sprite.draw();
    this.circleCollision.drawDebug()
};
Ball.prototype.makeShoot = function(b, c, a) {
    createjs.Tween.get(this.sprite).to({
        x: this.sprite.x + 2 * b,
        y: this.sprite.y + 2 * c
    }, 200).call(function() {
        a = MLE.Util.toDeg(a);
        var d = getConst(-800),
            f = window.gameScene.windPower * 0.9,
            e = getConst(1100);
        this.simpleMovement.setValues(d / c * b, d, f, e);
        window.gameScene.currentState = window.gameScene.states.IN_AIR_UP
    }.bindd(this))
};
Ball.prototype.rotateStop = function() {
    this.rotationSpeed = 0
};
Ball.prototype.rotateSlow = function() {
    this.rotationSpeed = 500
};
Ball.prototype.rotateFast = function() {
    this.rotationSpeed = 1500
};
var AimArrow = function() {
    this.init()
};
AimArrow.prototype.init = function() {
    this.maxAngle = 50;
    this.angleChangeDirection = 1;
    this.angleChangeSpeed = 80;
    this.sprite = new MLE.Sprite("aimArrow", MLE.width / 2, MLE.height - getConst(50));
    this.sprite.setPivotPercent(0.5, 1.1);
    this.shootAngle = this.shotDirectionY = this.shotDirectionX = -1;
    this.makeRotationTween()
};
AimArrow.prototype.update = function() {
    var a = this.sprite.pivotY * this.sprite.scaleY,
        b = this.sprite.x + Math.sin(MLE.Util.toRad(this.sprite.angle)) * a,
        a = this.sprite.y - Math.cos(MLE.Util.toRad(this.sprite.angle)) * a;
    this.shotDirectionX = b - this.sprite.x;
    this.shotDirectionY = a - this.sprite.y;
    this.shootAngle = this.sprite.angle
};
AimArrow.prototype.draw = function() {
    this.sprite.draw()
};
AimArrow.prototype.makeRotationTween = function() {
    createjs.Tween.removeTweens(this.sprite);
    this.sprite.scaleY = 0.95;
    this.rotationTween = createjs.Tween.get(this.sprite, {
        loop: true
    }).to({
        angle: 38
    }, 500).to({
        angle: -38
    }, 1000).to({
        angle: 0
    }, 500)
};
AimArrow.prototype.stopRotationTween = function() {
    this.rotationTween._paused = true;
    createjs.Tween.get(this.sprite).wait(500).to({
        alpha: 0
    }, 350)
};
AimArrow.prototype.resumeRotationTween = function() {
    this.rotationTween._paused = false;
    createjs.Tween.get(this.sprite).wait(500).to({
        alpha: 1
    }, 350).call(function() {
        window.gameScene.currentState = window.gameScene.states.AIMING
    })
};
AimArrow.prototype.setPaused = function(a) {
    this.rotationTween._paused = a
};
var GUI = function(a) {
    this.init(a)
};
GUI.prototype.init = function(a) {
    this.multiplier = a;
    this.group = new MLE.Group;
    this.box1 = new MLE.Sprite("box", 130, 830);
    this.group.addChild(this.box1);
    this.box1.centerPivot();
    this.box2 = new MLE.Sprite("box", 130, 890);
    this.group.addChild(this.box2);
    this.box2.centerPivot();
    this.points = new MLE.TextSprite;
    this.points.x = getConst(180);
    this.points.y = getConst(909);
    this.points.text = "0";
    this.ptsText = new MLE.TextSprite;
    this.ptsText.text = "最大连中:";
    this.ptsText.size = 23;
    this.ptsText.color = "#000000";
    this.ptsText.border = "#e6e6e6";
    this.ptsText.x = getConst(80);
    this.ptsText.align = "left";
    this.ptsText.y = getConst(113);
    this.ptsText.adjustFontSize(500);
    this.group.addChild(this.ptsText);
    this.currentPoint = new MLE.TextSprite;
    this.currentPoint.x = getConst(195);
    this.currentPoint.y = getConst(153);
    this.currentPoint.text = "999";
    this.currentPoint.size = 30;
    this.currentPoint.color = "#000000";
    this.currentPoint.border = "#d7d7d7";
    this.cptsText = new MLE.TextSprite;
    this.cptsText.text = "当前连中:";
    this.cptsText.size = 23;
    this.cptsText.color = "#000000";
    this.cptsText.border = "#d7d7d7";
    this.cptsText.x = getConst(80);
    this.cptsText.align = "left";
    this.cptsText.y = getConst(153);
    this.cptsText.adjustFontSize(500);
    this.group.addChild(this.cptsText);
    this.bstText = new MLE.TextSprite;
    this.bstText.text = "";
    this.bstText.size = 25;
    this.bstText.x = getConst(52);
    this.bstText.align = "left";
    this.bstText.y = getConst(910);
    this.bstText.adjustFontSize(500);
    this.group.addChild(this.bstText);
    this.best = new MLE.TextSprite;
    this.best.x = getConst(195);
    this.best.y = getConst(113);
    this.best.text = "0";
    this.best.size = 30;
    this.best.color = "#000000";
    this.best.border = "#e6e6e6";
    this.group.addChild(this.best);
    this.newPoints = new MLE.TextSprite;
    this.newPoints.x = getConst(52);
    this.newPoints.y = getConst({
        1: 450,
        2: 830,
        3: 830
    }[a + ""]);
    this.newPoints.text = "+5";
    this.group.addChild(this.newPoints);
    this.group.addChild(this.points);
    this.group.addChild(this.currentPoint);
    this.newPoints.xOffset = 0;
    this.pointsNumber = this.newPoints.alpha = 0;
    localStorage.WinterFantasyTossPaper2BestScore ? this.bestNumber = Number(localStorage.WinterFantasyTossPaper2BestScore) : (localStorage.WinterFantasyTossPaper2BestScore = "0", this.bestNumber = 0);
    this.alpha = 1;
    this.inRow = this.levelUp = 0;
    //  this.giftBoxCount = 10;
    // this.giftBoxs = new MenuButton("gift", "x 0");
    // this.giftBoxs.group.x = MLE.width / 2 + 270;
    // this.giftBoxs.group.y = MLE.height / 2 + 430;
    // this.giftBoxs.buttonDown.scaleX = 0.25;
    // this.giftBoxs.buttonDown.scaleY = 0.25;
    // this.giftBoxs.buttonUp.scaleX = 0.25;
    // this.giftBoxs.buttonUp.scaleY = 0.25;
    // this.giftBoxs.buttonUp.x = -60;
    // this.giftBoxs.buttonDown.x = -60;
    // this.giftBoxs.group.alpha = 0;
    // this.giftBoxs.clickCallback = this.giftBoxsClicked.bindd(this);
    // this.group.addChild(this.giftBoxs);
    this.hitTime = 0;
    this.light = new Light();
    this.light.sprite.x = MLE.width / 2 + 210;
    this.light.sprite.y = MLE.height / 2 + 430;
    this.light.sprite.scaleX = 0.4;
    this.light.sprite.scaleY = 0.4
};
GUI.prototype.update = function() {
    // this.giftBoxs.group.alpha == 1 && this.giftBoxs.update()
};
GUI.prototype.draw = function() {
    var a = MLE.context.globalAlpha;
    MLE.context.globalAlpha *= this.alpha;
    this.light.draw();
    this.points.text = "";
    this.best.text = "" + this.bestNumber;
    this.currentPoint.text = "" + Math.round(this.pointsNumber);
    this.newPoints.x = this.newPoints.xStart + this.newPoints.xOffset;
    this.group.draw();
    // this.giftBoxs.draw();
    MLE.context.globalAlpha = a
};
GUI.prototype.giftBoxsClicked = function() {
    // if (gameScene.giftCount > 0) {
    //     gameScene.shouldShowGiftBoxWindow = true
    // }
};
GUI.prototype.addPoints = function(a) {
    this.newPoints.xOffset = 0;
    this.newPoints.xStart = MLE.width / 2 + 30;
    if (2 - this.hitTime != 0 && this.hitTime != 0) {
        this.newPoints.text = "棒极了！再投中1次就可以获得礼盒了！"
    } else {
        this.newPoints.text = ""
    }
    if (this.multiplier !== 1) {
        this.newPoints.text = "+ " + this.multiplier + " x 再投中" + (3 - this.hitTime) + "就可以抽奖啦！"
    }
    createjs.Tween.get(this.newPoints).to({
        alpha: 1
    }, 150).wait(350).to({
        xOffset: -getConst(30),
        alpha: 0
    }, 500, createjs.Ease.sineInOut);
    a *= this.multiplier;
    for (var b = 0; b < a; b += 1) {
        createjs.Tween.get(this).wait(500 / a * (b + 1) + 350).call(function() {
            this.pointsNumber += 1;
            this.pointsNumber > this.bestNumber && (this.bestNumber += 1)
        }.bindd(this))
    }
    this.pointsNumber + a > this.bestNumber && (localStorage.WinterFantasyTossPaper2BestScore = this.pointsNumber + a + "");
    this.inRow += 1;
    this.currentPoint.text = "" + this.pointsNumber;
    if (this.inRow === 4) {
        this.inRow = 0, SG_Hooks.levelUp(this.multiplier, this.pointsNumber + a)
    }
};
GUI.prototype.zeroPoints = function() {
    this.inRow += 1;
    if (this.inRow === 4) {
        this.inRow = 0, SG_Hooks.gameOver(this.multiplier, this.pointsNumber)
    }
    this.hitTime = 0;
    createjs.Tween.get(this).to({
        pointsNumber: 0
    }, 750, createjs.Ease.sineInOut);
    this.newPoints.text = "好可惜，就差一点点";
    createjs.Tween.get(this.newPoints).to({
        alpha: 1
    }, 150).wait(350).to({
        xOffset: -getConst(30),
        alpha: 0
    }, 500, createjs.Ease.sineInOut)
};
var Light = function() {
    this.init()
};
Light.prototype.init = function() {
    this.sprite = new MLE.Sprite("light", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.makeRotationTween()
};
Light.prototype.update = function() {};
Light.prototype.draw = function() {
    this.sprite.draw()
};
Light.prototype.makeRotationTween = function() {
    createjs.Tween.removeTweens(this.sprite);
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    this.rotationTween = createjs.Tween.get(this.sprite, {
        loop: true
    }).to({
        angle: 1440
    }, 8000)
};
Light.prototype.stopRotationTween = function() {
    this.rotationTween._paused = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 100)
};
Light.prototype.show = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 100)
};
Light.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 100)
};
var GiftBoxWindow = function() {
    // this.init()
};
GiftBoxWindow.prototype.init = function() {
    // this.sprite = new MLE.Sprite("popup", 0, 0);
    // this.sprite.centerPivot();
    // this.sprite.x = MLE.width / 2;
    // this.sprite.y = MLE.height / 2;
    // this.sprite.alpha = 0;
    // this.light = new Light();
    // this.light.sprite.scaleX = 1.3;
    // this.light.sprite.scaleY = 1.3;
    // this.giftBox = new MenuButton("gift", "");
    // this.giftBox.group.x = MLE.width / 2;
    // this.giftBox.group.y = 0;
    // this.giftBox.group.alpha = 0;
    // this.noGift = new MLE.Sprite("nogift", 0, 0);
    // this.noGift.centerPivot();
    // this.noGift.x = MLE.width / 2;
    // this.noGift.y = MLE.height / 2 - 70;
    // this.noGift.alpha = 0;
    // this.openGiftBoxButton = new MenuButton("getgift", "");
    // this.openGiftBoxButton.group.x = MLE.width / 2;
    // this.openGiftBoxButton.group.y = 600;
    // this.openGiftBoxButton.group.alpha = 0;
    // this.openGiftBoxButton.clickCallback = this.openGiftBoxButtonClicked.bindd(this)
};
GiftBoxWindow.prototype.update = function() {
    // this.sprite.alpha === 1 && (this.giftBox.update());
    // this.openGiftBoxButton.group.alpha === 1 && this.openGiftBoxButton.update()
};
GiftBoxWindow.prototype.draw = function() {
    // this.sprite.draw();
    // this.light.draw();
    // this.giftBox.draw();
    // this.noGift.draw();
    // this.openGiftBoxButton.draw()
};
GiftBoxWindow.prototype.show = function(a) {
    gameScene.paused = true;
    gameScene.aimArrow.setPaused(true);
    gameScene.windCloud.setPaused(true);
    // gameScene.giftBoxShowing = true;
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    // if (gameScene.firstShowGift) {
    //     createjs.Tween.get(this.giftBox.group).wait(100).to({
    //         alpha: 1,
    //         y: 485
    //     }, 700, createjs.Ease.bounceOut);
    //     setTimeout(function() {
    //         gameScene.giftBoxWindow.giftBoxClicked()
    //     }, 1100)
    // }
    // if (a == "withButton") {
    //     setTimeout(function() {
    //         createjs.Tween.get(gameScene.giftBoxWindow.openGiftBoxButton.group).to({
    //             alpha: 1
    //         }, 200)
    //     }, 200);
    //     this.giftBox.group.alpha = 1;
    //     createjs.Tween.get(this.giftBox.group, {
    //         loop: false
    //     }).to({
    //         scaleX: 1,
    //         scaleY: 1,
    //         x: MLE.width / 2,
    //         y: MLE.height / 2 - 50
    //     }, 300)
    // }
};
GiftBoxWindow.prototype.hide = function() {
    // gameScene.giftBoxShowing = false;
    gameScene.resume();
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    // createjs.Tween.get(this.giftBox.group).to({
    //     alpha: 0
    // }, 350);
    // createjs.Tween.get(this.openGiftBoxButton.group).to({
    //     alpha: 0
    // }, 350);
    createjs.Tween.get(this.noGift).to({
        alpha: 0
    }, 350);
    this.light.hide()
};
GiftBoxWindow.prototype.getgiftClicked = function() {
    // window.location = "http://www.baidu.com"
};
GiftBoxWindow.prototype.openGiftBoxButtonClicked = function() {
    // gameScene.shouldShowGiftBoxWindow = false;
    // gameScene.giftCount--;
    // gameScene.gui.giftBoxs.text.text = "x " + gameScene.giftCount;
    // this.rotationTween = createjs.Tween.get(this.giftBox.group, {
    //     loop: false
    // }).to({
    //     angle: 3
    // }, 50).to({
    //     angle: -3
    // }, 50).to({
    //     angle: 0
    // }, 50).to({
    //     angle: 3
    // }, 50).to({
    //     angle: -3
    // }, 50).to({
    //     angle: 0
    // }, 50).to({
    //     alpha: 0
    // }, 150);
    // var b = new XMLHttpRequest();
    // if (b != null) {
    //     b.open("get", "http://123.57.64.159/getRandom.php", true);
    //     b.send(null);
    //     b.onreadystatechange = function() {
    //         if (b.status == 200 && b.responseText.indexOf("http://17323.zuikuapp.com/") == 0) {
    //             window.location = b.responseText
    //         } else {
    //             setTimeout(function() {
    //                 createjs.Tween.get(gameScene.giftBoxWindow.noGift).to({
    //                     alpha: 1
    //                 }, 200)
    //             }, 300);
    //             setTimeout(function() {
    //                 createjs.Tween.get(gameScene.giftBoxWindow.noGift).to({
    //                     alpha: 0
    //                 }, 200)
    //             }, 1300)
    //         }
    //     }
    // }
    // setTimeout(function() {
    //     gameScene.giftBoxWindow.hide()
    // }, 1500)
};
GiftBoxWindow.prototype.giftBoxClicked = function() {
    // createjs.Tween.get(this.giftBox.group, {
    //     loop: false
    // }).to({
    //     scaleX: 0.25,
    //     scaleY: 0.25,
    //     x: MLE.width / 2 + 210,
    //     y: MLE.height / 2 + 430
    // }, 800);
    // createjs.Tween.get(this.light.sprite, {
    //     loop: false
    // }).to({
    //     scaleX: 0.25,
    //     scaleY: 0.25,
    //     x: MLE.width / 2 + 210,
    //     y: MLE.height / 2 + 430
    // }, 800);
    // setTimeout(function() {
    //     gameScene.giftBoxWindow.hide();
    //     gameScene.resume();
    //     createjs.Tween.get(gameScene.gui.giftBoxs.group).to({
    //         alpha: 1
    //     }, 350)
    // }, 1200);
    // this.giftBox.block = true
};
var PauseWindow = function() {
    this.init()
};
PauseWindow.prototype.init = function() {
    this.sprite = new MLE.Sprite("popup", 0, 0);
    this.sprite.centerPivot();
    this.sprite.x = MLE.width / 2;
    this.sprite.y = MLE.height / 2;
    this.sprite.alpha = 0;
    this.resumeButton = new MenuButton("gift", "");
    this.resumeButton.group.x = MLE.width / 2;
    this.resumeButton.group.y = 420;
    this.resumeButton.group.alpha = 0;
    this.resumeButton.clickCallback = this.resumeClicked.bindd(this);
    this.backToMenuButton = new MenuButton("gift", "");
    this.backToMenuButton.group.x = MLE.width / 2;
    this.backToMenuButton.group.y = 580;
    this.backToMenuButton.group.alpha = 0;
    this.backToMenuButton.clickCallback = this.backToMainMenu.bindd(this)
};
PauseWindow.prototype.update = function() {
    this.sprite.alpha === 1 && (this.resumeButton.update(), this.backToMenuButton.update())
};
PauseWindow.prototype.draw = function() {
    this.sprite.draw();
    this.resumeButton.draw();
    this.backToMenuButton.draw()
};
PauseWindow.prototype.show = function(a) {
    createjs.Tween.get(this.sprite).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.resumeButton.group).wait(200).to({
        alpha: 1
    }, 350);
    createjs.Tween.get(this.backToMenuButton.group).wait(400).to({
        alpha: 1
    }, 350)
};
PauseWindow.prototype.hide = function() {
    createjs.Tween.get(this.sprite).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.resumeButton.group).to({
        alpha: 0
    }, 350);
    createjs.Tween.get(this.backToMenuButton.group).to({
        alpha: 0
    }, 350)
};
PauseWindow.prototype.resumeClicked = function() {
    this.hide();
    gameScene.resume()
};
PauseWindow.prototype.backToMainMenu = function() {
    this.hide();
    gameScene.resume()
};
var RotateScene = function() {
    this.init()
};
RotateScene.prototype.init = function() {
    window.rotateScene = this;
    this.rotateImage = new MLE.Sprite("rotate", MLE.width / 2, MLE.height / 2);
    this.rotateImage.scaleX = this.rotateImage.scaleY = 1.75;
    this.rotateImage.centerPivot()
};
RotateScene.prototype.update = function() {
    document.body.style["background-color"] = "#ffffff"
};
RotateScene.prototype.draw = function() {
    MLE.context.fillStyle = "#ffffff";
    MLE.context.fillRect(0, 0, MLE.width, MLE.height);
    this.rotateImage.draw()
};
var isSmall, remote = {
        log: function() {}
    },
    monsterType = 1,
    windowOnload = function() {
        var a = [],
            b;
        for (b in window.languages) {
            a.push(b)
        }
        b = "ch";
        window.currLang = window.languages[b];
        a = function() {};
        SG_Hooks.setOrientationHandler(a);
        SG_Hooks.setResizeHandler(a);
        a = (isSmall = false, "media2");
        b = isSmall ? "preloaderSD" : "preloaderHD";
        MLE.init({
            preManifest: [{
                src: "./" + b + "/preload.png",
                id: "preload"
            }, {
                src: "./" + b + "/loadingBar0.png",
                id: "loadingBar0"
            }, {
                src: "./" + b + "/loadingBar1.png",
                id: "loadingBar1"
            }, {
                src: "./" + b + "/loadingTextAnim.png",
                id: "loadingTextAnim"
            }, {
                src: "./" + b + "/rotatePortrait.png",
                id: "rotate"
            }],
            preLoaderScene: PreLoaderScene,
            manifest: [{
                src: "./" + a + "/shadow.png",
                id: "shadow"
            }, {
                src: "./" + a + "/aimArrow.png",
                id: "aimArrow"
            }, {
                src: "./" + a + "/gameBackground.png",
                id: "gameBackground"
            }, {
                src: "./" + b + "/preload.png",
                id: "splash"
            }, {
                src: "./" + a + "/paper.png",
                id: "paper"
            }, {
                src: "./" + a + "/wind.png",
                id: "wind"
            }, {
                src: "./" + a + "/goal.png",
                id: "goal"
            }, {
                src: "./" + a + "/goalFront.png",
                id: "goalFront"
            }, {
                src: "./" + a + "/box.png",
                id: "box"
            }, {
                src: "./" + a + "/transform_normal.png",
                id: "transform_normal"
            }, {
                src: "./" + a + "/transform_normal.png",
                id: "transform_select"
            }, {
                src: "./" + a + "/popup.png",
                id: "popup"
            }, {
                src: "./" + a + "/active_rule_normal.png",
                id: "active_rule_normal"
            }, {
                src: "./" + a + "/active_rule_normal.png",
                id: "active_rule_select"
            }, {
                src: "./" + a + "/play_rule_normal.png",
                id: "play_rule_normal"
            }, {
                src: "./" + a + "/play_rule_normal.png",
                id: "play_rule_select"
            }, {
                src: "./" + a + "/playRule.png",
                id: "playRule"
            }, {
                src: "./" + a + "/activeRule.png",
                id: "activeRule"
            }, {
                src: "./" + a + "/close_normal.png",
                id: "close_normal"
            }, {
                src: "./" + a + "/close_normal.png",
                id: "close_select"
            }, {
                src: "./" + a + "/gift_normal.png",
                id: "gift_normal"
            }, {
                src: "./" + a + "/gift_normal.png",
                id: "gift_select"
            }, {
                src: "./" + a + "/nogift.png",
                id: "nogift"
            }, {
                src: "./" + a + "/fanleft1.png",
                id: "fanleft1"
            }, {
                src: "./" + a + "/fanleft2.png",
                id: "fanleft2"
            }, {
                src: "./" + a + "/getgift_normal.png",
                id: "getgift_select"
            }, {
                src: "./" + a + "/getgift_normal.png",
                id: "getgift_normal"
            }, {
                src: "./" + a + "/light.png",
                id: "light"
            }],
            game: Director,
            height: 960,
            width: 640,
            scaling: true,
            showDebug: false
        })
    };
window.addEventListener("load", windowOnload, true);
var getConst = function(a) {
    return a * MLE.width / 640
};
